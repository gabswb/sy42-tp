
temperature_sensor_monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08007a60  08007a60  00017a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee4  08007ee4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee4  08007ee4  00017ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eec  08007eec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ef0  08007ef0  00017ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001dc  080080d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080080d0  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d042  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b3  00000000  00000000  0002d24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  000303b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c39  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffe5  00000000  00000000  00048b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e181  00000000  00000000  00058b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6cd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  000e6d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a48 	.word	0x08007a48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007a48 	.word	0x08007a48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_GPIO_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <MX_GPIO_Init+0x4c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_GPIO_Init+0x4c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_GPIO_Init+0x4c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <MX_GPIO_Init+0x4c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_GPIO_Init+0x4c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f000 ffad 	bl	8001ea8 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 fa50 	bl	80013f8 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001f8 	.word	0x200001f8
 8000f60:	40005400 	.word	0x40005400
 8000f64:	00061a80 	.word	0x00061a80

08000f68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_I2C_MspInit+0x84>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12c      	bne.n	8000fe4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_I2C_MspInit+0x8c>)
 8000fc4:	f000 fdec 	bl	8001ba0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ce      	sub	sp, #312	; 0x138
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef status;

	uint16_t MCP9808_adress = MCP9808_ADRESS << 1; // 0b011000 = 0x18 on décale de 1 car code sur 7 bits
 8000ffe:	2330      	movs	r3, #48	; 0x30
 8001000:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint8_t receive_buffer[2] = {0};//buffer ou on recoit les donnees de I2C
 8001004:	2300      	movs	r3, #0
 8001006:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	uint8_t transmit_data = MCP9808_AMBIANT_REG_ADDR;
 800100a:	2305      	movs	r3, #5
 800100c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t	register_config[3];



	/*Config de la precision (resolution) à 0.25°C*/
	register_config[0] = MCP9808_RESOL_REG_ADRR;
 8001010:	2308      	movs	r3, #8
 8001012:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	register_config[1] = 0x01; //bit for 0.25°C resolution
 8001016:	2301      	movs	r3, #1
 8001018:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	HAL_I2C_Master_Transmit(&hi2c1, MCP9808_adress, &register_config, (uint16_t) 2, HAL_MAX_DELAY);
 800101c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001020:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2302      	movs	r3, #2
 800102c:	48ab      	ldr	r0, [pc, #684]	; (80012dc <main+0x2e4>)
 800102e:	f001 f87f 	bl	8002130 <HAL_I2C_Master_Transmit>

	/*Config de l'hysteresis à 1.5°C*/
	register_config[0] = MCP9808_SENS_CONF_REG_ADDR;
 8001032:	2301      	movs	r3, #1
 8001034:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	register_config[1] = 0b010; //bit for 1.5°C hysteresis
 8001038:	2302      	movs	r3, #2
 800103a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	HAL_I2C_Master_Transmit(&hi2c1, MCP9808_adress, &register_config, (uint16_t) 3, HAL_MAX_DELAY);
 800103e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001042:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2303      	movs	r3, #3
 800104e:	48a3      	ldr	r0, [pc, #652]	; (80012dc <main+0x2e4>)
 8001050:	f001 f86e 	bl	8002130 <HAL_I2C_Master_Transmit>

	/*Config lower temperature limit to 24°C*/
	register_config[0] = MCP9808_LOWER_REG_ADRR;//24 = 2^4 + 2^3
 8001054:	2303      	movs	r3, #3
 8001056:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	register_config[1] = 0b01; // bit 8 correspondant a 2^4 °C
 800105a:	2301      	movs	r3, #1
 800105c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	register_config[2] = 0b10000000; //bit 7 correspondnat a 2^3 °C, bit 5 correspondant a 2^1°c et bit 4 a 2^0°C
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	HAL_I2C_Master_Transmit(&hi2c1, MCP9808_adress, &register_config, (uint16_t) 3, HAL_MAX_DELAY);
 8001066:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800106a:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2303      	movs	r3, #3
 8001076:	4899      	ldr	r0, [pc, #612]	; (80012dc <main+0x2e4>)
 8001078:	f001 f85a 	bl	8002130 <HAL_I2C_Master_Transmit>


	/*Config upper temperature limit to 27°C*/
	register_config[0] = MCP9808_UPPER_REG_ADRR;//27 = 2^4 + 2^3 + 2^1 + 2^0
 800107c:	2302      	movs	r3, #2
 800107e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	register_config[1] = 0b01; // bit 8 correspondant a 2^4 °C
 8001082:	2301      	movs	r3, #1
 8001084:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	register_config[2] = 0b10110000; //bit 7 correspondnat a 2^3 °C
 8001088:	23b0      	movs	r3, #176	; 0xb0
 800108a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	HAL_I2C_Master_Transmit(&hi2c1, MCP9808_adress, &register_config, (uint16_t) 3, HAL_MAX_DELAY);
 800108e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001092:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2303      	movs	r3, #3
 800109e:	488f      	ldr	r0, [pc, #572]	; (80012dc <main+0x2e4>)
 80010a0:	f001 f846 	bl	8002130 <HAL_I2C_Master_Transmit>

	/*Config alert*/
	register_config[0] = MCP9808_SENS_CONF_REG_ADDR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	register_config[2] = 0b011010;//config alert mode
 80010aa:	231a      	movs	r3, #26
 80010ac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	HAL_I2C_Master_Transmit(&hi2c1, MCP9808_adress, &register_config, (uint16_t) 3, HAL_MAX_DELAY);
 80010b0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80010b4:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2303      	movs	r3, #3
 80010c0:	4886      	ldr	r0, [pc, #536]	; (80012dc <main+0x2e4>)
 80010c2:	f001 f835 	bl	8002130 <HAL_I2C_Master_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 fbe7 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f91d 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f7ff fef5 	bl	8000ebc <MX_GPIO_Init>
  MX_I2C1_Init();
 80010d2:	f7ff ff1b 	bl	8000f0c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 fb43 	bl	8001760 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80010da:	f000 f993 	bl	8001404 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //Check if woken up from standby mode:
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80010de:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <main+0x2e8>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d11c      	bne.n	8001124 <main+0x12c>
  {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80010ea:	4b7d      	ldr	r3, [pc, #500]	; (80012e0 <main+0x2e8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a7c      	ldr	r2, [pc, #496]	; (80012e0 <main+0x2e8>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6013      	str	r3, [r2, #0]

      char* message = "Waking up from the standby mode\r\n";
 80010f6:	4b7b      	ldr	r3, [pc, #492]	; (80012e4 <main+0x2ec>)
 80010f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      HAL_UART_Transmit(&huart2, (uint8_t*) message, (uint16_t) strlen(message) , HAL_MAX_DELAY);
 80010fc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001100:	f7ff f86e 	bl	80001e0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001110:	4875      	ldr	r0, [pc, #468]	; (80012e8 <main+0x2f0>)
 8001112:	f002 ffd4 	bl	80040be <HAL_UART_Transmit>

      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8001116:	f44f 7080 	mov.w	r0, #256	; 0x100
 800111a:	f001 fe6d 	bl	8002df8 <HAL_PWR_DisableWakeUpPin>

      HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800111e:	4873      	ldr	r0, [pc, #460]	; (80012ec <main+0x2f4>)
 8001120:	f002 fefa 	bl	8003f18 <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  //Clear the WU flag
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001124:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <main+0x2e8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a6d      	ldr	r2, [pc, #436]	; (80012e0 <main+0x2e8>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001130:	4b6e      	ldr	r3, [pc, #440]	; (80012ec <main+0x2f4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <main+0x2f4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001140:	60da      	str	r2, [r3, #12]

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	f001 fe45 	bl	8002dd4 <HAL_PWR_EnableWakeUpPin>
  /**
   * activate rtc wake up from stand by mode
   * RTC_WAKEUPCLOCK_CK_SPRE_16BITS is a clock on 16 bits of frequence 1Hz
   * So we can set the WakeUpCounter to 10 as 10s
   */
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 800114a:	2204      	movs	r2, #4
 800114c:	210a      	movs	r1, #10
 800114e:	4867      	ldr	r0, [pc, #412]	; (80012ec <main+0x2f4>)
 8001150:	f002 fe22 	bl	8003d98 <HAL_RTCEx_SetWakeUpTimer_IT>


  //---------------------------------------------------------------------------------------------------------------------------------
  // LECTURE DE LA TEMPERATURE

  status = HAL_I2C_Master_Transmit(&hi2c1, MCP9808_adress, &transmit_data, (uint16_t) 1, HAL_MAX_DELAY);
 8001154:	f207 120f 	addw	r2, r7, #271	; 0x10f
 8001158:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	485d      	ldr	r0, [pc, #372]	; (80012dc <main+0x2e4>)
 8001166:	f000 ffe3 	bl	8002130 <HAL_I2C_Master_Transmit>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

  if ( status != HAL_OK )
 8001170:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001174:	2b00      	cmp	r3, #0
 8001176:	d010      	beq.n	800119a <main+0x1a2>
  {
	  char* message = "Error start\r\n";
 8001178:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <main+0x2f8>)
 800117a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  HAL_UART_Transmit(&huart2, (uint8_t*) message, (uint16_t) strlen(message) , HAL_MAX_DELAY);
 800117e:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001182:	f7ff f82d 	bl	80001e0 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001192:	4855      	ldr	r0, [pc, #340]	; (80012e8 <main+0x2f0>)
 8001194:	f002 ff93 	bl	80040be <HAL_UART_Transmit>
 8001198:	e07c      	b.n	8001294 <main+0x29c>
  }
  else
  {
	  status = HAL_I2C_Master_Receive(&hi2c1, MCP9808_adress, receive_buffer, (uint16_t) 2, HAL_MAX_DELAY);
 800119a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800119e:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	484c      	ldr	r0, [pc, #304]	; (80012dc <main+0x2e4>)
 80011ac:	f001 f8be 	bl	800232c <HAL_I2C_Master_Receive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

	  if ( status != HAL_OK )
 80011b6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d010      	beq.n	80011e0 <main+0x1e8>
	  {
		  char* message = "Error master receive\r\n";
 80011be:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <main+0x2fc>)
 80011c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		  HAL_UART_Transmit(&huart2, (uint8_t*) message, (uint16_t) strlen(message), HAL_MAX_DELAY);
 80011c4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80011c8:	f7ff f80a 	bl	80001e0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80011d8:	4843      	ldr	r0, [pc, #268]	; (80012e8 <main+0x2f0>)
 80011da:	f002 ff70 	bl	80040be <HAL_UART_Transmit>
 80011de:	e059      	b.n	8001294 <main+0x29c>
	  }
	  else
	  {
		  float temperature=0;
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  float f_temp[2]; //pour convertir les valeurs de receive_buffer en float

		  receive_buffer[0] &= 0x1F;
 80011e8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
		  if((receive_buffer[0] & 0x10) == 0x10)
 80011f6:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00e      	beq.n	8001220 <main+0x228>
		  {
			  receive_buffer[0] &= 0x0F;
 8001202:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
			  temperature -= 256;
 8001210:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8001214:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012f8 <main+0x300>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
		  }
		  f_temp[0] = receive_buffer[0];
 8001220:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122c:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
		  f_temp[1] = receive_buffer[1];
 8001230:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
		  temperature += (f_temp[0] * 16 + f_temp[1] / 16);
 8001240:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8001244:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124c:	edd7 6a42 	vldr	s13, [r7, #264]	; 0x108
 8001250:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8001254:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c

		  char message[256];
		  sprintf(message, "Temperature : %f\r\n", temperature);
 8001268:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800126c:	f7ff f974 	bl	8000558 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	1d38      	adds	r0, r7, #4
 8001276:	4921      	ldr	r1, [pc, #132]	; (80012fc <main+0x304>)
 8001278:	f004 f96e 	bl	8005558 <siprintf>
		  HAL_UART_Transmit(&huart2, message,  strlen(message), HAL_MAX_DELAY);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffae 	bl	80001e0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	4816      	ldr	r0, [pc, #88]	; (80012e8 <main+0x2f0>)
 8001290:	f002 ff15 	bl	80040be <HAL_UART_Transmit>

  }

  //-------------------------------------------------------------------------------------------------------------------------------------------

  char* message = "Going to standby mode\r\n";
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <main+0x308>)
 8001296:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  HAL_UART_Transmit(&huart2, (uint8_t*) message, (uint16_t) strlen(message) , HAL_MAX_DELAY);
 800129a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800129e:	f7fe ff9f 	bl	80001e0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <main+0x2f0>)
 80012b0:	f002 ff05 	bl	80040be <HAL_UART_Transmit>

  HAL_PWR_EnterSTANDBYMode();
 80012b4:	f001 fdb4 	bl	8002e20 <HAL_PWR_EnterSTANDBYMode>



  /*Debug print because this part of the code should not be reached*/
  message = "After Standby Mode\r\n";
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <main+0x30c>)
 80012ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  HAL_UART_Transmit(&huart2, (uint8_t*) message, (uint16_t) strlen(message) , HAL_MAX_DELAY);
 80012be:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80012c2:	f7fe ff8d 	bl	80001e0 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <main+0x2f0>)
 80012d4:	f002 fef3 	bl	80040be <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <main+0x2e0>
 80012da:	bf00      	nop
 80012dc:	200001f8 	.word	0x200001f8
 80012e0:	40007000 	.word	0x40007000
 80012e4:	08007a60 	.word	0x08007a60
 80012e8:	20000270 	.word	0x20000270
 80012ec:	2000024c 	.word	0x2000024c
 80012f0:	08007a84 	.word	0x08007a84
 80012f4:	08007a94 	.word	0x08007a94
 80012f8:	43800000 	.word	0x43800000
 80012fc:	08007aac 	.word	0x08007aac
 8001300:	08007ac0 	.word	0x08007ac0
 8001304:	08007ad8 	.word	0x08007ad8

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b098      	sub	sp, #96	; 0x60
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001312:	2230      	movs	r2, #48	; 0x30
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fcac 	bl	8004c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <SystemClock_Config+0xe8>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <SystemClock_Config+0xe8>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <SystemClock_Config+0xe8>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <SystemClock_Config+0xec>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001364:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <SystemClock_Config+0xec>)
 8001366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <SystemClock_Config+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001378:	230a      	movs	r3, #10
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fd5d 	bl	8002e50 <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800139c:	f000 f82c 	bl	80013f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 ffb6 	bl	800332c <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013c6:	f000 f817 	bl	80013f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013ca:	2302      	movs	r3, #2
 80013cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 f987 	bl	80036ec <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80013e4:	f000 f808 	bl	80013f8 <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3760      	adds	r7, #96	; 0x60
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <MX_RTC_Init+0xac>)
 800141e:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <MX_RTC_Init+0xb0>)
 8001420:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <MX_RTC_Init+0xac>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_RTC_Init+0xac>)
 800142a:	227f      	movs	r2, #127	; 0x7f
 800142c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <MX_RTC_Init+0xac>)
 8001430:	22ff      	movs	r2, #255	; 0xff
 8001432:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_RTC_Init+0xac>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_RTC_Init+0xac>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_RTC_Init+0xac>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001446:	481a      	ldr	r0, [pc, #104]	; (80014b0 <MX_RTC_Init+0xac>)
 8001448:	f002 fa3e 	bl	80038c8 <HAL_RTC_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001452:	f7ff ffd1 	bl	80013f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8001456:	2323      	movs	r3, #35	; 0x23
 8001458:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 800145a:	2359      	movs	r3, #89	; 0x59
 800145c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x59;
 800145e:	2359      	movs	r3, #89	; 0x59
 8001460:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2201      	movs	r2, #1
 800146e:	4619      	mov	r1, r3
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <MX_RTC_Init+0xac>)
 8001472:	f002 faba 	bl	80039ea <HAL_RTC_SetTime>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800147c:	f7ff ffbc 	bl	80013f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001480:	2301      	movs	r3, #1
 8001482:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001484:	2301      	movs	r3, #1
 8001486:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001488:	2301      	movs	r3, #1
 800148a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800148c:	2300      	movs	r3, #0
 800148e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	2201      	movs	r2, #1
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_RTC_Init+0xac>)
 8001498:	f002 fb64 	bl	8003b64 <HAL_RTC_SetDate>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014a2:	f7ff ffa9 	bl	80013f8 <Error_Handler>
//  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
//  {
//    Error_Handler();
//  }

}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000024c 	.word	0x2000024c
 80014b4:	40002800 	.word	0x40002800

080014b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_RTC_MspInit+0x30>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10a      	bne.n	80014e0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_RTC_MspInit+0x34>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 fb2c 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80014da:	2003      	movs	r0, #3
 80014dc:	f000 fb45 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40002800 	.word	0x40002800
 80014ec:	42470e3c 	.word	0x42470e3c

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f9d6 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <RTC_WKUP_IRQHandler+0x10>)
 800159a:	f002 fd15 	bl	8003fc8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000024c 	.word	0x2000024c

080015a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_kill>:

int _kill(int pid, int sig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c2:	f003 fb2d 	bl	8004c20 <__errno>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2216      	movs	r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
	return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_exit>:

void _exit (int status)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe7 	bl	80015b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ea:	e7fe      	b.n	80015ea <_exit+0x12>

080015ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
	}

return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
	}
	return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001686:	605a      	str	r2, [r3, #4]
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_isatty>:

int _isatty(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f003 fa92 	bl	8004c20 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20018000 	.word	0x20018000
 8001728:	00000400 	.word	0x00000400
 800172c:	2000026c 	.word	0x2000026c
 8001730:	200002c8 	.word	0x200002c8

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <SystemInit+0x28>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <SystemInit+0x28>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <SystemInit+0x28>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	609a      	str	r2, [r3, #8]
#endif
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f002 fc44 	bl	8004024 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f7ff fe29 	bl	80013f8 <Error_Handler>
  }

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000270 	.word	0x20000270
 80017b0:	40004400 	.word	0x40004400

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_UART_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_UART_MspInit+0x88>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_UART_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_UART_MspInit+0x8c>)
 800182a:	f000 f9b9 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800184a:	e003      	b.n	8001854 <LoopCopyDataInit>

0800184c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800184e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001852:	3104      	adds	r1, #4

08001854 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800185a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800185c:	d3f6      	bcc.n	800184c <CopyDataInit>
  ldr  r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001860:	e002      	b.n	8001868 <LoopFillZerobss>

08001862 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001862:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001864:	f842 3b04 	str.w	r3, [r2], #4

08001868 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800186a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800186c:	d3f9      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800186e:	f7ff ff61 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f003 f9db 	bl	8004c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff fbbf 	bl	8000ff8 <main>
  bx  lr    
 800187a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800187c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001880:	08007ef4 	.word	0x08007ef4
  ldr  r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001888:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800188c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001890:	200002c4 	.word	0x200002c4

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f92b 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fe10 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f943 	bl	8001b86 <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f90b 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	200002b0 	.word	0x200002b0

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200002b0 	.word	0x200002b0

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e159      	b.n	8001e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8148 	bne.w	8001e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d00b      	beq.n	8001bfa <HAL_GPIO_Init+0x5a>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bee:	2b11      	cmp	r3, #17
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0xfc>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a2 	beq.w	8001e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x202>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1fe>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1f6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1f2>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f aea2 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e12b      	b.n	8002112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff f84a 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f0c:	f001 fbc6 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8001f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a81      	ldr	r2, [pc, #516]	; (800211c <HAL_I2C_Init+0x274>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d807      	bhi.n	8001f2c <HAL_I2C_Init+0x84>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_I2C_Init+0x278>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e006      	b.n	8001f3a <HAL_I2C_Init+0x92>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_I2C_Init+0x27c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0e7      	b.n	8002112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a78      	ldr	r2, [pc, #480]	; (8002128 <HAL_I2C_Init+0x280>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9b      	lsrs	r3, r3, #18
 8001f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	; (800211c <HAL_I2C_Init+0x274>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d802      	bhi.n	8001f7c <HAL_I2C_Init+0xd4>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	e009      	b.n	8001f90 <HAL_I2C_Init+0xe8>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_I2C_Init+0x284>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	495c      	ldr	r1, [pc, #368]	; (800211c <HAL_I2C_Init+0x274>)
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d819      	bhi.n	8001fe4 <HAL_I2C_Init+0x13c>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e59      	subs	r1, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_I2C_Init+0x138>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e59      	subs	r1, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fde:	e051      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e04f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_I2C_Init+0x168>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e012      	b.n	8002036 <HAL_I2C_Init+0x18e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	0099      	lsls	r1, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	fbb0 f3f3 	udiv	r3, r0, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x196>
 800203a:	2301      	movs	r3, #1
 800203c:	e022      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <HAL_I2C_Init+0x1bc>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e58      	subs	r0, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	440b      	add	r3, r1
 8002054:	fbb0 f3f3 	udiv	r3, r0, r3
 8002058:	3301      	adds	r3, #1
 800205a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	6809      	ldr	r1, [r1, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6911      	ldr	r1, [r2, #16]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	000186a0 	.word	0x000186a0
 8002120:	001e847f 	.word	0x001e847f
 8002124:	003d08ff 	.word	0x003d08ff
 8002128:	431bde83 	.word	0x431bde83
 800212c:	10624dd3 	.word	0x10624dd3

08002130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fc0e 	bl	8001964 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 80e0 	bne.w	8002318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	4970      	ldr	r1, [pc, #448]	; (8002324 <HAL_I2C_Master_Transmit+0x1f4>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fc58 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	e0d3      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x50>
 800217c:	2302      	movs	r3, #2
 800217e:	e0cc      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d007      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2210      	movs	r2, #16
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_I2C_Master_Transmit+0x1f8>)
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fac2 	bl	8002778 <I2C_MasterRequestWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08d      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002214:	e066      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fcd2 	bl	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	6a39      	ldr	r1, [r7, #32]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fcc2 	bl	8002c46 <I2C_WaitOnBTFFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d107      	bne.n	80022e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01a      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d194      	bne.n	8002216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	461a      	mov	r2, r3
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
 800233c:	4613      	mov	r3, r2
 800233e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff fb10 	bl	8001964 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 820b 	bne.w	800276a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2319      	movs	r3, #25
 800235a:	2201      	movs	r2, #1
 800235c:	497c      	ldr	r1, [pc, #496]	; (8002550 <HAL_I2C_Master_Receive+0x224>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fb5a 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	e1fe      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2C_Master_Receive+0x50>
 8002378:	2302      	movs	r3, #2
 800237a:	e1f7      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d007      	beq.n	80023a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2222      	movs	r2, #34	; 0x22
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2210      	movs	r2, #16
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	893a      	ldrh	r2, [r7, #8]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a5c      	ldr	r2, [pc, #368]	; (8002554 <HAL_I2C_Master_Receive+0x228>)
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e4:	8979      	ldrh	r1, [r7, #10]
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fa46 	bl	800287c <I2C_MasterRequestRead>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1b8      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d113      	bne.n	800242a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e18c      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	2b01      	cmp	r3, #1
 8002430:	d11b      	bne.n	800246a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e16c      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b02      	cmp	r3, #2
 8002470:	d11b      	bne.n	80024aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	e14c      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024d0:	e138      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	f200 80f1 	bhi.w	80026be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d123      	bne.n	800252c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fbed 	bl	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e139      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800252a:	e10b      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	2b02      	cmp	r3, #2
 8002532:	d14e      	bne.n	80025d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	2200      	movs	r2, #0
 800253c:	4906      	ldr	r1, [pc, #24]	; (8002558 <HAL_I2C_Master_Receive+0x22c>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa6a 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e10e      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
 800254e:	bf00      	nop
 8002550:	00100002 	.word	0x00100002
 8002554:	ffff0000 	.word	0xffff0000
 8002558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d0:	e0b8      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	2200      	movs	r2, #0
 80025da:	4966      	ldr	r1, [pc, #408]	; (8002774 <HAL_I2C_Master_Receive+0x448>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fa1b 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0bf      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	2200      	movs	r2, #0
 8002636:	494f      	ldr	r1, [pc, #316]	; (8002774 <HAL_I2C_Master_Receive+0x448>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f9ed 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e091      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026bc:	e042      	b.n	8002744 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fb00 	bl	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e04c      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d118      	bne.n	8002744 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f aec2 	bne.w	80024d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	3728      	adds	r7, #40	; 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	00010004 	.word	0x00010004

08002778 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d006      	beq.n	80027a2 <I2C_MasterRequestWrite+0x2a>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d003      	beq.n	80027a2 <I2C_MasterRequestWrite+0x2a>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a0:	d108      	bne.n	80027b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00b      	b.n	80027cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	d107      	bne.n	80027cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f91d 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d103      	bne.n	80027fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e035      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002808:	d108      	bne.n	800281c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e01b      	b.n	8002854 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	11db      	asrs	r3, r3, #7
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0306 	and.w	r3, r3, #6
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f063 030f 	orn	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <I2C_MasterRequestWrite+0xfc>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f943 	bl	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e010      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <I2C_MasterRequestWrite+0x100>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f933 	bl	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	00010008 	.word	0x00010008
 8002878:	00010002 	.word	0x00010002

0800287c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d006      	beq.n	80028b6 <I2C_MasterRequestRead+0x3a>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <I2C_MasterRequestRead+0x3a>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b4:	d108      	bne.n	80028c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00b      	b.n	80028e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	2b11      	cmp	r3, #17
 80028ce:	d107      	bne.n	80028e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f893 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d103      	bne.n	8002910 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e079      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800291c:	d108      	bne.n	8002930 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	e05f      	b.n	80029f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	11db      	asrs	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0306 	and.w	r3, r3, #6
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f063 030f 	orn	r3, r3, #15
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4930      	ldr	r1, [pc, #192]	; (8002a10 <I2C_MasterRequestRead+0x194>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f8b9 	bl	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e054      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4929      	ldr	r1, [pc, #164]	; (8002a14 <I2C_MasterRequestRead+0x198>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f8a9 	bl	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e044      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f831 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ca:	d103      	bne.n	80029d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e017      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029d8:	897b      	ldrh	r3, [r7, #10]
 80029da:	11db      	asrs	r3, r3, #7
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0306 	and.w	r3, r3, #6
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f063 030e 	orn	r3, r3, #14
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <I2C_MasterRequestRead+0x198>)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f865 	bl	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	00010008 	.word	0x00010008
 8002a14:	00010002 	.word	0x00010002

08002a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a28:	e025      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d021      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe ff97 	bl	8001964 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d116      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e023      	b.n	8002abe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10d      	bne.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	e00c      	b.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d0b6      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad4:	e051      	b.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae4:	d123      	bne.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002afe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0204 	orr.w	r2, r3, #4
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e046      	b.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d021      	beq.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe ff15 	bl	8001964 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e020      	b.n	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10c      	bne.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e00b      	b.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d18d      	bne.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd0:	e02d      	b.n	8002c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f8ce 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e02d      	b.n	8002c3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d021      	beq.n	8002c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7fe febb 	bl	8001964 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d116      	bne.n	8002c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e007      	b.n	8002c3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d1ca      	bne.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c52:	e02d      	b.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f88d 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e02d      	b.n	8002cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d021      	beq.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6c:	f7fe fe7a 	bl	8001964 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d302      	bcc.n	8002c82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e007      	b.n	8002cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d1ca      	bne.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cd4:	e042      	b.n	8002d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d119      	bne.n	8002d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0210 	mvn.w	r2, #16
 8002cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e029      	b.n	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d18:	f7fe fe24 	bl	8001964 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d302      	bcc.n	8002d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d1b5      	bne.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d11b      	bne.n	8002dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4904      	ldr	r1, [pc, #16]	; (8002df4 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40007000 	.word	0x40007000

08002df8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_PWR_DisableWakeUpPin+0x24>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4904      	ldr	r1, [pc, #16]	; (8002e1c <HAL_PWR_DisableWakeUpPin+0x24>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000

08002e20 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002e2a:	f043 0302 	orr.w	r3, r3, #2
 8002e2e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002e3c:	bf30      	wfi
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e25e      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4b85      	ldr	r3, [pc, #532]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b82      	ldr	r3, [pc, #520]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e239      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x74>
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a75      	ldr	r2, [pc, #468]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b70      	ldr	r3, [pc, #448]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6f      	ldr	r2, [pc, #444]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6c      	ldr	r2, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a68      	ldr	r2, [pc, #416]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a65      	ldr	r2, [pc, #404]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fd2c 	bl	8001964 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fd28 	bl	8001964 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1fe      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xc0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fd18 	bl	8001964 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe fd14 	bl	8001964 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1ea      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b51      	ldr	r3, [pc, #324]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0xe8>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1be      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_RCC_OscConfig+0x244>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fccd 	bl	8001964 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fe fcc9 	bl	8001964 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e19f      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4925      	ldr	r1, [pc, #148]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCC_OscConfig+0x244>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fcac 	bl	8001964 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe fca8 	bl	8001964 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e17e      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d036      	beq.n	80030a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCC_OscConfig+0x248>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fc8c 	bl	8001964 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe fc88 	bl	8001964 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e15e      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_OscConfig+0x240>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
 800306e:	e01b      	b.n	80030a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_OscConfig+0x248>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fc75 	bl	8001964 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e00e      	b.n	800309c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fe fc71 	bl	8001964 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d907      	bls.n	800309c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e147      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
 8003090:	40023800 	.word	0x40023800
 8003094:	42470000 	.word	0x42470000
 8003098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ea      	bne.n	800307e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8097 	beq.w	80031e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10f      	bne.n	80030e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	4b7d      	ldr	r3, [pc, #500]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a7c      	ldr	r2, [pc, #496]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
 80030d6:	4b7a      	ldr	r3, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b77      	ldr	r3, [pc, #476]	; (80032c4 <HAL_RCC_OscConfig+0x474>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <HAL_RCC_OscConfig+0x474>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a73      	ldr	r2, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x474>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fc31 	bl	8001964 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fe fc2d 	bl	8001964 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e103      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x474>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x2ea>
 800312c:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a63      	ldr	r2, [pc, #396]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x324>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b05      	cmp	r3, #5
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x30c>
 8003142:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a5e      	ldr	r2, [pc, #376]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	4b5c      	ldr	r3, [pc, #368]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a5b      	ldr	r2, [pc, #364]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0x324>
 800315c:	4b58      	ldr	r3, [pc, #352]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
 8003168:	4b55      	ldr	r3, [pc, #340]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a54      	ldr	r2, [pc, #336]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fe fbf2 	bl	8001964 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fbee 	bl	8001964 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0c2      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ee      	beq.n	8003184 <HAL_RCC_OscConfig+0x334>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a8:	f7fe fbdc 	bl	8001964 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe fbd8 	bl	8001964 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0ac      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1ee      	bne.n	80031b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	4a38      	ldr	r2, [pc, #224]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80031de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8098 	beq.w	800331e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ee:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d05c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d141      	bne.n	8003286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCC_OscConfig+0x478>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fbac 	bl	8001964 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe fba8 	bl	8001964 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e07e      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	3b01      	subs	r3, #1
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	491b      	ldr	r1, [pc, #108]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x478>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe fb81 	bl	8001964 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe fb7d 	bl	8001964 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e053      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x416>
 8003284:	e04b      	b.n	800331e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <HAL_RCC_OscConfig+0x478>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fb6a 	bl	8001964 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fb66 	bl	8001964 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e03c      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_OscConfig+0x470>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x444>
 80032b2:	e034      	b.n	800331e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e02f      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d11c      	bne.n	800331a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d115      	bne.n	800331a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10d      	bne.n	800331a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800

0800332c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0cc      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d90c      	bls.n	8003368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b8      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d044      	beq.n	800344c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d119      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e07f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e067      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fe faa2 	bl	8001964 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fa9e 	bl	8001964 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d20c      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e032      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b2:	f000 f821 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	5ccb      	ldrb	r3, [r1, r3]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fa02 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08007af0 	.word	0x08007af0
 80034f0:	20000000 	.word	0x20000000
 80034f4:	20000004 	.word	0x20000004

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fc:	b090      	sub	sp, #64	; 0x40
 80034fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	2300      	movs	r3, #0
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d00d      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x40>
 800351c:	2b08      	cmp	r3, #8
 800351e:	f200 80a1 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x16c>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x34>
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x3a>
 800352a:	e09b      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_GetSysClockFreq+0x184>)
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003530:	e09b      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003536:	e098      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003538:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	2200      	movs	r2, #0
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	627a      	str	r2, [r7, #36]	; 0x24
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003560:	2100      	movs	r1, #0
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003564:	fb03 f201 	mul.w	r2, r3, r1
 8003568:	2300      	movs	r3, #0
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	4413      	add	r3, r2
 8003570:	4a43      	ldr	r2, [pc, #268]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003572:	fba0 1202 	umull	r1, r2, r0, r2
 8003576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003578:	460a      	mov	r2, r1
 800357a:	62ba      	str	r2, [r7, #40]	; 0x28
 800357c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357e:	4413      	add	r3, r2
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	2200      	movs	r2, #0
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	61fa      	str	r2, [r7, #28]
 800358a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003592:	f7fd fb11 	bl	8000bb8 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	e053      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	2200      	movs	r2, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	617a      	str	r2, [r7, #20]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035b2:	f04f 0b00 	mov.w	fp, #0
 80035b6:	4652      	mov	r2, sl
 80035b8:	465b      	mov	r3, fp
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	ebb2 080a 	subs.w	r8, r2, sl
 80035d2:	eb63 090b 	sbc.w	r9, r3, fp
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ea:	ebb2 0408 	subs.w	r4, r2, r8
 80035ee:	eb63 0509 	sbc.w	r5, r3, r9
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	00eb      	lsls	r3, r5, #3
 80035fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003600:	00e2      	lsls	r2, r4, #3
 8003602:	4614      	mov	r4, r2
 8003604:	461d      	mov	r5, r3
 8003606:	eb14 030a 	adds.w	r3, r4, sl
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	eb45 030b 	adc.w	r3, r5, fp
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361e:	4629      	mov	r1, r5
 8003620:	028b      	lsls	r3, r1, #10
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003628:	4621      	mov	r1, r4
 800362a:	028a      	lsls	r2, r1, #10
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	2200      	movs	r2, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	60fa      	str	r2, [r7, #12]
 8003638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800363c:	f7fd fabc 	bl	8000bb8 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003662:	e002      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetSysClockFreq+0x184>)
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800366c:	4618      	mov	r0, r3
 800366e:	3740      	adds	r7, #64	; 0x40
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	017d7840 	.word	0x017d7840

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000000 	.word	0x20000000

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	08007b00 	.word	0x08007b00

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c8:	f7ff ffdc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0b5b      	lsrs	r3, r3, #13
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	08007b00 	.word	0x08007b00

080036ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003710:	2b00      	cmp	r3, #0
 8003712:	d035      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003714:	4b67      	ldr	r3, [pc, #412]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800371a:	f7fe f923 	bl	8001964 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003722:	f7fe f91f 	bl	8001964 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0ba      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003734:	4b60      	ldr	r3, [pc, #384]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	019a      	lsls	r2, r3, #6
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	071b      	lsls	r3, r3, #28
 800374c:	495a      	ldr	r1, [pc, #360]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003754:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800375a:	f7fe f903 	bl	8001964 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003762:	f7fe f8ff 	bl	8001964 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e09a      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8083 	beq.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037aa:	4b44      	ldr	r3, [pc, #272]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a43      	ldr	r2, [pc, #268]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037b6:	f7fe f8d5 	bl	8001964 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7fe f8d1 	bl	8001964 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e06c      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037d0:	4b3a      	ldr	r3, [pc, #232]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d028      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003802:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d114      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe f89f 	bl	8001964 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe f89b 	bl	8001964 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e034      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ee      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003858:	d10d      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	4912      	ldr	r1, [pc, #72]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
 8003874:	e005      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800387c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003880:	6093      	str	r3, [r2, #8]
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7c1a      	ldrb	r2, [r3, #16]
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038a6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	42470068 	.word	0x42470068
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40007000 	.word	0x40007000
 80038c0:	42470e40 	.word	0x42470e40
 80038c4:	424711e0 	.word	0x424711e0

080038c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e083      	b.n	80039e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7f5b      	ldrb	r3, [r3, #29]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fde4 	bl	80014b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	22ca      	movs	r2, #202	; 0xca
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2253      	movs	r2, #83	; 0x53
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9fb 	bl	8003d02 <RTC_EnterInitMode>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e05e      	b.n	80039e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6919      	ldr	r1, [r3, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	041a      	lsls	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003982:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10e      	bne.n	80039b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f98d 	bl	8003cb2 <HAL_RTC_WaitForSynchro>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e018      	b.n	80039e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b087      	sub	sp, #28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	7f1b      	ldrb	r3, [r3, #28]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_RTC_SetTime+0x1c>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0aa      	b.n	8003b5c <HAL_RTC_SetTime+0x172>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d126      	bne.n	8003a66 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f992 	bl	8003d5a <RTC_ByteToBcd2>
 8003a36:	4603      	mov	r3, r0
 8003a38:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f98b 	bl	8003d5a <RTC_ByteToBcd2>
 8003a44:	4603      	mov	r3, r0
 8003a46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a48:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f983 	bl	8003d5a <RTC_ByteToBcd2>
 8003a54:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	78db      	ldrb	r3, [r3, #3]
 8003a5e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e018      	b.n	8003a98 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a86:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	78db      	ldrb	r3, [r3, #3]
 8003a92:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	22ca      	movs	r2, #202	; 0xca
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2253      	movs	r2, #83	; 0x53
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f92a 	bl	8003d02 <RTC_EnterInitMode>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e047      	b.n	8003b5c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ad6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ada:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d111      	bne.n	8003b46 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8c5 	bl	8003cb2 <HAL_RTC_WaitForSynchro>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	22ff      	movs	r2, #255	; 0xff
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00a      	b.n	8003b5c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	22ff      	movs	r2, #255	; 0xff
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}

08003b64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	7f1b      	ldrb	r3, [r3, #28]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_RTC_SetDate+0x1c>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e094      	b.n	8003caa <HAL_RTC_SetDate+0x146>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_RTC_SetDate+0x4c>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	f023 0310 	bic.w	r3, r3, #16
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	330a      	adds	r3, #10
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f8cd 	bl	8003d5a <RTC_ByteToBcd2>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f8c6 	bl	8003d5a <RTC_ByteToBcd2>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003bd2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	789b      	ldrb	r3, [r3, #2]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f8be 	bl	8003d5a <RTC_ByteToBcd2>
 8003bde:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003be0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e00e      	b.n	8003c0e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	78db      	ldrb	r3, [r3, #3]
 8003bf4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003bfc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	22ca      	movs	r2, #202	; 0xca
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2253      	movs	r2, #83	; 0x53
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f86f 	bl	8003d02 <RTC_EnterInitMode>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	22ff      	movs	r2, #255	; 0xff
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2204      	movs	r2, #4
 8003c36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e033      	b.n	8003caa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c60:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d111      	bne.n	8003c94 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f81e 	bl	8003cb2 <HAL_RTC_WaitForSynchro>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	22ff      	movs	r2, #255	; 0xff
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2204      	movs	r2, #4
 8003c88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e00a      	b.n	8003caa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd90      	pop	{r4, r7, pc}

08003cb2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ccc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cce:	f7fd fe49 	bl	8001964 <HAL_GetTick>
 8003cd2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003cd4:	e009      	b.n	8003cea <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cd6:	f7fd fe45 	bl	8001964 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce4:	d901      	bls.n	8003cea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e007      	b.n	8003cfa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ee      	beq.n	8003cd6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d119      	bne.n	8003d50 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d26:	f7fd fe1d 	bl	8001964 <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d2c:	e009      	b.n	8003d42 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d2e:	f7fd fe19 	bl	8001964 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3c:	d901      	bls.n	8003d42 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e007      	b.n	8003d52 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ee      	beq.n	8003d2e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003d68:	e005      	b.n	8003d76 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	3b0a      	subs	r3, #10
 8003d74:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b09      	cmp	r3, #9
 8003d7a:	d8f6      	bhi.n	8003d6a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	b2db      	uxtb	r3, r3
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	7f1b      	ldrb	r3, [r3, #28]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e0a6      	b.n	8003efe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2202      	movs	r2, #2
 8003dba:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	22ca      	movs	r2, #202	; 0xca
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2253      	movs	r2, #83	; 0x53
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d022      	beq.n	8003e20 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a4c      	ldr	r2, [pc, #304]	; (8003f10 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0adb      	lsrs	r3, r3, #11
 8003de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	1e5a      	subs	r2, r3, #1
 8003df4:	617a      	str	r2, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	22ff      	movs	r2, #255	; 0xff
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2203      	movs	r2, #3
 8003e06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e075      	b.n	8003efe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e7      	bne.n	8003df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a36      	ldr	r2, [pc, #216]	; (8003f10 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0adb      	lsrs	r3, r3, #11
 8003e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e40:	fb02 f303 	mul.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	617a      	str	r2, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	22ff      	movs	r2, #255	; 0xff
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e04a      	b.n	8003efe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0e7      	beq.n	8003e46 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0207 	bic.w	r2, r2, #7
 8003e8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ea8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eb4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	10624dd3 	.word	0x10624dd3
 8003f14:	40013c00 	.word	0x40013c00

08003f18 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7f1b      	ldrb	r3, [r3, #28]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e047      	b.n	8003fc0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	22ca      	movs	r2, #202	; 0xca
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2253      	movs	r2, #83	; 0x53
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f6c:	f7fd fcfa 	bl	8001964 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003f72:	e013      	b.n	8003f9c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003f74:	f7fd fcf6 	bl	8001964 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f82:	d90b      	bls.n	8003f9c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2203      	movs	r2, #3
 8003f90:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e011      	b.n	8003fc0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0e4      	beq.n	8003f74 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f816 	bl	8004010 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003ff4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003ff8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	775a      	strb	r2, [r3, #29]
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40013c00 	.word	0x40013c00

08004010 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03f      	b.n	80040b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fbb2 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f90b 	bl	8004284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af02      	add	r7, sp, #8
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	f040 8083 	bne.w	80041e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Transmit+0x2e>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e07b      	b.n	80041e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Transmit+0x40>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e074      	b.n	80041e8 <HAL_UART_Transmit+0x12a>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2221      	movs	r2, #33	; 0x21
 8004110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004114:	f7fd fc26 	bl	8001964 <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800412e:	e042      	b.n	80041b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	d122      	bne.n	800418e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2200      	movs	r2, #0
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f84c 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e042      	b.n	80041e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004174:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3302      	adds	r3, #2
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	e017      	b.n	80041b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3301      	adds	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	e013      	b.n	80041b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f829 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e01f      	b.n	80041e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	60ba      	str	r2, [r7, #8]
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1b7      	bne.n	8004130 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2200      	movs	r2, #0
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f810 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e006      	b.n	80041e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004200:	e02c      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d028      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x30>
 8004210:	f7fd fba8 	bl	8001964 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21d      	bcs.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800422e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e00f      	b.n	800427c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	429a      	cmp	r2, r3
 8004278:	d0c3      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800428c:	af00      	add	r7, sp, #0
 800428e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004292:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800429e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042a2:	68d9      	ldr	r1, [r3, #12]
 80042a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	ea40 0301 	orr.w	r3, r0, r1
 80042ae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	431a      	orrs	r2, r3
 80042be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80042d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042de:	f021 010c 	bic.w	r1, r1, #12
 80042e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80042ec:	430b      	orrs	r3, r1
 80042ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	ea40 0301 	orr.w	r3, r0, r1
 800430c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004318:	f040 824a 	bne.w	80047b0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800431c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b96      	ldr	r3, [pc, #600]	; (800457c <UART_SetConfig+0x2f8>)
 8004324:	429a      	cmp	r2, r3
 8004326:	d006      	beq.n	8004336 <UART_SetConfig+0xb2>
 8004328:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b94      	ldr	r3, [pc, #592]	; (8004580 <UART_SetConfig+0x2fc>)
 8004330:	429a      	cmp	r2, r3
 8004332:	f040 8129 	bne.w	8004588 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004336:	f7ff f9c5 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 800433a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800433e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004348:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800434c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	1891      	adds	r1, r2, r2
 8004356:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800435a:	415b      	adcs	r3, r3
 800435c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004360:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004364:	4621      	mov	r1, r4
 8004366:	1851      	adds	r1, r2, r1
 8004368:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800436c:	4629      	mov	r1, r5
 800436e:	414b      	adcs	r3, r1
 8004370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004380:	4649      	mov	r1, r9
 8004382:	00cb      	lsls	r3, r1, #3
 8004384:	4641      	mov	r1, r8
 8004386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438a:	4641      	mov	r1, r8
 800438c:	00ca      	lsls	r2, r1, #3
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	4603      	mov	r3, r0
 8004394:	4622      	mov	r2, r4
 8004396:	189b      	adds	r3, r3, r2
 8004398:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800439c:	462b      	mov	r3, r5
 800439e:	460a      	mov	r2, r1
 80043a0:	eb42 0303 	adc.w	r3, r2, r3
 80043a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80043a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043b4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80043b8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80043bc:	460b      	mov	r3, r1
 80043be:	18db      	adds	r3, r3, r3
 80043c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c4:	4613      	mov	r3, r2
 80043c6:	eb42 0303 	adc.w	r3, r2, r3
 80043ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80043d2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80043d6:	f7fc fbef 	bl	8000bb8 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b69      	ldr	r3, [pc, #420]	; (8004584 <UART_SetConfig+0x300>)
 80043e0:	fba3 2302 	umull	r2, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	011c      	lsls	r4, r3, #4
 80043e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80043f2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80043f6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80043fa:	4642      	mov	r2, r8
 80043fc:	464b      	mov	r3, r9
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004404:	415b      	adcs	r3, r3
 8004406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800440a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800440e:	4641      	mov	r1, r8
 8004410:	1851      	adds	r1, r2, r1
 8004412:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004416:	4649      	mov	r1, r9
 8004418:	414b      	adcs	r3, r1
 800441a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800442a:	4659      	mov	r1, fp
 800442c:	00cb      	lsls	r3, r1, #3
 800442e:	4651      	mov	r1, sl
 8004430:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004434:	4651      	mov	r1, sl
 8004436:	00ca      	lsls	r2, r1, #3
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	4603      	mov	r3, r0
 800443e:	4642      	mov	r2, r8
 8004440:	189b      	adds	r3, r3, r2
 8004442:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004446:	464b      	mov	r3, r9
 8004448:	460a      	mov	r2, r1
 800444a:	eb42 0303 	adc.w	r3, r2, r3
 800444e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004452:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800445e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004462:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004466:	460b      	mov	r3, r1
 8004468:	18db      	adds	r3, r3, r3
 800446a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800446e:	4613      	mov	r3, r2
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004478:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800447c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004480:	f7fc fb9a 	bl	8000bb8 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4611      	mov	r1, r2
 800448a:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <UART_SetConfig+0x300>)
 800448c:	fba3 2301 	umull	r2, r3, r3, r1
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2264      	movs	r2, #100	; 0x64
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	1acb      	subs	r3, r1, r3
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <UART_SetConfig+0x300>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ae:	441c      	add	r4, r3
 80044b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80044ba:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80044be:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80044c2:	4642      	mov	r2, r8
 80044c4:	464b      	mov	r3, r9
 80044c6:	1891      	adds	r1, r2, r2
 80044c8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80044cc:	415b      	adcs	r3, r3
 80044ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044d2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80044d6:	4641      	mov	r1, r8
 80044d8:	1851      	adds	r1, r2, r1
 80044da:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80044f2:	4659      	mov	r1, fp
 80044f4:	00cb      	lsls	r3, r1, #3
 80044f6:	4651      	mov	r1, sl
 80044f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fc:	4651      	mov	r1, sl
 80044fe:	00ca      	lsls	r2, r1, #3
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	4603      	mov	r3, r0
 8004506:	4642      	mov	r2, r8
 8004508:	189b      	adds	r3, r3, r2
 800450a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800450e:	464b      	mov	r3, r9
 8004510:	460a      	mov	r2, r1
 8004512:	eb42 0303 	adc.w	r3, r2, r3
 8004516:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800451a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004526:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800452a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800452e:	460b      	mov	r3, r1
 8004530:	18db      	adds	r3, r3, r3
 8004532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004536:	4613      	mov	r3, r2
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004540:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004544:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004548:	f7fc fb36 	bl	8000bb8 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <UART_SetConfig+0x300>)
 8004552:	fba3 1302 	umull	r1, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2164      	movs	r1, #100	; 0x64
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	3332      	adds	r3, #50	; 0x32
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <UART_SetConfig+0x300>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 0207 	and.w	r2, r3, #7
 8004570:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4422      	add	r2, r4
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	e349      	b.n	8004c10 <UART_SetConfig+0x98c>
 800457c:	40011000 	.word	0x40011000
 8004580:	40011400 	.word	0x40011400
 8004584:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7ff f888 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800458c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800459a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800459e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80045a2:	4622      	mov	r2, r4
 80045a4:	462b      	mov	r3, r5
 80045a6:	1891      	adds	r1, r2, r2
 80045a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80045ac:	415b      	adcs	r3, r3
 80045ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045b6:	4621      	mov	r1, r4
 80045b8:	eb12 0a01 	adds.w	sl, r2, r1
 80045bc:	4629      	mov	r1, r5
 80045be:	eb43 0b01 	adc.w	fp, r3, r1
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d6:	4692      	mov	sl, r2
 80045d8:	469b      	mov	fp, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	eb1a 0303 	adds.w	r3, sl, r3
 80045e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045e4:	462b      	mov	r3, r5
 80045e6:	eb4b 0303 	adc.w	r3, fp, r3
 80045ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80045fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80045fe:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004602:	460b      	mov	r3, r1
 8004604:	18db      	adds	r3, r3, r3
 8004606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800460a:	4613      	mov	r3, r2
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004614:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004618:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800461c:	f7fc facc 	bl	8000bb8 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4b61      	ldr	r3, [pc, #388]	; (80047ac <UART_SetConfig+0x528>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	011c      	lsls	r4, r3, #4
 800462e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004632:	2200      	movs	r2, #0
 8004634:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004638:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800463c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	67b9      	str	r1, [r7, #120]	; 0x78
 8004648:	415b      	adcs	r3, r3
 800464a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800464c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004650:	4641      	mov	r1, r8
 8004652:	1851      	adds	r1, r2, r1
 8004654:	6739      	str	r1, [r7, #112]	; 0x70
 8004656:	4649      	mov	r1, r9
 8004658:	414b      	adcs	r3, r1
 800465a:	677b      	str	r3, [r7, #116]	; 0x74
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004668:	4659      	mov	r1, fp
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	4651      	mov	r1, sl
 800466e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004672:	4651      	mov	r1, sl
 8004674:	00ca      	lsls	r2, r1, #3
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	4603      	mov	r3, r0
 800467c:	4642      	mov	r2, r8
 800467e:	189b      	adds	r3, r3, r2
 8004680:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004684:	464b      	mov	r3, r9
 8004686:	460a      	mov	r2, r1
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004690:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800469c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80046a0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80046a4:	460b      	mov	r3, r1
 80046a6:	18db      	adds	r3, r3, r3
 80046a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046aa:	4613      	mov	r3, r2
 80046ac:	eb42 0303 	adc.w	r3, r2, r3
 80046b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80046b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80046ba:	f7fc fa7d 	bl	8000bb8 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <UART_SetConfig+0x528>)
 80046c6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2264      	movs	r2, #100	; 0x64
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <UART_SetConfig+0x528>)
 80046dc:	fba3 2302 	umull	r2, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046e8:	441c      	add	r4, r3
 80046ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80046f4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80046f8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	6639      	str	r1, [r7, #96]	; 0x60
 8004704:	415b      	adcs	r3, r3
 8004706:	667b      	str	r3, [r7, #100]	; 0x64
 8004708:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	65b9      	str	r1, [r7, #88]	; 0x58
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004740:	464b      	mov	r3, r9
 8004742:	460a      	mov	r2, r1
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800474c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004758:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800475c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004760:	460b      	mov	r3, r1
 8004762:	18db      	adds	r3, r3, r3
 8004764:	653b      	str	r3, [r7, #80]	; 0x50
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	657b      	str	r3, [r7, #84]	; 0x54
 800476e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004772:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004776:	f7fc fa1f 	bl	8000bb8 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <UART_SetConfig+0x528>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a06      	ldr	r2, [pc, #24]	; (80047ac <UART_SetConfig+0x528>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 0207 	and.w	r2, r3, #7
 800479e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4422      	add	r2, r4
 80047a6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80047a8:	e232      	b.n	8004c10 <UART_SetConfig+0x98c>
 80047aa:	bf00      	nop
 80047ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b8d      	ldr	r3, [pc, #564]	; (80049ec <UART_SetConfig+0x768>)
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d006      	beq.n	80047ca <UART_SetConfig+0x546>
 80047bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b8b      	ldr	r3, [pc, #556]	; (80049f0 <UART_SetConfig+0x76c>)
 80047c4:	429a      	cmp	r2, r3
 80047c6:	f040 8117 	bne.w	80049f8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ca:	f7fe ff7b 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 80047ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80047dc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80047e0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80047ec:	415b      	adcs	r3, r3
 80047ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047f4:	4621      	mov	r1, r4
 80047f6:	eb12 0801 	adds.w	r8, r2, r1
 80047fa:	4629      	mov	r1, r5
 80047fc:	eb43 0901 	adc.w	r9, r3, r1
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800480c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004810:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004814:	4690      	mov	r8, r2
 8004816:	4699      	mov	r9, r3
 8004818:	4623      	mov	r3, r4
 800481a:	eb18 0303 	adds.w	r3, r8, r3
 800481e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004822:	462b      	mov	r3, r5
 8004824:	eb49 0303 	adc.w	r3, r9, r3
 8004828:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800482c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004838:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004848:	4629      	mov	r1, r5
 800484a:	008b      	lsls	r3, r1, #2
 800484c:	4621      	mov	r1, r4
 800484e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004852:	4621      	mov	r1, r4
 8004854:	008a      	lsls	r2, r1, #2
 8004856:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800485a:	f7fc f9ad 	bl	8000bb8 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4b64      	ldr	r3, [pc, #400]	; (80049f4 <UART_SetConfig+0x770>)
 8004864:	fba3 2302 	umull	r2, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	011c      	lsls	r4, r3, #4
 800486c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004876:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800487a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800487e:	4642      	mov	r2, r8
 8004880:	464b      	mov	r3, r9
 8004882:	1891      	adds	r1, r2, r2
 8004884:	6439      	str	r1, [r7, #64]	; 0x40
 8004886:	415b      	adcs	r3, r3
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
 800488a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800488e:	4641      	mov	r1, r8
 8004890:	1851      	adds	r1, r2, r1
 8004892:	63b9      	str	r1, [r7, #56]	; 0x38
 8004894:	4649      	mov	r1, r9
 8004896:	414b      	adcs	r3, r1
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80048a6:	4659      	mov	r1, fp
 80048a8:	00cb      	lsls	r3, r1, #3
 80048aa:	4651      	mov	r1, sl
 80048ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b0:	4651      	mov	r1, sl
 80048b2:	00ca      	lsls	r2, r1, #3
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	4603      	mov	r3, r0
 80048ba:	4642      	mov	r2, r8
 80048bc:	189b      	adds	r3, r3, r2
 80048be:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80048c2:	464b      	mov	r3, r9
 80048c4:	460a      	mov	r2, r1
 80048c6:	eb42 0303 	adc.w	r3, r2, r3
 80048ca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80048ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80048da:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80048ea:	4649      	mov	r1, r9
 80048ec:	008b      	lsls	r3, r1, #2
 80048ee:	4641      	mov	r1, r8
 80048f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f4:	4641      	mov	r1, r8
 80048f6:	008a      	lsls	r2, r1, #2
 80048f8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80048fc:	f7fc f95c 	bl	8000bb8 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <UART_SetConfig+0x770>)
 8004906:	fba3 1302 	umull	r1, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	2164      	movs	r1, #100	; 0x64
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	3332      	adds	r3, #50	; 0x32
 8004918:	4a36      	ldr	r2, [pc, #216]	; (80049f4 <UART_SetConfig+0x770>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004924:	441c      	add	r4, r3
 8004926:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004930:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004934:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	6339      	str	r1, [r7, #48]	; 0x30
 8004940:	415b      	adcs	r3, r3
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
 8004944:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004948:	4641      	mov	r1, r8
 800494a:	1851      	adds	r1, r2, r1
 800494c:	62b9      	str	r1, [r7, #40]	; 0x28
 800494e:	4649      	mov	r1, r9
 8004950:	414b      	adcs	r3, r1
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004960:	4659      	mov	r1, fp
 8004962:	00cb      	lsls	r3, r1, #3
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496a:	4651      	mov	r1, sl
 800496c:	00ca      	lsls	r2, r1, #3
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	4603      	mov	r3, r0
 8004974:	4642      	mov	r2, r8
 8004976:	189b      	adds	r3, r3, r2
 8004978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800497c:	464b      	mov	r3, r9
 800497e:	460a      	mov	r2, r1
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004994:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80049a4:	4649      	mov	r1, r9
 80049a6:	008b      	lsls	r3, r1, #2
 80049a8:	4641      	mov	r1, r8
 80049aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ae:	4641      	mov	r1, r8
 80049b0:	008a      	lsls	r2, r1, #2
 80049b2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80049b6:	f7fc f8ff 	bl	8000bb8 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <UART_SetConfig+0x770>)
 80049c0:	fba3 1302 	umull	r1, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <UART_SetConfig+0x770>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4422      	add	r2, r4
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	e112      	b.n	8004c10 <UART_SetConfig+0x98c>
 80049ea:	bf00      	nop
 80049ec:	40011000 	.word	0x40011000
 80049f0:	40011400 	.word	0x40011400
 80049f4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe fe50 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 80049fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004a0a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004a0e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004a12:	4642      	mov	r2, r8
 8004a14:	464b      	mov	r3, r9
 8004a16:	1891      	adds	r1, r2, r2
 8004a18:	6239      	str	r1, [r7, #32]
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a22:	4641      	mov	r1, r8
 8004a24:	1854      	adds	r4, r2, r1
 8004a26:	4649      	mov	r1, r9
 8004a28:	eb43 0501 	adc.w	r5, r3, r1
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	00eb      	lsls	r3, r5, #3
 8004a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a3a:	00e2      	lsls	r2, r4, #3
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	461d      	mov	r5, r3
 8004a40:	4643      	mov	r3, r8
 8004a42:	18e3      	adds	r3, r4, r3
 8004a44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a48:	464b      	mov	r3, r9
 8004a4a:	eb45 0303 	adc.w	r3, r5, r3
 8004a4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a5e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004a6e:	4629      	mov	r1, r5
 8004a70:	008b      	lsls	r3, r1, #2
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a78:	4621      	mov	r1, r4
 8004a7a:	008a      	lsls	r2, r1, #2
 8004a7c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004a80:	f7fc f89a 	bl	8000bb8 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b64      	ldr	r3, [pc, #400]	; (8004c1c <UART_SetConfig+0x998>)
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011c      	lsls	r4, r3, #4
 8004a92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a9c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004aa0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	61b9      	str	r1, [r7, #24]
 8004aac:	415b      	adcs	r3, r3
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	1851      	adds	r1, r2, r1
 8004ab8:	6139      	str	r1, [r7, #16]
 8004aba:	4649      	mov	r1, r9
 8004abc:	414b      	adcs	r3, r1
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004acc:	4659      	mov	r1, fp
 8004ace:	00cb      	lsls	r3, r1, #3
 8004ad0:	4651      	mov	r1, sl
 8004ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	00ca      	lsls	r2, r1, #3
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	460a      	mov	r2, r1
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004af4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b00:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004b10:	4649      	mov	r1, r9
 8004b12:	008b      	lsls	r3, r1, #2
 8004b14:	4641      	mov	r1, r8
 8004b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	008a      	lsls	r2, r1, #2
 8004b1e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004b22:	f7fc f849 	bl	8000bb8 <__aeabi_uldivmod>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4b3c      	ldr	r3, [pc, #240]	; (8004c1c <UART_SetConfig+0x998>)
 8004b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	2164      	movs	r1, #100	; 0x64
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	3332      	adds	r3, #50	; 0x32
 8004b3e:	4a37      	ldr	r2, [pc, #220]	; (8004c1c <UART_SetConfig+0x998>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b4a:	441c      	add	r4, r3
 8004b4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b5a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	1891      	adds	r1, r2, r2
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	415b      	adcs	r3, r3
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b6e:	4641      	mov	r1, r8
 8004b70:	1851      	adds	r1, r2, r1
 8004b72:	6039      	str	r1, [r7, #0]
 8004b74:	4649      	mov	r1, r9
 8004b76:	414b      	adcs	r3, r1
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b86:	4659      	mov	r1, fp
 8004b88:	00cb      	lsls	r3, r1, #3
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b90:	4651      	mov	r1, sl
 8004b92:	00ca      	lsls	r2, r1, #3
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4642      	mov	r2, r8
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	460a      	mov	r2, r1
 8004ba6:	eb42 0303 	adc.w	r3, r2, r3
 8004baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004bca:	4649      	mov	r1, r9
 8004bcc:	008b      	lsls	r3, r1, #2
 8004bce:	4641      	mov	r1, r8
 8004bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	008a      	lsls	r2, r1, #2
 8004bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bdc:	f7fb ffec 	bl	8000bb8 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <UART_SetConfig+0x998>)
 8004be6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2164      	movs	r1, #100	; 0x64
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	3332      	adds	r3, #50	; 0x32
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <UART_SetConfig+0x998>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4422      	add	r2, r4
 8004c0c:	609a      	str	r2, [r3, #8]
}
 8004c0e:	e7ff      	b.n	8004c10 <UART_SetConfig+0x98c>
 8004c10:	bf00      	nop
 8004c12:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004c16:	46bd      	mov	sp, r7
 8004c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1c:	51eb851f 	.word	0x51eb851f

08004c20 <__errno>:
 8004c20:	4b01      	ldr	r3, [pc, #4]	; (8004c28 <__errno+0x8>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	; (8004c64 <__libc_init_array+0x38>)
 8004c30:	4c0d      	ldr	r4, [pc, #52]	; (8004c68 <__libc_init_array+0x3c>)
 8004c32:	1b64      	subs	r4, r4, r5
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	2600      	movs	r6, #0
 8004c38:	42a6      	cmp	r6, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	4d0b      	ldr	r5, [pc, #44]	; (8004c6c <__libc_init_array+0x40>)
 8004c3e:	4c0c      	ldr	r4, [pc, #48]	; (8004c70 <__libc_init_array+0x44>)
 8004c40:	f002 ff02 	bl	8007a48 <_init>
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	2600      	movs	r6, #0
 8004c4a:	42a6      	cmp	r6, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c54:	4798      	blx	r3
 8004c56:	3601      	adds	r6, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5e:	4798      	blx	r3
 8004c60:	3601      	adds	r6, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	08007eec 	.word	0x08007eec
 8004c68:	08007eec 	.word	0x08007eec
 8004c6c:	08007eec 	.word	0x08007eec
 8004c70:	08007ef0 	.word	0x08007ef0

08004c74 <memset>:
 8004c74:	4402      	add	r2, r0
 8004c76:	4603      	mov	r3, r0
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <memset+0xa>
 8004c7c:	4770      	bx	lr
 8004c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c82:	e7f9      	b.n	8004c78 <memset+0x4>

08004c84 <__cvt>:
 8004c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	ec55 4b10 	vmov	r4, r5, d0
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	460e      	mov	r6, r1
 8004c90:	4619      	mov	r1, r3
 8004c92:	462b      	mov	r3, r5
 8004c94:	bfbb      	ittet	lt
 8004c96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c9a:	461d      	movlt	r5, r3
 8004c9c:	2300      	movge	r3, #0
 8004c9e:	232d      	movlt	r3, #45	; 0x2d
 8004ca0:	700b      	strb	r3, [r1, #0]
 8004ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ca8:	4691      	mov	r9, r2
 8004caa:	f023 0820 	bic.w	r8, r3, #32
 8004cae:	bfbc      	itt	lt
 8004cb0:	4622      	movlt	r2, r4
 8004cb2:	4614      	movlt	r4, r2
 8004cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cb8:	d005      	beq.n	8004cc6 <__cvt+0x42>
 8004cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cbe:	d100      	bne.n	8004cc2 <__cvt+0x3e>
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	e000      	b.n	8004cc8 <__cvt+0x44>
 8004cc6:	2103      	movs	r1, #3
 8004cc8:	ab03      	add	r3, sp, #12
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	ab02      	add	r3, sp, #8
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	ec45 4b10 	vmov	d0, r4, r5
 8004cd4:	4653      	mov	r3, sl
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	f000 fcea 	bl	80056b0 <_dtoa_r>
 8004cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	d102      	bne.n	8004cea <__cvt+0x66>
 8004ce4:	f019 0f01 	tst.w	r9, #1
 8004ce8:	d022      	beq.n	8004d30 <__cvt+0xac>
 8004cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cee:	eb07 0906 	add.w	r9, r7, r6
 8004cf2:	d110      	bne.n	8004d16 <__cvt+0x92>
 8004cf4:	783b      	ldrb	r3, [r7, #0]
 8004cf6:	2b30      	cmp	r3, #48	; 0x30
 8004cf8:	d10a      	bne.n	8004d10 <__cvt+0x8c>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d06:	b918      	cbnz	r0, 8004d10 <__cvt+0x8c>
 8004d08:	f1c6 0601 	rsb	r6, r6, #1
 8004d0c:	f8ca 6000 	str.w	r6, [sl]
 8004d10:	f8da 3000 	ldr.w	r3, [sl]
 8004d14:	4499      	add	r9, r3
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f7fb fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d22:	b108      	cbz	r0, 8004d28 <__cvt+0xa4>
 8004d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d28:	2230      	movs	r2, #48	; 0x30
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	454b      	cmp	r3, r9
 8004d2e:	d307      	bcc.n	8004d40 <__cvt+0xbc>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d34:	1bdb      	subs	r3, r3, r7
 8004d36:	4638      	mov	r0, r7
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	b004      	add	sp, #16
 8004d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d40:	1c59      	adds	r1, r3, #1
 8004d42:	9103      	str	r1, [sp, #12]
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e7f0      	b.n	8004d2a <__cvt+0xa6>

08004d48 <__exponent>:
 8004d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	bfb8      	it	lt
 8004d50:	4249      	neglt	r1, r1
 8004d52:	f803 2b02 	strb.w	r2, [r3], #2
 8004d56:	bfb4      	ite	lt
 8004d58:	222d      	movlt	r2, #45	; 0x2d
 8004d5a:	222b      	movge	r2, #43	; 0x2b
 8004d5c:	2909      	cmp	r1, #9
 8004d5e:	7042      	strb	r2, [r0, #1]
 8004d60:	dd2a      	ble.n	8004db8 <__exponent+0x70>
 8004d62:	f10d 0407 	add.w	r4, sp, #7
 8004d66:	46a4      	mov	ip, r4
 8004d68:	270a      	movs	r7, #10
 8004d6a:	46a6      	mov	lr, r4
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d72:	fb07 1516 	mls	r5, r7, r6, r1
 8004d76:	3530      	adds	r5, #48	; 0x30
 8004d78:	2a63      	cmp	r2, #99	; 0x63
 8004d7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d82:	4631      	mov	r1, r6
 8004d84:	dcf1      	bgt.n	8004d6a <__exponent+0x22>
 8004d86:	3130      	adds	r1, #48	; 0x30
 8004d88:	f1ae 0502 	sub.w	r5, lr, #2
 8004d8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d90:	1c44      	adds	r4, r0, #1
 8004d92:	4629      	mov	r1, r5
 8004d94:	4561      	cmp	r1, ip
 8004d96:	d30a      	bcc.n	8004dae <__exponent+0x66>
 8004d98:	f10d 0209 	add.w	r2, sp, #9
 8004d9c:	eba2 020e 	sub.w	r2, r2, lr
 8004da0:	4565      	cmp	r5, ip
 8004da2:	bf88      	it	hi
 8004da4:	2200      	movhi	r2, #0
 8004da6:	4413      	add	r3, r2
 8004da8:	1a18      	subs	r0, r3, r0
 8004daa:	b003      	add	sp, #12
 8004dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004db2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004db6:	e7ed      	b.n	8004d94 <__exponent+0x4c>
 8004db8:	2330      	movs	r3, #48	; 0x30
 8004dba:	3130      	adds	r1, #48	; 0x30
 8004dbc:	7083      	strb	r3, [r0, #2]
 8004dbe:	70c1      	strb	r1, [r0, #3]
 8004dc0:	1d03      	adds	r3, r0, #4
 8004dc2:	e7f1      	b.n	8004da8 <__exponent+0x60>

08004dc4 <_printf_float>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	ed2d 8b02 	vpush	{d8}
 8004dcc:	b08d      	sub	sp, #52	; 0x34
 8004dce:	460c      	mov	r4, r1
 8004dd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	4605      	mov	r5, r0
 8004dda:	f001 fa57 	bl	800628c <_localeconv_r>
 8004dde:	f8d0 a000 	ldr.w	sl, [r0]
 8004de2:	4650      	mov	r0, sl
 8004de4:	f7fb f9fc 	bl	80001e0 <strlen>
 8004de8:	2300      	movs	r3, #0
 8004dea:	930a      	str	r3, [sp, #40]	; 0x28
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	f8d8 3000 	ldr.w	r3, [r8]
 8004df4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004df8:	3307      	adds	r3, #7
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	f103 0208 	add.w	r2, r3, #8
 8004e02:	f8c8 2000 	str.w	r2, [r8]
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e1c:	ee08 0a10 	vmov	s16, r0
 8004e20:	4b9f      	ldr	r3, [pc, #636]	; (80050a0 <_printf_float+0x2dc>)
 8004e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e26:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2a:	f7fb fe87 	bl	8000b3c <__aeabi_dcmpun>
 8004e2e:	bb88      	cbnz	r0, 8004e94 <_printf_float+0xd0>
 8004e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e34:	4b9a      	ldr	r3, [pc, #616]	; (80050a0 <_printf_float+0x2dc>)
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	f7fb fe61 	bl	8000b00 <__aeabi_dcmple>
 8004e3e:	bb48      	cbnz	r0, 8004e94 <_printf_float+0xd0>
 8004e40:	2200      	movs	r2, #0
 8004e42:	2300      	movs	r3, #0
 8004e44:	4640      	mov	r0, r8
 8004e46:	4649      	mov	r1, r9
 8004e48:	f7fb fe50 	bl	8000aec <__aeabi_dcmplt>
 8004e4c:	b110      	cbz	r0, 8004e54 <_printf_float+0x90>
 8004e4e:	232d      	movs	r3, #45	; 0x2d
 8004e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e54:	4b93      	ldr	r3, [pc, #588]	; (80050a4 <_printf_float+0x2e0>)
 8004e56:	4894      	ldr	r0, [pc, #592]	; (80050a8 <_printf_float+0x2e4>)
 8004e58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e5c:	bf94      	ite	ls
 8004e5e:	4698      	movls	r8, r3
 8004e60:	4680      	movhi	r8, r0
 8004e62:	2303      	movs	r3, #3
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	9b05      	ldr	r3, [sp, #20]
 8004e68:	f023 0204 	bic.w	r2, r3, #4
 8004e6c:	6022      	str	r2, [r4, #0]
 8004e6e:	f04f 0900 	mov.w	r9, #0
 8004e72:	9700      	str	r7, [sp, #0]
 8004e74:	4633      	mov	r3, r6
 8004e76:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f9d8 	bl	8005230 <_printf_common>
 8004e80:	3001      	adds	r0, #1
 8004e82:	f040 8090 	bne.w	8004fa6 <_printf_float+0x1e2>
 8004e86:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8a:	b00d      	add	sp, #52	; 0x34
 8004e8c:	ecbd 8b02 	vpop	{d8}
 8004e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb fe4e 	bl	8000b3c <__aeabi_dcmpun>
 8004ea0:	b140      	cbz	r0, 8004eb4 <_printf_float+0xf0>
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bfbc      	itt	lt
 8004ea8:	232d      	movlt	r3, #45	; 0x2d
 8004eaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004eae:	487f      	ldr	r0, [pc, #508]	; (80050ac <_printf_float+0x2e8>)
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <_printf_float+0x2ec>)
 8004eb2:	e7d1      	b.n	8004e58 <_printf_float+0x94>
 8004eb4:	6863      	ldr	r3, [r4, #4]
 8004eb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004eba:	9206      	str	r2, [sp, #24]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	d13f      	bne.n	8004f40 <_printf_float+0x17c>
 8004ec0:	2306      	movs	r3, #6
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	9b05      	ldr	r3, [sp, #20]
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ed2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ed6:	ab09      	add	r3, sp, #36	; 0x24
 8004ed8:	ec49 8b10 	vmov	d0, r8, r9
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6022      	str	r2, [r4, #0]
 8004ee0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff fecd 	bl	8004c84 <__cvt>
 8004eea:	9b06      	ldr	r3, [sp, #24]
 8004eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eee:	2b47      	cmp	r3, #71	; 0x47
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	d108      	bne.n	8004f06 <_printf_float+0x142>
 8004ef4:	1cc8      	adds	r0, r1, #3
 8004ef6:	db02      	blt.n	8004efe <_printf_float+0x13a>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	4299      	cmp	r1, r3
 8004efc:	dd41      	ble.n	8004f82 <_printf_float+0x1be>
 8004efe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f02:	fa5f fb8b 	uxtb.w	fp, fp
 8004f06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f0a:	d820      	bhi.n	8004f4e <_printf_float+0x18a>
 8004f0c:	3901      	subs	r1, #1
 8004f0e:	465a      	mov	r2, fp
 8004f10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f14:	9109      	str	r1, [sp, #36]	; 0x24
 8004f16:	f7ff ff17 	bl	8004d48 <__exponent>
 8004f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f1c:	1813      	adds	r3, r2, r0
 8004f1e:	2a01      	cmp	r2, #1
 8004f20:	4681      	mov	r9, r0
 8004f22:	6123      	str	r3, [r4, #16]
 8004f24:	dc02      	bgt.n	8004f2c <_printf_float+0x168>
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	07d2      	lsls	r2, r2, #31
 8004f2a:	d501      	bpl.n	8004f30 <_printf_float+0x16c>
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d09c      	beq.n	8004e72 <_printf_float+0xae>
 8004f38:	232d      	movs	r3, #45	; 0x2d
 8004f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3e:	e798      	b.n	8004e72 <_printf_float+0xae>
 8004f40:	9a06      	ldr	r2, [sp, #24]
 8004f42:	2a47      	cmp	r2, #71	; 0x47
 8004f44:	d1be      	bne.n	8004ec4 <_printf_float+0x100>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1bc      	bne.n	8004ec4 <_printf_float+0x100>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7b9      	b.n	8004ec2 <_printf_float+0xfe>
 8004f4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f52:	d118      	bne.n	8004f86 <_printf_float+0x1c2>
 8004f54:	2900      	cmp	r1, #0
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	dd0b      	ble.n	8004f72 <_printf_float+0x1ae>
 8004f5a:	6121      	str	r1, [r4, #16]
 8004f5c:	b913      	cbnz	r3, 8004f64 <_printf_float+0x1a0>
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	07d0      	lsls	r0, r2, #31
 8004f62:	d502      	bpl.n	8004f6a <_printf_float+0x1a6>
 8004f64:	3301      	adds	r3, #1
 8004f66:	440b      	add	r3, r1
 8004f68:	6123      	str	r3, [r4, #16]
 8004f6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	e7de      	b.n	8004f30 <_printf_float+0x16c>
 8004f72:	b913      	cbnz	r3, 8004f7a <_printf_float+0x1b6>
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	07d2      	lsls	r2, r2, #31
 8004f78:	d501      	bpl.n	8004f7e <_printf_float+0x1ba>
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	e7f4      	b.n	8004f68 <_printf_float+0x1a4>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e7f2      	b.n	8004f68 <_printf_float+0x1a4>
 8004f82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	db05      	blt.n	8004f98 <_printf_float+0x1d4>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	6121      	str	r1, [r4, #16]
 8004f90:	07d8      	lsls	r0, r3, #31
 8004f92:	d5ea      	bpl.n	8004f6a <_printf_float+0x1a6>
 8004f94:	1c4b      	adds	r3, r1, #1
 8004f96:	e7e7      	b.n	8004f68 <_printf_float+0x1a4>
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	bfd4      	ite	le
 8004f9c:	f1c1 0202 	rsble	r2, r1, #2
 8004fa0:	2201      	movgt	r2, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	e7e0      	b.n	8004f68 <_printf_float+0x1a4>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	055a      	lsls	r2, r3, #21
 8004faa:	d407      	bmi.n	8004fbc <_printf_float+0x1f8>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	4642      	mov	r2, r8
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d12c      	bne.n	8005014 <_printf_float+0x250>
 8004fba:	e764      	b.n	8004e86 <_printf_float+0xc2>
 8004fbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fc0:	f240 80e0 	bls.w	8005184 <_printf_float+0x3c0>
 8004fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f7fb fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d034      	beq.n	800503e <_printf_float+0x27a>
 8004fd4:	4a37      	ldr	r2, [pc, #220]	; (80050b4 <_printf_float+0x2f0>)
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f43f af51 	beq.w	8004e86 <_printf_float+0xc2>
 8004fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	db02      	blt.n	8004ff2 <_printf_float+0x22e>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	07d8      	lsls	r0, r3, #31
 8004ff0:	d510      	bpl.n	8005014 <_printf_float+0x250>
 8004ff2:	ee18 3a10 	vmov	r3, s16
 8004ff6:	4652      	mov	r2, sl
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b8      	blx	r7
 8004ffe:	3001      	adds	r0, #1
 8005000:	f43f af41 	beq.w	8004e86 <_printf_float+0xc2>
 8005004:	f04f 0800 	mov.w	r8, #0
 8005008:	f104 091a 	add.w	r9, r4, #26
 800500c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	4543      	cmp	r3, r8
 8005012:	dc09      	bgt.n	8005028 <_printf_float+0x264>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	079b      	lsls	r3, r3, #30
 8005018:	f100 8105 	bmi.w	8005226 <_printf_float+0x462>
 800501c:	68e0      	ldr	r0, [r4, #12]
 800501e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005020:	4298      	cmp	r0, r3
 8005022:	bfb8      	it	lt
 8005024:	4618      	movlt	r0, r3
 8005026:	e730      	b.n	8004e8a <_printf_float+0xc6>
 8005028:	2301      	movs	r3, #1
 800502a:	464a      	mov	r2, r9
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af27 	beq.w	8004e86 <_printf_float+0xc2>
 8005038:	f108 0801 	add.w	r8, r8, #1
 800503c:	e7e6      	b.n	800500c <_printf_float+0x248>
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	dc39      	bgt.n	80050b8 <_printf_float+0x2f4>
 8005044:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <_printf_float+0x2f0>)
 8005046:	2301      	movs	r3, #1
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	f43f af19 	beq.w	8004e86 <_printf_float+0xc2>
 8005054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005058:	4313      	orrs	r3, r2
 800505a:	d102      	bne.n	8005062 <_printf_float+0x29e>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	07d9      	lsls	r1, r3, #31
 8005060:	d5d8      	bpl.n	8005014 <_printf_float+0x250>
 8005062:	ee18 3a10 	vmov	r3, s16
 8005066:	4652      	mov	r2, sl
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	47b8      	blx	r7
 800506e:	3001      	adds	r0, #1
 8005070:	f43f af09 	beq.w	8004e86 <_printf_float+0xc2>
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	f104 0a1a 	add.w	sl, r4, #26
 800507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507e:	425b      	negs	r3, r3
 8005080:	454b      	cmp	r3, r9
 8005082:	dc01      	bgt.n	8005088 <_printf_float+0x2c4>
 8005084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005086:	e792      	b.n	8004fae <_printf_float+0x1ea>
 8005088:	2301      	movs	r3, #1
 800508a:	4652      	mov	r2, sl
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f aef7 	beq.w	8004e86 <_printf_float+0xc2>
 8005098:	f109 0901 	add.w	r9, r9, #1
 800509c:	e7ee      	b.n	800507c <_printf_float+0x2b8>
 800509e:	bf00      	nop
 80050a0:	7fefffff 	.word	0x7fefffff
 80050a4:	08007b0c 	.word	0x08007b0c
 80050a8:	08007b10 	.word	0x08007b10
 80050ac:	08007b18 	.word	0x08007b18
 80050b0:	08007b14 	.word	0x08007b14
 80050b4:	08007b1c 	.word	0x08007b1c
 80050b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050bc:	429a      	cmp	r2, r3
 80050be:	bfa8      	it	ge
 80050c0:	461a      	movge	r2, r3
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	4691      	mov	r9, r2
 80050c6:	dc37      	bgt.n	8005138 <_printf_float+0x374>
 80050c8:	f04f 0b00 	mov.w	fp, #0
 80050cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050d0:	f104 021a 	add.w	r2, r4, #26
 80050d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	eba3 0309 	sub.w	r3, r3, r9
 80050dc:	455b      	cmp	r3, fp
 80050de:	dc33      	bgt.n	8005148 <_printf_float+0x384>
 80050e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e4:	429a      	cmp	r2, r3
 80050e6:	db3b      	blt.n	8005160 <_printf_float+0x39c>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	07da      	lsls	r2, r3, #31
 80050ec:	d438      	bmi.n	8005160 <_printf_float+0x39c>
 80050ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f0:	9a05      	ldr	r2, [sp, #20]
 80050f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f4:	1a9a      	subs	r2, r3, r2
 80050f6:	eba3 0901 	sub.w	r9, r3, r1
 80050fa:	4591      	cmp	r9, r2
 80050fc:	bfa8      	it	ge
 80050fe:	4691      	movge	r9, r2
 8005100:	f1b9 0f00 	cmp.w	r9, #0
 8005104:	dc35      	bgt.n	8005172 <_printf_float+0x3ae>
 8005106:	f04f 0800 	mov.w	r8, #0
 800510a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800510e:	f104 0a1a 	add.w	sl, r4, #26
 8005112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	eba3 0309 	sub.w	r3, r3, r9
 800511c:	4543      	cmp	r3, r8
 800511e:	f77f af79 	ble.w	8005014 <_printf_float+0x250>
 8005122:	2301      	movs	r3, #1
 8005124:	4652      	mov	r2, sl
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	f43f aeaa 	beq.w	8004e86 <_printf_float+0xc2>
 8005132:	f108 0801 	add.w	r8, r8, #1
 8005136:	e7ec      	b.n	8005112 <_printf_float+0x34e>
 8005138:	4613      	mov	r3, r2
 800513a:	4631      	mov	r1, r6
 800513c:	4642      	mov	r2, r8
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	d1c0      	bne.n	80050c8 <_printf_float+0x304>
 8005146:	e69e      	b.n	8004e86 <_printf_float+0xc2>
 8005148:	2301      	movs	r3, #1
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	9205      	str	r2, [sp, #20]
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	f43f ae97 	beq.w	8004e86 <_printf_float+0xc2>
 8005158:	9a05      	ldr	r2, [sp, #20]
 800515a:	f10b 0b01 	add.w	fp, fp, #1
 800515e:	e7b9      	b.n	80050d4 <_printf_float+0x310>
 8005160:	ee18 3a10 	vmov	r3, s16
 8005164:	4652      	mov	r2, sl
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	d1be      	bne.n	80050ee <_printf_float+0x32a>
 8005170:	e689      	b.n	8004e86 <_printf_float+0xc2>
 8005172:	9a05      	ldr	r2, [sp, #20]
 8005174:	464b      	mov	r3, r9
 8005176:	4442      	add	r2, r8
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d1c1      	bne.n	8005106 <_printf_float+0x342>
 8005182:	e680      	b.n	8004e86 <_printf_float+0xc2>
 8005184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005186:	2a01      	cmp	r2, #1
 8005188:	dc01      	bgt.n	800518e <_printf_float+0x3ca>
 800518a:	07db      	lsls	r3, r3, #31
 800518c:	d538      	bpl.n	8005200 <_printf_float+0x43c>
 800518e:	2301      	movs	r3, #1
 8005190:	4642      	mov	r2, r8
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	f43f ae74 	beq.w	8004e86 <_printf_float+0xc2>
 800519e:	ee18 3a10 	vmov	r3, s16
 80051a2:	4652      	mov	r2, sl
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f ae6b 	beq.w	8004e86 <_printf_float+0xc2>
 80051b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	f7fb fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80051bc:	b9d8      	cbnz	r0, 80051f6 <_printf_float+0x432>
 80051be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c0:	f108 0201 	add.w	r2, r8, #1
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	d10e      	bne.n	80051ee <_printf_float+0x42a>
 80051d0:	e659      	b.n	8004e86 <_printf_float+0xc2>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4652      	mov	r2, sl
 80051d6:	4631      	mov	r1, r6
 80051d8:	4628      	mov	r0, r5
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f ae52 	beq.w	8004e86 <_printf_float+0xc2>
 80051e2:	f108 0801 	add.w	r8, r8, #1
 80051e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	4543      	cmp	r3, r8
 80051ec:	dcf1      	bgt.n	80051d2 <_printf_float+0x40e>
 80051ee:	464b      	mov	r3, r9
 80051f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051f4:	e6dc      	b.n	8004fb0 <_printf_float+0x1ec>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	f104 0a1a 	add.w	sl, r4, #26
 80051fe:	e7f2      	b.n	80051e6 <_printf_float+0x422>
 8005200:	2301      	movs	r3, #1
 8005202:	4642      	mov	r2, r8
 8005204:	e7df      	b.n	80051c6 <_printf_float+0x402>
 8005206:	2301      	movs	r3, #1
 8005208:	464a      	mov	r2, r9
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f ae38 	beq.w	8004e86 <_printf_float+0xc2>
 8005216:	f108 0801 	add.w	r8, r8, #1
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800521e:	1a5b      	subs	r3, r3, r1
 8005220:	4543      	cmp	r3, r8
 8005222:	dcf0      	bgt.n	8005206 <_printf_float+0x442>
 8005224:	e6fa      	b.n	800501c <_printf_float+0x258>
 8005226:	f04f 0800 	mov.w	r8, #0
 800522a:	f104 0919 	add.w	r9, r4, #25
 800522e:	e7f4      	b.n	800521a <_printf_float+0x456>

08005230 <_printf_common>:
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	4616      	mov	r6, r2
 8005236:	4699      	mov	r9, r3
 8005238:	688a      	ldr	r2, [r1, #8]
 800523a:	690b      	ldr	r3, [r1, #16]
 800523c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005240:	4293      	cmp	r3, r2
 8005242:	bfb8      	it	lt
 8005244:	4613      	movlt	r3, r2
 8005246:	6033      	str	r3, [r6, #0]
 8005248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800524c:	4607      	mov	r7, r0
 800524e:	460c      	mov	r4, r1
 8005250:	b10a      	cbz	r2, 8005256 <_printf_common+0x26>
 8005252:	3301      	adds	r3, #1
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	0699      	lsls	r1, r3, #26
 800525a:	bf42      	ittt	mi
 800525c:	6833      	ldrmi	r3, [r6, #0]
 800525e:	3302      	addmi	r3, #2
 8005260:	6033      	strmi	r3, [r6, #0]
 8005262:	6825      	ldr	r5, [r4, #0]
 8005264:	f015 0506 	ands.w	r5, r5, #6
 8005268:	d106      	bne.n	8005278 <_printf_common+0x48>
 800526a:	f104 0a19 	add.w	sl, r4, #25
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	6832      	ldr	r2, [r6, #0]
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	42ab      	cmp	r3, r5
 8005276:	dc26      	bgt.n	80052c6 <_printf_common+0x96>
 8005278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800527c:	1e13      	subs	r3, r2, #0
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	bf18      	it	ne
 8005282:	2301      	movne	r3, #1
 8005284:	0692      	lsls	r2, r2, #26
 8005286:	d42b      	bmi.n	80052e0 <_printf_common+0xb0>
 8005288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528c:	4649      	mov	r1, r9
 800528e:	4638      	mov	r0, r7
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d01e      	beq.n	80052d4 <_printf_common+0xa4>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	68e5      	ldr	r5, [r4, #12]
 800529a:	6832      	ldr	r2, [r6, #0]
 800529c:	f003 0306 	and.w	r3, r3, #6
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	bf08      	it	eq
 80052a4:	1aad      	subeq	r5, r5, r2
 80052a6:	68a3      	ldr	r3, [r4, #8]
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	bf0c      	ite	eq
 80052ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b0:	2500      	movne	r5, #0
 80052b2:	4293      	cmp	r3, r2
 80052b4:	bfc4      	itt	gt
 80052b6:	1a9b      	subgt	r3, r3, r2
 80052b8:	18ed      	addgt	r5, r5, r3
 80052ba:	2600      	movs	r6, #0
 80052bc:	341a      	adds	r4, #26
 80052be:	42b5      	cmp	r5, r6
 80052c0:	d11a      	bne.n	80052f8 <_printf_common+0xc8>
 80052c2:	2000      	movs	r0, #0
 80052c4:	e008      	b.n	80052d8 <_printf_common+0xa8>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4652      	mov	r2, sl
 80052ca:	4649      	mov	r1, r9
 80052cc:	4638      	mov	r0, r7
 80052ce:	47c0      	blx	r8
 80052d0:	3001      	adds	r0, #1
 80052d2:	d103      	bne.n	80052dc <_printf_common+0xac>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052dc:	3501      	adds	r5, #1
 80052de:	e7c6      	b.n	800526e <_printf_common+0x3e>
 80052e0:	18e1      	adds	r1, r4, r3
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	2030      	movs	r0, #48	; 0x30
 80052e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ea:	4422      	add	r2, r4
 80052ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052f4:	3302      	adds	r3, #2
 80052f6:	e7c7      	b.n	8005288 <_printf_common+0x58>
 80052f8:	2301      	movs	r3, #1
 80052fa:	4622      	mov	r2, r4
 80052fc:	4649      	mov	r1, r9
 80052fe:	4638      	mov	r0, r7
 8005300:	47c0      	blx	r8
 8005302:	3001      	adds	r0, #1
 8005304:	d0e6      	beq.n	80052d4 <_printf_common+0xa4>
 8005306:	3601      	adds	r6, #1
 8005308:	e7d9      	b.n	80052be <_printf_common+0x8e>
	...

0800530c <_printf_i>:
 800530c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	7e0f      	ldrb	r7, [r1, #24]
 8005312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005314:	2f78      	cmp	r7, #120	; 0x78
 8005316:	4691      	mov	r9, r2
 8005318:	4680      	mov	r8, r0
 800531a:	460c      	mov	r4, r1
 800531c:	469a      	mov	sl, r3
 800531e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005322:	d807      	bhi.n	8005334 <_printf_i+0x28>
 8005324:	2f62      	cmp	r7, #98	; 0x62
 8005326:	d80a      	bhi.n	800533e <_printf_i+0x32>
 8005328:	2f00      	cmp	r7, #0
 800532a:	f000 80d8 	beq.w	80054de <_printf_i+0x1d2>
 800532e:	2f58      	cmp	r7, #88	; 0x58
 8005330:	f000 80a3 	beq.w	800547a <_printf_i+0x16e>
 8005334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800533c:	e03a      	b.n	80053b4 <_printf_i+0xa8>
 800533e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005342:	2b15      	cmp	r3, #21
 8005344:	d8f6      	bhi.n	8005334 <_printf_i+0x28>
 8005346:	a101      	add	r1, pc, #4	; (adr r1, 800534c <_printf_i+0x40>)
 8005348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053b9 	.word	0x080053b9
 8005354:	08005335 	.word	0x08005335
 8005358:	08005335 	.word	0x08005335
 800535c:	08005335 	.word	0x08005335
 8005360:	08005335 	.word	0x08005335
 8005364:	080053b9 	.word	0x080053b9
 8005368:	08005335 	.word	0x08005335
 800536c:	08005335 	.word	0x08005335
 8005370:	08005335 	.word	0x08005335
 8005374:	08005335 	.word	0x08005335
 8005378:	080054c5 	.word	0x080054c5
 800537c:	080053e9 	.word	0x080053e9
 8005380:	080054a7 	.word	0x080054a7
 8005384:	08005335 	.word	0x08005335
 8005388:	08005335 	.word	0x08005335
 800538c:	080054e7 	.word	0x080054e7
 8005390:	08005335 	.word	0x08005335
 8005394:	080053e9 	.word	0x080053e9
 8005398:	08005335 	.word	0x08005335
 800539c:	08005335 	.word	0x08005335
 80053a0:	080054af 	.word	0x080054af
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	602a      	str	r2, [r5, #0]
 80053ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0a3      	b.n	8005500 <_printf_i+0x1f4>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	6829      	ldr	r1, [r5, #0]
 80053bc:	0606      	lsls	r6, r0, #24
 80053be:	f101 0304 	add.w	r3, r1, #4
 80053c2:	d50a      	bpl.n	80053da <_printf_i+0xce>
 80053c4:	680e      	ldr	r6, [r1, #0]
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	da03      	bge.n	80053d4 <_printf_i+0xc8>
 80053cc:	232d      	movs	r3, #45	; 0x2d
 80053ce:	4276      	negs	r6, r6
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d4:	485e      	ldr	r0, [pc, #376]	; (8005550 <_printf_i+0x244>)
 80053d6:	230a      	movs	r3, #10
 80053d8:	e019      	b.n	800540e <_printf_i+0x102>
 80053da:	680e      	ldr	r6, [r1, #0]
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053e2:	bf18      	it	ne
 80053e4:	b236      	sxthne	r6, r6
 80053e6:	e7ef      	b.n	80053c8 <_printf_i+0xbc>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	1d19      	adds	r1, r3, #4
 80053ee:	6029      	str	r1, [r5, #0]
 80053f0:	0601      	lsls	r1, r0, #24
 80053f2:	d501      	bpl.n	80053f8 <_printf_i+0xec>
 80053f4:	681e      	ldr	r6, [r3, #0]
 80053f6:	e002      	b.n	80053fe <_printf_i+0xf2>
 80053f8:	0646      	lsls	r6, r0, #25
 80053fa:	d5fb      	bpl.n	80053f4 <_printf_i+0xe8>
 80053fc:	881e      	ldrh	r6, [r3, #0]
 80053fe:	4854      	ldr	r0, [pc, #336]	; (8005550 <_printf_i+0x244>)
 8005400:	2f6f      	cmp	r7, #111	; 0x6f
 8005402:	bf0c      	ite	eq
 8005404:	2308      	moveq	r3, #8
 8005406:	230a      	movne	r3, #10
 8005408:	2100      	movs	r1, #0
 800540a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800540e:	6865      	ldr	r5, [r4, #4]
 8005410:	60a5      	str	r5, [r4, #8]
 8005412:	2d00      	cmp	r5, #0
 8005414:	bfa2      	ittt	ge
 8005416:	6821      	ldrge	r1, [r4, #0]
 8005418:	f021 0104 	bicge.w	r1, r1, #4
 800541c:	6021      	strge	r1, [r4, #0]
 800541e:	b90e      	cbnz	r6, 8005424 <_printf_i+0x118>
 8005420:	2d00      	cmp	r5, #0
 8005422:	d04d      	beq.n	80054c0 <_printf_i+0x1b4>
 8005424:	4615      	mov	r5, r2
 8005426:	fbb6 f1f3 	udiv	r1, r6, r3
 800542a:	fb03 6711 	mls	r7, r3, r1, r6
 800542e:	5dc7      	ldrb	r7, [r0, r7]
 8005430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005434:	4637      	mov	r7, r6
 8005436:	42bb      	cmp	r3, r7
 8005438:	460e      	mov	r6, r1
 800543a:	d9f4      	bls.n	8005426 <_printf_i+0x11a>
 800543c:	2b08      	cmp	r3, #8
 800543e:	d10b      	bne.n	8005458 <_printf_i+0x14c>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07de      	lsls	r6, r3, #31
 8005444:	d508      	bpl.n	8005458 <_printf_i+0x14c>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6861      	ldr	r1, [r4, #4]
 800544a:	4299      	cmp	r1, r3
 800544c:	bfde      	ittt	le
 800544e:	2330      	movle	r3, #48	; 0x30
 8005450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005458:	1b52      	subs	r2, r2, r5
 800545a:	6122      	str	r2, [r4, #16]
 800545c:	f8cd a000 	str.w	sl, [sp]
 8005460:	464b      	mov	r3, r9
 8005462:	aa03      	add	r2, sp, #12
 8005464:	4621      	mov	r1, r4
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fee2 	bl	8005230 <_printf_common>
 800546c:	3001      	adds	r0, #1
 800546e:	d14c      	bne.n	800550a <_printf_i+0x1fe>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	b004      	add	sp, #16
 8005476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547a:	4835      	ldr	r0, [pc, #212]	; (8005550 <_printf_i+0x244>)
 800547c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005480:	6829      	ldr	r1, [r5, #0]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	f851 6b04 	ldr.w	r6, [r1], #4
 8005488:	6029      	str	r1, [r5, #0]
 800548a:	061d      	lsls	r5, r3, #24
 800548c:	d514      	bpl.n	80054b8 <_printf_i+0x1ac>
 800548e:	07df      	lsls	r7, r3, #31
 8005490:	bf44      	itt	mi
 8005492:	f043 0320 	orrmi.w	r3, r3, #32
 8005496:	6023      	strmi	r3, [r4, #0]
 8005498:	b91e      	cbnz	r6, 80054a2 <_printf_i+0x196>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f023 0320 	bic.w	r3, r3, #32
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	2310      	movs	r3, #16
 80054a4:	e7b0      	b.n	8005408 <_printf_i+0xfc>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	2378      	movs	r3, #120	; 0x78
 80054b0:	4828      	ldr	r0, [pc, #160]	; (8005554 <_printf_i+0x248>)
 80054b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b6:	e7e3      	b.n	8005480 <_printf_i+0x174>
 80054b8:	0659      	lsls	r1, r3, #25
 80054ba:	bf48      	it	mi
 80054bc:	b2b6      	uxthmi	r6, r6
 80054be:	e7e6      	b.n	800548e <_printf_i+0x182>
 80054c0:	4615      	mov	r5, r2
 80054c2:	e7bb      	b.n	800543c <_printf_i+0x130>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6826      	ldr	r6, [r4, #0]
 80054c8:	6961      	ldr	r1, [r4, #20]
 80054ca:	1d18      	adds	r0, r3, #4
 80054cc:	6028      	str	r0, [r5, #0]
 80054ce:	0635      	lsls	r5, r6, #24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	d501      	bpl.n	80054d8 <_printf_i+0x1cc>
 80054d4:	6019      	str	r1, [r3, #0]
 80054d6:	e002      	b.n	80054de <_printf_i+0x1d2>
 80054d8:	0670      	lsls	r0, r6, #25
 80054da:	d5fb      	bpl.n	80054d4 <_printf_i+0x1c8>
 80054dc:	8019      	strh	r1, [r3, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	6123      	str	r3, [r4, #16]
 80054e2:	4615      	mov	r5, r2
 80054e4:	e7ba      	b.n	800545c <_printf_i+0x150>
 80054e6:	682b      	ldr	r3, [r5, #0]
 80054e8:	1d1a      	adds	r2, r3, #4
 80054ea:	602a      	str	r2, [r5, #0]
 80054ec:	681d      	ldr	r5, [r3, #0]
 80054ee:	6862      	ldr	r2, [r4, #4]
 80054f0:	2100      	movs	r1, #0
 80054f2:	4628      	mov	r0, r5
 80054f4:	f7fa fe7c 	bl	80001f0 <memchr>
 80054f8:	b108      	cbz	r0, 80054fe <_printf_i+0x1f2>
 80054fa:	1b40      	subs	r0, r0, r5
 80054fc:	6060      	str	r0, [r4, #4]
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	6123      	str	r3, [r4, #16]
 8005502:	2300      	movs	r3, #0
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005508:	e7a8      	b.n	800545c <_printf_i+0x150>
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	462a      	mov	r2, r5
 800550e:	4649      	mov	r1, r9
 8005510:	4640      	mov	r0, r8
 8005512:	47d0      	blx	sl
 8005514:	3001      	adds	r0, #1
 8005516:	d0ab      	beq.n	8005470 <_printf_i+0x164>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	079b      	lsls	r3, r3, #30
 800551c:	d413      	bmi.n	8005546 <_printf_i+0x23a>
 800551e:	68e0      	ldr	r0, [r4, #12]
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	4298      	cmp	r0, r3
 8005524:	bfb8      	it	lt
 8005526:	4618      	movlt	r0, r3
 8005528:	e7a4      	b.n	8005474 <_printf_i+0x168>
 800552a:	2301      	movs	r3, #1
 800552c:	4632      	mov	r2, r6
 800552e:	4649      	mov	r1, r9
 8005530:	4640      	mov	r0, r8
 8005532:	47d0      	blx	sl
 8005534:	3001      	adds	r0, #1
 8005536:	d09b      	beq.n	8005470 <_printf_i+0x164>
 8005538:	3501      	adds	r5, #1
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	9903      	ldr	r1, [sp, #12]
 800553e:	1a5b      	subs	r3, r3, r1
 8005540:	42ab      	cmp	r3, r5
 8005542:	dcf2      	bgt.n	800552a <_printf_i+0x21e>
 8005544:	e7eb      	b.n	800551e <_printf_i+0x212>
 8005546:	2500      	movs	r5, #0
 8005548:	f104 0619 	add.w	r6, r4, #25
 800554c:	e7f5      	b.n	800553a <_printf_i+0x22e>
 800554e:	bf00      	nop
 8005550:	08007b1e 	.word	0x08007b1e
 8005554:	08007b2f 	.word	0x08007b2f

08005558 <siprintf>:
 8005558:	b40e      	push	{r1, r2, r3}
 800555a:	b500      	push	{lr}
 800555c:	b09c      	sub	sp, #112	; 0x70
 800555e:	ab1d      	add	r3, sp, #116	; 0x74
 8005560:	9002      	str	r0, [sp, #8]
 8005562:	9006      	str	r0, [sp, #24]
 8005564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005568:	4809      	ldr	r0, [pc, #36]	; (8005590 <siprintf+0x38>)
 800556a:	9107      	str	r1, [sp, #28]
 800556c:	9104      	str	r1, [sp, #16]
 800556e:	4909      	ldr	r1, [pc, #36]	; (8005594 <siprintf+0x3c>)
 8005570:	f853 2b04 	ldr.w	r2, [r3], #4
 8005574:	9105      	str	r1, [sp, #20]
 8005576:	6800      	ldr	r0, [r0, #0]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	a902      	add	r1, sp, #8
 800557c:	f001 fb76 	bl	8006c6c <_svfiprintf_r>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	b01c      	add	sp, #112	; 0x70
 8005588:	f85d eb04 	ldr.w	lr, [sp], #4
 800558c:	b003      	add	sp, #12
 800558e:	4770      	bx	lr
 8005590:	2000000c 	.word	0x2000000c
 8005594:	ffff0208 	.word	0xffff0208

08005598 <quorem>:
 8005598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	6903      	ldr	r3, [r0, #16]
 800559e:	690c      	ldr	r4, [r1, #16]
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	4607      	mov	r7, r0
 80055a4:	f2c0 8081 	blt.w	80056aa <quorem+0x112>
 80055a8:	3c01      	subs	r4, #1
 80055aa:	f101 0814 	add.w	r8, r1, #20
 80055ae:	f100 0514 	add.w	r5, r0, #20
 80055b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c0:	3301      	adds	r3, #1
 80055c2:	429a      	cmp	r2, r3
 80055c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80055d0:	d331      	bcc.n	8005636 <quorem+0x9e>
 80055d2:	f04f 0e00 	mov.w	lr, #0
 80055d6:	4640      	mov	r0, r8
 80055d8:	46ac      	mov	ip, r5
 80055da:	46f2      	mov	sl, lr
 80055dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80055e0:	b293      	uxth	r3, r2
 80055e2:	fb06 e303 	mla	r3, r6, r3, lr
 80055e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ebaa 0303 	sub.w	r3, sl, r3
 80055f0:	f8dc a000 	ldr.w	sl, [ip]
 80055f4:	0c12      	lsrs	r2, r2, #16
 80055f6:	fa13 f38a 	uxtah	r3, r3, sl
 80055fa:	fb06 e202 	mla	r2, r6, r2, lr
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	9b00      	ldr	r3, [sp, #0]
 8005602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005606:	b292      	uxth	r2, r2
 8005608:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800560c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005610:	f8bd 3000 	ldrh.w	r3, [sp]
 8005614:	4581      	cmp	r9, r0
 8005616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800561a:	f84c 3b04 	str.w	r3, [ip], #4
 800561e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005622:	d2db      	bcs.n	80055dc <quorem+0x44>
 8005624:	f855 300b 	ldr.w	r3, [r5, fp]
 8005628:	b92b      	cbnz	r3, 8005636 <quorem+0x9e>
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	3b04      	subs	r3, #4
 800562e:	429d      	cmp	r5, r3
 8005630:	461a      	mov	r2, r3
 8005632:	d32e      	bcc.n	8005692 <quorem+0xfa>
 8005634:	613c      	str	r4, [r7, #16]
 8005636:	4638      	mov	r0, r7
 8005638:	f001 f8c4 	bl	80067c4 <__mcmp>
 800563c:	2800      	cmp	r0, #0
 800563e:	db24      	blt.n	800568a <quorem+0xf2>
 8005640:	3601      	adds	r6, #1
 8005642:	4628      	mov	r0, r5
 8005644:	f04f 0c00 	mov.w	ip, #0
 8005648:	f858 2b04 	ldr.w	r2, [r8], #4
 800564c:	f8d0 e000 	ldr.w	lr, [r0]
 8005650:	b293      	uxth	r3, r2
 8005652:	ebac 0303 	sub.w	r3, ip, r3
 8005656:	0c12      	lsrs	r2, r2, #16
 8005658:	fa13 f38e 	uxtah	r3, r3, lr
 800565c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005664:	b29b      	uxth	r3, r3
 8005666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800566a:	45c1      	cmp	r9, r8
 800566c:	f840 3b04 	str.w	r3, [r0], #4
 8005670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005674:	d2e8      	bcs.n	8005648 <quorem+0xb0>
 8005676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800567a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800567e:	b922      	cbnz	r2, 800568a <quorem+0xf2>
 8005680:	3b04      	subs	r3, #4
 8005682:	429d      	cmp	r5, r3
 8005684:	461a      	mov	r2, r3
 8005686:	d30a      	bcc.n	800569e <quorem+0x106>
 8005688:	613c      	str	r4, [r7, #16]
 800568a:	4630      	mov	r0, r6
 800568c:	b003      	add	sp, #12
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	3b04      	subs	r3, #4
 8005696:	2a00      	cmp	r2, #0
 8005698:	d1cc      	bne.n	8005634 <quorem+0x9c>
 800569a:	3c01      	subs	r4, #1
 800569c:	e7c7      	b.n	800562e <quorem+0x96>
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	3b04      	subs	r3, #4
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d1f0      	bne.n	8005688 <quorem+0xf0>
 80056a6:	3c01      	subs	r4, #1
 80056a8:	e7eb      	b.n	8005682 <quorem+0xea>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e7ee      	b.n	800568c <quorem+0xf4>
	...

080056b0 <_dtoa_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ed2d 8b04 	vpush	{d8-d9}
 80056b8:	ec57 6b10 	vmov	r6, r7, d0
 80056bc:	b093      	sub	sp, #76	; 0x4c
 80056be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056c4:	9106      	str	r1, [sp, #24]
 80056c6:	ee10 aa10 	vmov	sl, s0
 80056ca:	4604      	mov	r4, r0
 80056cc:	9209      	str	r2, [sp, #36]	; 0x24
 80056ce:	930c      	str	r3, [sp, #48]	; 0x30
 80056d0:	46bb      	mov	fp, r7
 80056d2:	b975      	cbnz	r5, 80056f2 <_dtoa_r+0x42>
 80056d4:	2010      	movs	r0, #16
 80056d6:	f000 fddd 	bl	8006294 <malloc>
 80056da:	4602      	mov	r2, r0
 80056dc:	6260      	str	r0, [r4, #36]	; 0x24
 80056de:	b920      	cbnz	r0, 80056ea <_dtoa_r+0x3a>
 80056e0:	4ba7      	ldr	r3, [pc, #668]	; (8005980 <_dtoa_r+0x2d0>)
 80056e2:	21ea      	movs	r1, #234	; 0xea
 80056e4:	48a7      	ldr	r0, [pc, #668]	; (8005984 <_dtoa_r+0x2d4>)
 80056e6:	f001 fbd1 	bl	8006e8c <__assert_func>
 80056ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ee:	6005      	str	r5, [r0, #0]
 80056f0:	60c5      	str	r5, [r0, #12]
 80056f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f4:	6819      	ldr	r1, [r3, #0]
 80056f6:	b151      	cbz	r1, 800570e <_dtoa_r+0x5e>
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	604a      	str	r2, [r1, #4]
 80056fc:	2301      	movs	r3, #1
 80056fe:	4093      	lsls	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
 8005702:	4620      	mov	r0, r4
 8005704:	f000 fe1c 	bl	8006340 <_Bfree>
 8005708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	1e3b      	subs	r3, r7, #0
 8005710:	bfaa      	itet	ge
 8005712:	2300      	movge	r3, #0
 8005714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005718:	f8c8 3000 	strge.w	r3, [r8]
 800571c:	4b9a      	ldr	r3, [pc, #616]	; (8005988 <_dtoa_r+0x2d8>)
 800571e:	bfbc      	itt	lt
 8005720:	2201      	movlt	r2, #1
 8005722:	f8c8 2000 	strlt.w	r2, [r8]
 8005726:	ea33 030b 	bics.w	r3, r3, fp
 800572a:	d11b      	bne.n	8005764 <_dtoa_r+0xb4>
 800572c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800572e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005738:	4333      	orrs	r3, r6
 800573a:	f000 8592 	beq.w	8006262 <_dtoa_r+0xbb2>
 800573e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005740:	b963      	cbnz	r3, 800575c <_dtoa_r+0xac>
 8005742:	4b92      	ldr	r3, [pc, #584]	; (800598c <_dtoa_r+0x2dc>)
 8005744:	e022      	b.n	800578c <_dtoa_r+0xdc>
 8005746:	4b92      	ldr	r3, [pc, #584]	; (8005990 <_dtoa_r+0x2e0>)
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	3308      	adds	r3, #8
 800574c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	9801      	ldr	r0, [sp, #4]
 8005752:	b013      	add	sp, #76	; 0x4c
 8005754:	ecbd 8b04 	vpop	{d8-d9}
 8005758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575c:	4b8b      	ldr	r3, [pc, #556]	; (800598c <_dtoa_r+0x2dc>)
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	3303      	adds	r3, #3
 8005762:	e7f3      	b.n	800574c <_dtoa_r+0x9c>
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	4650      	mov	r0, sl
 800576a:	4659      	mov	r1, fp
 800576c:	f7fb f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005770:	ec4b ab19 	vmov	d9, sl, fp
 8005774:	4680      	mov	r8, r0
 8005776:	b158      	cbz	r0, 8005790 <_dtoa_r+0xe0>
 8005778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800577a:	2301      	movs	r3, #1
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 856b 	beq.w	800625c <_dtoa_r+0xbac>
 8005786:	4883      	ldr	r0, [pc, #524]	; (8005994 <_dtoa_r+0x2e4>)
 8005788:	6018      	str	r0, [r3, #0]
 800578a:	1e43      	subs	r3, r0, #1
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	e7df      	b.n	8005750 <_dtoa_r+0xa0>
 8005790:	ec4b ab10 	vmov	d0, sl, fp
 8005794:	aa10      	add	r2, sp, #64	; 0x40
 8005796:	a911      	add	r1, sp, #68	; 0x44
 8005798:	4620      	mov	r0, r4
 800579a:	f001 f8b9 	bl	8006910 <__d2b>
 800579e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80057a2:	ee08 0a10 	vmov	s16, r0
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	f000 8084 	beq.w	80058b4 <_dtoa_r+0x204>
 80057ac:	ee19 3a90 	vmov	r3, s19
 80057b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057b8:	4656      	mov	r6, sl
 80057ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80057c6:	4b74      	ldr	r3, [pc, #464]	; (8005998 <_dtoa_r+0x2e8>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	4630      	mov	r0, r6
 80057cc:	4639      	mov	r1, r7
 80057ce:	f7fa fd63 	bl	8000298 <__aeabi_dsub>
 80057d2:	a365      	add	r3, pc, #404	; (adr r3, 8005968 <_dtoa_r+0x2b8>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f7fa ff16 	bl	8000608 <__aeabi_dmul>
 80057dc:	a364      	add	r3, pc, #400	; (adr r3, 8005970 <_dtoa_r+0x2c0>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f7fa fd5b 	bl	800029c <__adddf3>
 80057e6:	4606      	mov	r6, r0
 80057e8:	4628      	mov	r0, r5
 80057ea:	460f      	mov	r7, r1
 80057ec:	f7fa fea2 	bl	8000534 <__aeabi_i2d>
 80057f0:	a361      	add	r3, pc, #388	; (adr r3, 8005978 <_dtoa_r+0x2c8>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa ff07 	bl	8000608 <__aeabi_dmul>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4630      	mov	r0, r6
 8005800:	4639      	mov	r1, r7
 8005802:	f7fa fd4b 	bl	800029c <__adddf3>
 8005806:	4606      	mov	r6, r0
 8005808:	460f      	mov	r7, r1
 800580a:	f7fb f9ad 	bl	8000b68 <__aeabi_d2iz>
 800580e:	2200      	movs	r2, #0
 8005810:	9000      	str	r0, [sp, #0]
 8005812:	2300      	movs	r3, #0
 8005814:	4630      	mov	r0, r6
 8005816:	4639      	mov	r1, r7
 8005818:	f7fb f968 	bl	8000aec <__aeabi_dcmplt>
 800581c:	b150      	cbz	r0, 8005834 <_dtoa_r+0x184>
 800581e:	9800      	ldr	r0, [sp, #0]
 8005820:	f7fa fe88 	bl	8000534 <__aeabi_i2d>
 8005824:	4632      	mov	r2, r6
 8005826:	463b      	mov	r3, r7
 8005828:	f7fb f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800582c:	b910      	cbnz	r0, 8005834 <_dtoa_r+0x184>
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	3b01      	subs	r3, #1
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	9b00      	ldr	r3, [sp, #0]
 8005836:	2b16      	cmp	r3, #22
 8005838:	d85a      	bhi.n	80058f0 <_dtoa_r+0x240>
 800583a:	9a00      	ldr	r2, [sp, #0]
 800583c:	4b57      	ldr	r3, [pc, #348]	; (800599c <_dtoa_r+0x2ec>)
 800583e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	ec51 0b19 	vmov	r0, r1, d9
 800584a:	f7fb f94f 	bl	8000aec <__aeabi_dcmplt>
 800584e:	2800      	cmp	r0, #0
 8005850:	d050      	beq.n	80058f4 <_dtoa_r+0x244>
 8005852:	9b00      	ldr	r3, [sp, #0]
 8005854:	3b01      	subs	r3, #1
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	930b      	str	r3, [sp, #44]	; 0x2c
 800585c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800585e:	1b5d      	subs	r5, r3, r5
 8005860:	1e6b      	subs	r3, r5, #1
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	bf45      	ittet	mi
 8005866:	f1c5 0301 	rsbmi	r3, r5, #1
 800586a:	9304      	strmi	r3, [sp, #16]
 800586c:	2300      	movpl	r3, #0
 800586e:	2300      	movmi	r3, #0
 8005870:	bf4c      	ite	mi
 8005872:	9305      	strmi	r3, [sp, #20]
 8005874:	9304      	strpl	r3, [sp, #16]
 8005876:	9b00      	ldr	r3, [sp, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	db3d      	blt.n	80058f8 <_dtoa_r+0x248>
 800587c:	9b05      	ldr	r3, [sp, #20]
 800587e:	9a00      	ldr	r2, [sp, #0]
 8005880:	920a      	str	r2, [sp, #40]	; 0x28
 8005882:	4413      	add	r3, r2
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	2300      	movs	r3, #0
 8005888:	9307      	str	r3, [sp, #28]
 800588a:	9b06      	ldr	r3, [sp, #24]
 800588c:	2b09      	cmp	r3, #9
 800588e:	f200 8089 	bhi.w	80059a4 <_dtoa_r+0x2f4>
 8005892:	2b05      	cmp	r3, #5
 8005894:	bfc4      	itt	gt
 8005896:	3b04      	subgt	r3, #4
 8005898:	9306      	strgt	r3, [sp, #24]
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	f1a3 0302 	sub.w	r3, r3, #2
 80058a0:	bfcc      	ite	gt
 80058a2:	2500      	movgt	r5, #0
 80058a4:	2501      	movle	r5, #1
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	f200 8087 	bhi.w	80059ba <_dtoa_r+0x30a>
 80058ac:	e8df f003 	tbb	[pc, r3]
 80058b0:	59383a2d 	.word	0x59383a2d
 80058b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058b8:	441d      	add	r5, r3
 80058ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058be:	2b20      	cmp	r3, #32
 80058c0:	bfc1      	itttt	gt
 80058c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80058ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058d2:	bfda      	itte	le
 80058d4:	f1c3 0320 	rsble	r3, r3, #32
 80058d8:	fa06 f003 	lslle.w	r0, r6, r3
 80058dc:	4318      	orrgt	r0, r3
 80058de:	f7fa fe19 	bl	8000514 <__aeabi_ui2d>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4606      	mov	r6, r0
 80058e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058ea:	3d01      	subs	r5, #1
 80058ec:	930e      	str	r3, [sp, #56]	; 0x38
 80058ee:	e76a      	b.n	80057c6 <_dtoa_r+0x116>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7b2      	b.n	800585a <_dtoa_r+0x1aa>
 80058f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80058f6:	e7b1      	b.n	800585c <_dtoa_r+0x1ac>
 80058f8:	9b04      	ldr	r3, [sp, #16]
 80058fa:	9a00      	ldr	r2, [sp, #0]
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	4253      	negs	r3, r2
 8005902:	9307      	str	r3, [sp, #28]
 8005904:	2300      	movs	r3, #0
 8005906:	930a      	str	r3, [sp, #40]	; 0x28
 8005908:	e7bf      	b.n	800588a <_dtoa_r+0x1da>
 800590a:	2300      	movs	r3, #0
 800590c:	9308      	str	r3, [sp, #32]
 800590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	dc55      	bgt.n	80059c0 <_dtoa_r+0x310>
 8005914:	2301      	movs	r3, #1
 8005916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800591a:	461a      	mov	r2, r3
 800591c:	9209      	str	r2, [sp, #36]	; 0x24
 800591e:	e00c      	b.n	800593a <_dtoa_r+0x28a>
 8005920:	2301      	movs	r3, #1
 8005922:	e7f3      	b.n	800590c <_dtoa_r+0x25c>
 8005924:	2300      	movs	r3, #0
 8005926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005928:	9308      	str	r3, [sp, #32]
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	4413      	add	r3, r2
 800592e:	9302      	str	r3, [sp, #8]
 8005930:	3301      	adds	r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	9303      	str	r3, [sp, #12]
 8005936:	bfb8      	it	lt
 8005938:	2301      	movlt	r3, #1
 800593a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800593c:	2200      	movs	r2, #0
 800593e:	6042      	str	r2, [r0, #4]
 8005940:	2204      	movs	r2, #4
 8005942:	f102 0614 	add.w	r6, r2, #20
 8005946:	429e      	cmp	r6, r3
 8005948:	6841      	ldr	r1, [r0, #4]
 800594a:	d93d      	bls.n	80059c8 <_dtoa_r+0x318>
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fcb7 	bl	80062c0 <_Balloc>
 8005952:	9001      	str	r0, [sp, #4]
 8005954:	2800      	cmp	r0, #0
 8005956:	d13b      	bne.n	80059d0 <_dtoa_r+0x320>
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <_dtoa_r+0x2f0>)
 800595a:	4602      	mov	r2, r0
 800595c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005960:	e6c0      	b.n	80056e4 <_dtoa_r+0x34>
 8005962:	2301      	movs	r3, #1
 8005964:	e7df      	b.n	8005926 <_dtoa_r+0x276>
 8005966:	bf00      	nop
 8005968:	636f4361 	.word	0x636f4361
 800596c:	3fd287a7 	.word	0x3fd287a7
 8005970:	8b60c8b3 	.word	0x8b60c8b3
 8005974:	3fc68a28 	.word	0x3fc68a28
 8005978:	509f79fb 	.word	0x509f79fb
 800597c:	3fd34413 	.word	0x3fd34413
 8005980:	08007b4d 	.word	0x08007b4d
 8005984:	08007b64 	.word	0x08007b64
 8005988:	7ff00000 	.word	0x7ff00000
 800598c:	08007b49 	.word	0x08007b49
 8005990:	08007b40 	.word	0x08007b40
 8005994:	08007b1d 	.word	0x08007b1d
 8005998:	3ff80000 	.word	0x3ff80000
 800599c:	08007c58 	.word	0x08007c58
 80059a0:	08007bbf 	.word	0x08007bbf
 80059a4:	2501      	movs	r5, #1
 80059a6:	2300      	movs	r3, #0
 80059a8:	9306      	str	r3, [sp, #24]
 80059aa:	9508      	str	r5, [sp, #32]
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2312      	movs	r3, #18
 80059b8:	e7b0      	b.n	800591c <_dtoa_r+0x26c>
 80059ba:	2301      	movs	r3, #1
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	e7f5      	b.n	80059ac <_dtoa_r+0x2fc>
 80059c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059c6:	e7b8      	b.n	800593a <_dtoa_r+0x28a>
 80059c8:	3101      	adds	r1, #1
 80059ca:	6041      	str	r1, [r0, #4]
 80059cc:	0052      	lsls	r2, r2, #1
 80059ce:	e7b8      	b.n	8005942 <_dtoa_r+0x292>
 80059d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d2:	9a01      	ldr	r2, [sp, #4]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	2b0e      	cmp	r3, #14
 80059da:	f200 809d 	bhi.w	8005b18 <_dtoa_r+0x468>
 80059de:	2d00      	cmp	r5, #0
 80059e0:	f000 809a 	beq.w	8005b18 <_dtoa_r+0x468>
 80059e4:	9b00      	ldr	r3, [sp, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd32      	ble.n	8005a50 <_dtoa_r+0x3a0>
 80059ea:	4ab7      	ldr	r2, [pc, #732]	; (8005cc8 <_dtoa_r+0x618>)
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059f8:	9b00      	ldr	r3, [sp, #0]
 80059fa:	05d8      	lsls	r0, r3, #23
 80059fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005a00:	d516      	bpl.n	8005a30 <_dtoa_r+0x380>
 8005a02:	4bb2      	ldr	r3, [pc, #712]	; (8005ccc <_dtoa_r+0x61c>)
 8005a04:	ec51 0b19 	vmov	r0, r1, d9
 8005a08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a0c:	f7fa ff26 	bl	800085c <__aeabi_ddiv>
 8005a10:	f007 070f 	and.w	r7, r7, #15
 8005a14:	4682      	mov	sl, r0
 8005a16:	468b      	mov	fp, r1
 8005a18:	2503      	movs	r5, #3
 8005a1a:	4eac      	ldr	r6, [pc, #688]	; (8005ccc <_dtoa_r+0x61c>)
 8005a1c:	b957      	cbnz	r7, 8005a34 <_dtoa_r+0x384>
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	4650      	mov	r0, sl
 8005a24:	4659      	mov	r1, fp
 8005a26:	f7fa ff19 	bl	800085c <__aeabi_ddiv>
 8005a2a:	4682      	mov	sl, r0
 8005a2c:	468b      	mov	fp, r1
 8005a2e:	e028      	b.n	8005a82 <_dtoa_r+0x3d2>
 8005a30:	2502      	movs	r5, #2
 8005a32:	e7f2      	b.n	8005a1a <_dtoa_r+0x36a>
 8005a34:	07f9      	lsls	r1, r7, #31
 8005a36:	d508      	bpl.n	8005a4a <_dtoa_r+0x39a>
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a40:	f7fa fde2 	bl	8000608 <__aeabi_dmul>
 8005a44:	3501      	adds	r5, #1
 8005a46:	4680      	mov	r8, r0
 8005a48:	4689      	mov	r9, r1
 8005a4a:	107f      	asrs	r7, r7, #1
 8005a4c:	3608      	adds	r6, #8
 8005a4e:	e7e5      	b.n	8005a1c <_dtoa_r+0x36c>
 8005a50:	f000 809b 	beq.w	8005b8a <_dtoa_r+0x4da>
 8005a54:	9b00      	ldr	r3, [sp, #0]
 8005a56:	4f9d      	ldr	r7, [pc, #628]	; (8005ccc <_dtoa_r+0x61c>)
 8005a58:	425e      	negs	r6, r3
 8005a5a:	4b9b      	ldr	r3, [pc, #620]	; (8005cc8 <_dtoa_r+0x618>)
 8005a5c:	f006 020f 	and.w	r2, r6, #15
 8005a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	ec51 0b19 	vmov	r0, r1, d9
 8005a6c:	f7fa fdcc 	bl	8000608 <__aeabi_dmul>
 8005a70:	1136      	asrs	r6, r6, #4
 8005a72:	4682      	mov	sl, r0
 8005a74:	468b      	mov	fp, r1
 8005a76:	2300      	movs	r3, #0
 8005a78:	2502      	movs	r5, #2
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	d17a      	bne.n	8005b74 <_dtoa_r+0x4c4>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1d3      	bne.n	8005a2a <_dtoa_r+0x37a>
 8005a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8082 	beq.w	8005b8e <_dtoa_r+0x4de>
 8005a8a:	4b91      	ldr	r3, [pc, #580]	; (8005cd0 <_dtoa_r+0x620>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4650      	mov	r0, sl
 8005a90:	4659      	mov	r1, fp
 8005a92:	f7fb f82b 	bl	8000aec <__aeabi_dcmplt>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d079      	beq.n	8005b8e <_dtoa_r+0x4de>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d076      	beq.n	8005b8e <_dtoa_r+0x4de>
 8005aa0:	9b02      	ldr	r3, [sp, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dd36      	ble.n	8005b14 <_dtoa_r+0x464>
 8005aa6:	9b00      	ldr	r3, [sp, #0]
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	4659      	mov	r1, fp
 8005aac:	1e5f      	subs	r7, r3, #1
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <_dtoa_r+0x624>)
 8005ab2:	f7fa fda9 	bl	8000608 <__aeabi_dmul>
 8005ab6:	9e02      	ldr	r6, [sp, #8]
 8005ab8:	4682      	mov	sl, r0
 8005aba:	468b      	mov	fp, r1
 8005abc:	3501      	adds	r5, #1
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f7fa fd38 	bl	8000534 <__aeabi_i2d>
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	465b      	mov	r3, fp
 8005ac8:	f7fa fd9e 	bl	8000608 <__aeabi_dmul>
 8005acc:	4b82      	ldr	r3, [pc, #520]	; (8005cd8 <_dtoa_r+0x628>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f7fa fbe4 	bl	800029c <__adddf3>
 8005ad4:	46d0      	mov	r8, sl
 8005ad6:	46d9      	mov	r9, fp
 8005ad8:	4682      	mov	sl, r0
 8005ada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	d158      	bne.n	8005b94 <_dtoa_r+0x4e4>
 8005ae2:	4b7e      	ldr	r3, [pc, #504]	; (8005cdc <_dtoa_r+0x62c>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	f7fa fbd5 	bl	8000298 <__aeabi_dsub>
 8005aee:	4652      	mov	r2, sl
 8005af0:	465b      	mov	r3, fp
 8005af2:	4680      	mov	r8, r0
 8005af4:	4689      	mov	r9, r1
 8005af6:	f7fb f817 	bl	8000b28 <__aeabi_dcmpgt>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f040 8295 	bne.w	800602a <_dtoa_r+0x97a>
 8005b00:	4652      	mov	r2, sl
 8005b02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa ffef 	bl	8000aec <__aeabi_dcmplt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f040 8289 	bne.w	8006026 <_dtoa_r+0x976>
 8005b14:	ec5b ab19 	vmov	sl, fp, d9
 8005b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f2c0 8148 	blt.w	8005db0 <_dtoa_r+0x700>
 8005b20:	9a00      	ldr	r2, [sp, #0]
 8005b22:	2a0e      	cmp	r2, #14
 8005b24:	f300 8144 	bgt.w	8005db0 <_dtoa_r+0x700>
 8005b28:	4b67      	ldr	r3, [pc, #412]	; (8005cc8 <_dtoa_r+0x618>)
 8005b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f280 80d5 	bge.w	8005ce4 <_dtoa_r+0x634>
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f300 80d1 	bgt.w	8005ce4 <_dtoa_r+0x634>
 8005b42:	f040 826f 	bne.w	8006024 <_dtoa_r+0x974>
 8005b46:	4b65      	ldr	r3, [pc, #404]	; (8005cdc <_dtoa_r+0x62c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	f7fa fd5b 	bl	8000608 <__aeabi_dmul>
 8005b52:	4652      	mov	r2, sl
 8005b54:	465b      	mov	r3, fp
 8005b56:	f7fa ffdd 	bl	8000b14 <__aeabi_dcmpge>
 8005b5a:	9e03      	ldr	r6, [sp, #12]
 8005b5c:	4637      	mov	r7, r6
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f040 8245 	bne.w	8005fee <_dtoa_r+0x93e>
 8005b64:	9d01      	ldr	r5, [sp, #4]
 8005b66:	2331      	movs	r3, #49	; 0x31
 8005b68:	f805 3b01 	strb.w	r3, [r5], #1
 8005b6c:	9b00      	ldr	r3, [sp, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	e240      	b.n	8005ff6 <_dtoa_r+0x946>
 8005b74:	07f2      	lsls	r2, r6, #31
 8005b76:	d505      	bpl.n	8005b84 <_dtoa_r+0x4d4>
 8005b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7c:	f7fa fd44 	bl	8000608 <__aeabi_dmul>
 8005b80:	3501      	adds	r5, #1
 8005b82:	2301      	movs	r3, #1
 8005b84:	1076      	asrs	r6, r6, #1
 8005b86:	3708      	adds	r7, #8
 8005b88:	e777      	b.n	8005a7a <_dtoa_r+0x3ca>
 8005b8a:	2502      	movs	r5, #2
 8005b8c:	e779      	b.n	8005a82 <_dtoa_r+0x3d2>
 8005b8e:	9f00      	ldr	r7, [sp, #0]
 8005b90:	9e03      	ldr	r6, [sp, #12]
 8005b92:	e794      	b.n	8005abe <_dtoa_r+0x40e>
 8005b94:	9901      	ldr	r1, [sp, #4]
 8005b96:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <_dtoa_r+0x618>)
 8005b98:	4431      	add	r1, r6
 8005b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b9c:	9908      	ldr	r1, [sp, #32]
 8005b9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	d043      	beq.n	8005c32 <_dtoa_r+0x582>
 8005baa:	494d      	ldr	r1, [pc, #308]	; (8005ce0 <_dtoa_r+0x630>)
 8005bac:	2000      	movs	r0, #0
 8005bae:	f7fa fe55 	bl	800085c <__aeabi_ddiv>
 8005bb2:	4652      	mov	r2, sl
 8005bb4:	465b      	mov	r3, fp
 8005bb6:	f7fa fb6f 	bl	8000298 <__aeabi_dsub>
 8005bba:	9d01      	ldr	r5, [sp, #4]
 8005bbc:	4682      	mov	sl, r0
 8005bbe:	468b      	mov	fp, r1
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f7fa ffd0 	bl	8000b68 <__aeabi_d2iz>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	f7fa fcb3 	bl	8000534 <__aeabi_i2d>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb5f 	bl	8000298 <__aeabi_dsub>
 8005bda:	3630      	adds	r6, #48	; 0x30
 8005bdc:	f805 6b01 	strb.w	r6, [r5], #1
 8005be0:	4652      	mov	r2, sl
 8005be2:	465b      	mov	r3, fp
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	f7fa ff80 	bl	8000aec <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d163      	bne.n	8005cb8 <_dtoa_r+0x608>
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	4936      	ldr	r1, [pc, #216]	; (8005cd0 <_dtoa_r+0x620>)
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f7fa fb4e 	bl	8000298 <__aeabi_dsub>
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	465b      	mov	r3, fp
 8005c00:	f7fa ff74 	bl	8000aec <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 80b5 	bne.w	8005d74 <_dtoa_r+0x6c4>
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	d081      	beq.n	8005b14 <_dtoa_r+0x464>
 8005c10:	4b30      	ldr	r3, [pc, #192]	; (8005cd4 <_dtoa_r+0x624>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	4650      	mov	r0, sl
 8005c16:	4659      	mov	r1, fp
 8005c18:	f7fa fcf6 	bl	8000608 <__aeabi_dmul>
 8005c1c:	4b2d      	ldr	r3, [pc, #180]	; (8005cd4 <_dtoa_r+0x624>)
 8005c1e:	4682      	mov	sl, r0
 8005c20:	468b      	mov	fp, r1
 8005c22:	4640      	mov	r0, r8
 8005c24:	4649      	mov	r1, r9
 8005c26:	2200      	movs	r2, #0
 8005c28:	f7fa fcee 	bl	8000608 <__aeabi_dmul>
 8005c2c:	4680      	mov	r8, r0
 8005c2e:	4689      	mov	r9, r1
 8005c30:	e7c6      	b.n	8005bc0 <_dtoa_r+0x510>
 8005c32:	4650      	mov	r0, sl
 8005c34:	4659      	mov	r1, fp
 8005c36:	f7fa fce7 	bl	8000608 <__aeabi_dmul>
 8005c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c3c:	9d01      	ldr	r5, [sp, #4]
 8005c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c40:	4682      	mov	sl, r0
 8005c42:	468b      	mov	fp, r1
 8005c44:	4649      	mov	r1, r9
 8005c46:	4640      	mov	r0, r8
 8005c48:	f7fa ff8e 	bl	8000b68 <__aeabi_d2iz>
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	f7fa fc71 	bl	8000534 <__aeabi_i2d>
 8005c52:	3630      	adds	r6, #48	; 0x30
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4640      	mov	r0, r8
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	f7fa fb1c 	bl	8000298 <__aeabi_dsub>
 8005c60:	f805 6b01 	strb.w	r6, [r5], #1
 8005c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c66:	429d      	cmp	r5, r3
 8005c68:	4680      	mov	r8, r0
 8005c6a:	4689      	mov	r9, r1
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	d124      	bne.n	8005cbc <_dtoa_r+0x60c>
 8005c72:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <_dtoa_r+0x630>)
 8005c74:	4650      	mov	r0, sl
 8005c76:	4659      	mov	r1, fp
 8005c78:	f7fa fb10 	bl	800029c <__adddf3>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa ff50 	bl	8000b28 <__aeabi_dcmpgt>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d173      	bne.n	8005d74 <_dtoa_r+0x6c4>
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	465b      	mov	r3, fp
 8005c90:	4913      	ldr	r1, [pc, #76]	; (8005ce0 <_dtoa_r+0x630>)
 8005c92:	2000      	movs	r0, #0
 8005c94:	f7fa fb00 	bl	8000298 <__aeabi_dsub>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	f7fa ff24 	bl	8000aec <__aeabi_dcmplt>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f43f af35 	beq.w	8005b14 <_dtoa_r+0x464>
 8005caa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005cac:	1e6b      	subs	r3, r5, #1
 8005cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cb4:	2b30      	cmp	r3, #48	; 0x30
 8005cb6:	d0f8      	beq.n	8005caa <_dtoa_r+0x5fa>
 8005cb8:	9700      	str	r7, [sp, #0]
 8005cba:	e049      	b.n	8005d50 <_dtoa_r+0x6a0>
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <_dtoa_r+0x624>)
 8005cbe:	f7fa fca3 	bl	8000608 <__aeabi_dmul>
 8005cc2:	4680      	mov	r8, r0
 8005cc4:	4689      	mov	r9, r1
 8005cc6:	e7bd      	b.n	8005c44 <_dtoa_r+0x594>
 8005cc8:	08007c58 	.word	0x08007c58
 8005ccc:	08007c30 	.word	0x08007c30
 8005cd0:	3ff00000 	.word	0x3ff00000
 8005cd4:	40240000 	.word	0x40240000
 8005cd8:	401c0000 	.word	0x401c0000
 8005cdc:	40140000 	.word	0x40140000
 8005ce0:	3fe00000 	.word	0x3fe00000
 8005ce4:	9d01      	ldr	r5, [sp, #4]
 8005ce6:	4656      	mov	r6, sl
 8005ce8:	465f      	mov	r7, fp
 8005cea:	4642      	mov	r2, r8
 8005cec:	464b      	mov	r3, r9
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fdb3 	bl	800085c <__aeabi_ddiv>
 8005cf6:	f7fa ff37 	bl	8000b68 <__aeabi_d2iz>
 8005cfa:	4682      	mov	sl, r0
 8005cfc:	f7fa fc1a 	bl	8000534 <__aeabi_i2d>
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	f7fa fc80 	bl	8000608 <__aeabi_dmul>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	4639      	mov	r1, r7
 8005d10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005d14:	f7fa fac0 	bl	8000298 <__aeabi_dsub>
 8005d18:	f805 6b01 	strb.w	r6, [r5], #1
 8005d1c:	9e01      	ldr	r6, [sp, #4]
 8005d1e:	9f03      	ldr	r7, [sp, #12]
 8005d20:	1bae      	subs	r6, r5, r6
 8005d22:	42b7      	cmp	r7, r6
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	d135      	bne.n	8005d96 <_dtoa_r+0x6e6>
 8005d2a:	f7fa fab7 	bl	800029c <__adddf3>
 8005d2e:	4642      	mov	r2, r8
 8005d30:	464b      	mov	r3, r9
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	f7fa fef7 	bl	8000b28 <__aeabi_dcmpgt>
 8005d3a:	b9d0      	cbnz	r0, 8005d72 <_dtoa_r+0x6c2>
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	4630      	mov	r0, r6
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d48:	b110      	cbz	r0, 8005d50 <_dtoa_r+0x6a0>
 8005d4a:	f01a 0f01 	tst.w	sl, #1
 8005d4e:	d110      	bne.n	8005d72 <_dtoa_r+0x6c2>
 8005d50:	4620      	mov	r0, r4
 8005d52:	ee18 1a10 	vmov	r1, s16
 8005d56:	f000 faf3 	bl	8006340 <_Bfree>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9800      	ldr	r0, [sp, #0]
 8005d5e:	702b      	strb	r3, [r5, #0]
 8005d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d62:	3001      	adds	r0, #1
 8005d64:	6018      	str	r0, [r3, #0]
 8005d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f43f acf1 	beq.w	8005750 <_dtoa_r+0xa0>
 8005d6e:	601d      	str	r5, [r3, #0]
 8005d70:	e4ee      	b.n	8005750 <_dtoa_r+0xa0>
 8005d72:	9f00      	ldr	r7, [sp, #0]
 8005d74:	462b      	mov	r3, r5
 8005d76:	461d      	mov	r5, r3
 8005d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d7c:	2a39      	cmp	r2, #57	; 0x39
 8005d7e:	d106      	bne.n	8005d8e <_dtoa_r+0x6de>
 8005d80:	9a01      	ldr	r2, [sp, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d1f7      	bne.n	8005d76 <_dtoa_r+0x6c6>
 8005d86:	9901      	ldr	r1, [sp, #4]
 8005d88:	2230      	movs	r2, #48	; 0x30
 8005d8a:	3701      	adds	r7, #1
 8005d8c:	700a      	strb	r2, [r1, #0]
 8005d8e:	781a      	ldrb	r2, [r3, #0]
 8005d90:	3201      	adds	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e790      	b.n	8005cb8 <_dtoa_r+0x608>
 8005d96:	4ba6      	ldr	r3, [pc, #664]	; (8006030 <_dtoa_r+0x980>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f7fa fc35 	bl	8000608 <__aeabi_dmul>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2300      	movs	r3, #0
 8005da2:	4606      	mov	r6, r0
 8005da4:	460f      	mov	r7, r1
 8005da6:	f7fa fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d09d      	beq.n	8005cea <_dtoa_r+0x63a>
 8005dae:	e7cf      	b.n	8005d50 <_dtoa_r+0x6a0>
 8005db0:	9a08      	ldr	r2, [sp, #32]
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	f000 80d7 	beq.w	8005f66 <_dtoa_r+0x8b6>
 8005db8:	9a06      	ldr	r2, [sp, #24]
 8005dba:	2a01      	cmp	r2, #1
 8005dbc:	f300 80ba 	bgt.w	8005f34 <_dtoa_r+0x884>
 8005dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	f000 80b2 	beq.w	8005f2c <_dtoa_r+0x87c>
 8005dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dcc:	9e07      	ldr	r6, [sp, #28]
 8005dce:	9d04      	ldr	r5, [sp, #16]
 8005dd0:	9a04      	ldr	r2, [sp, #16]
 8005dd2:	441a      	add	r2, r3
 8005dd4:	9204      	str	r2, [sp, #16]
 8005dd6:	9a05      	ldr	r2, [sp, #20]
 8005dd8:	2101      	movs	r1, #1
 8005dda:	441a      	add	r2, r3
 8005ddc:	4620      	mov	r0, r4
 8005dde:	9205      	str	r2, [sp, #20]
 8005de0:	f000 fb66 	bl	80064b0 <__i2b>
 8005de4:	4607      	mov	r7, r0
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	dd0c      	ble.n	8005e04 <_dtoa_r+0x754>
 8005dea:	9b05      	ldr	r3, [sp, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dd09      	ble.n	8005e04 <_dtoa_r+0x754>
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	9a04      	ldr	r2, [sp, #16]
 8005df4:	bfa8      	it	ge
 8005df6:	462b      	movge	r3, r5
 8005df8:	1ad2      	subs	r2, r2, r3
 8005dfa:	9204      	str	r2, [sp, #16]
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	1aed      	subs	r5, r5, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	9305      	str	r3, [sp, #20]
 8005e04:	9b07      	ldr	r3, [sp, #28]
 8005e06:	b31b      	cbz	r3, 8005e50 <_dtoa_r+0x7a0>
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80af 	beq.w	8005f6e <_dtoa_r+0x8be>
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	dd13      	ble.n	8005e3c <_dtoa_r+0x78c>
 8005e14:	4639      	mov	r1, r7
 8005e16:	4632      	mov	r2, r6
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fc09 	bl	8006630 <__pow5mult>
 8005e1e:	ee18 2a10 	vmov	r2, s16
 8005e22:	4601      	mov	r1, r0
 8005e24:	4607      	mov	r7, r0
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fb58 	bl	80064dc <__multiply>
 8005e2c:	ee18 1a10 	vmov	r1, s16
 8005e30:	4680      	mov	r8, r0
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 fa84 	bl	8006340 <_Bfree>
 8005e38:	ee08 8a10 	vmov	s16, r8
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	1b9a      	subs	r2, r3, r6
 8005e40:	d006      	beq.n	8005e50 <_dtoa_r+0x7a0>
 8005e42:	ee18 1a10 	vmov	r1, s16
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 fbf2 	bl	8006630 <__pow5mult>
 8005e4c:	ee08 0a10 	vmov	s16, r0
 8005e50:	2101      	movs	r1, #1
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 fb2c 	bl	80064b0 <__i2b>
 8005e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	f340 8088 	ble.w	8005f72 <_dtoa_r+0x8c2>
 8005e62:	461a      	mov	r2, r3
 8005e64:	4601      	mov	r1, r0
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fbe2 	bl	8006630 <__pow5mult>
 8005e6c:	9b06      	ldr	r3, [sp, #24]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	4606      	mov	r6, r0
 8005e72:	f340 8081 	ble.w	8005f78 <_dtoa_r+0x8c8>
 8005e76:	f04f 0800 	mov.w	r8, #0
 8005e7a:	6933      	ldr	r3, [r6, #16]
 8005e7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f000 fac5 	bl	8006410 <__hi0bits>
 8005e86:	f1c0 0020 	rsb	r0, r0, #32
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	4418      	add	r0, r3
 8005e8e:	f010 001f 	ands.w	r0, r0, #31
 8005e92:	f000 8092 	beq.w	8005fba <_dtoa_r+0x90a>
 8005e96:	f1c0 0320 	rsb	r3, r0, #32
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	f340 808a 	ble.w	8005fb4 <_dtoa_r+0x904>
 8005ea0:	f1c0 001c 	rsb	r0, r0, #28
 8005ea4:	9b04      	ldr	r3, [sp, #16]
 8005ea6:	4403      	add	r3, r0
 8005ea8:	9304      	str	r3, [sp, #16]
 8005eaa:	9b05      	ldr	r3, [sp, #20]
 8005eac:	4403      	add	r3, r0
 8005eae:	4405      	add	r5, r0
 8005eb0:	9305      	str	r3, [sp, #20]
 8005eb2:	9b04      	ldr	r3, [sp, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd07      	ble.n	8005ec8 <_dtoa_r+0x818>
 8005eb8:	ee18 1a10 	vmov	r1, s16
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 fc10 	bl	80066e4 <__lshift>
 8005ec4:	ee08 0a10 	vmov	s16, r0
 8005ec8:	9b05      	ldr	r3, [sp, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd05      	ble.n	8005eda <_dtoa_r+0x82a>
 8005ece:	4631      	mov	r1, r6
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fc06 	bl	80066e4 <__lshift>
 8005ed8:	4606      	mov	r6, r0
 8005eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d06e      	beq.n	8005fbe <_dtoa_r+0x90e>
 8005ee0:	ee18 0a10 	vmov	r0, s16
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	f000 fc6d 	bl	80067c4 <__mcmp>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	da67      	bge.n	8005fbe <_dtoa_r+0x90e>
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	ee18 1a10 	vmov	r1, s16
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	220a      	movs	r2, #10
 8005efa:	2300      	movs	r3, #0
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fa41 	bl	8006384 <__multadd>
 8005f02:	9b08      	ldr	r3, [sp, #32]
 8005f04:	ee08 0a10 	vmov	s16, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 81b1 	beq.w	8006270 <_dtoa_r+0xbc0>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4639      	mov	r1, r7
 8005f12:	220a      	movs	r2, #10
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 fa35 	bl	8006384 <__multadd>
 8005f1a:	9b02      	ldr	r3, [sp, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	4607      	mov	r7, r0
 8005f20:	f300 808e 	bgt.w	8006040 <_dtoa_r+0x990>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	dc51      	bgt.n	8005fce <_dtoa_r+0x91e>
 8005f2a:	e089      	b.n	8006040 <_dtoa_r+0x990>
 8005f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f32:	e74b      	b.n	8005dcc <_dtoa_r+0x71c>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	1e5e      	subs	r6, r3, #1
 8005f38:	9b07      	ldr	r3, [sp, #28]
 8005f3a:	42b3      	cmp	r3, r6
 8005f3c:	bfbf      	itttt	lt
 8005f3e:	9b07      	ldrlt	r3, [sp, #28]
 8005f40:	9607      	strlt	r6, [sp, #28]
 8005f42:	1af2      	sublt	r2, r6, r3
 8005f44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f46:	bfb6      	itet	lt
 8005f48:	189b      	addlt	r3, r3, r2
 8005f4a:	1b9e      	subge	r6, r3, r6
 8005f4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	bfb8      	it	lt
 8005f52:	2600      	movlt	r6, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bfb7      	itett	lt
 8005f58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f60:	1a9d      	sublt	r5, r3, r2
 8005f62:	2300      	movlt	r3, #0
 8005f64:	e734      	b.n	8005dd0 <_dtoa_r+0x720>
 8005f66:	9e07      	ldr	r6, [sp, #28]
 8005f68:	9d04      	ldr	r5, [sp, #16]
 8005f6a:	9f08      	ldr	r7, [sp, #32]
 8005f6c:	e73b      	b.n	8005de6 <_dtoa_r+0x736>
 8005f6e:	9a07      	ldr	r2, [sp, #28]
 8005f70:	e767      	b.n	8005e42 <_dtoa_r+0x792>
 8005f72:	9b06      	ldr	r3, [sp, #24]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	dc18      	bgt.n	8005faa <_dtoa_r+0x8fa>
 8005f78:	f1ba 0f00 	cmp.w	sl, #0
 8005f7c:	d115      	bne.n	8005faa <_dtoa_r+0x8fa>
 8005f7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f82:	b993      	cbnz	r3, 8005faa <_dtoa_r+0x8fa>
 8005f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f88:	0d1b      	lsrs	r3, r3, #20
 8005f8a:	051b      	lsls	r3, r3, #20
 8005f8c:	b183      	cbz	r3, 8005fb0 <_dtoa_r+0x900>
 8005f8e:	9b04      	ldr	r3, [sp, #16]
 8005f90:	3301      	adds	r3, #1
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	9b05      	ldr	r3, [sp, #20]
 8005f96:	3301      	adds	r3, #1
 8005f98:	9305      	str	r3, [sp, #20]
 8005f9a:	f04f 0801 	mov.w	r8, #1
 8005f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f47f af6a 	bne.w	8005e7a <_dtoa_r+0x7ca>
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	e76f      	b.n	8005e8a <_dtoa_r+0x7da>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	e7f6      	b.n	8005f9e <_dtoa_r+0x8ee>
 8005fb0:	4698      	mov	r8, r3
 8005fb2:	e7f4      	b.n	8005f9e <_dtoa_r+0x8ee>
 8005fb4:	f43f af7d 	beq.w	8005eb2 <_dtoa_r+0x802>
 8005fb8:	4618      	mov	r0, r3
 8005fba:	301c      	adds	r0, #28
 8005fbc:	e772      	b.n	8005ea4 <_dtoa_r+0x7f4>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dc37      	bgt.n	8006034 <_dtoa_r+0x984>
 8005fc4:	9b06      	ldr	r3, [sp, #24]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	dd34      	ble.n	8006034 <_dtoa_r+0x984>
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	b96b      	cbnz	r3, 8005fee <_dtoa_r+0x93e>
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 f9d4 	bl	8006384 <__multadd>
 8005fdc:	4601      	mov	r1, r0
 8005fde:	4606      	mov	r6, r0
 8005fe0:	ee18 0a10 	vmov	r0, s16
 8005fe4:	f000 fbee 	bl	80067c4 <__mcmp>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f73f adbb 	bgt.w	8005b64 <_dtoa_r+0x4b4>
 8005fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff0:	9d01      	ldr	r5, [sp, #4]
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	f04f 0800 	mov.w	r8, #0
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f99f 	bl	8006340 <_Bfree>
 8006002:	2f00      	cmp	r7, #0
 8006004:	f43f aea4 	beq.w	8005d50 <_dtoa_r+0x6a0>
 8006008:	f1b8 0f00 	cmp.w	r8, #0
 800600c:	d005      	beq.n	800601a <_dtoa_r+0x96a>
 800600e:	45b8      	cmp	r8, r7
 8006010:	d003      	beq.n	800601a <_dtoa_r+0x96a>
 8006012:	4641      	mov	r1, r8
 8006014:	4620      	mov	r0, r4
 8006016:	f000 f993 	bl	8006340 <_Bfree>
 800601a:	4639      	mov	r1, r7
 800601c:	4620      	mov	r0, r4
 800601e:	f000 f98f 	bl	8006340 <_Bfree>
 8006022:	e695      	b.n	8005d50 <_dtoa_r+0x6a0>
 8006024:	2600      	movs	r6, #0
 8006026:	4637      	mov	r7, r6
 8006028:	e7e1      	b.n	8005fee <_dtoa_r+0x93e>
 800602a:	9700      	str	r7, [sp, #0]
 800602c:	4637      	mov	r7, r6
 800602e:	e599      	b.n	8005b64 <_dtoa_r+0x4b4>
 8006030:	40240000 	.word	0x40240000
 8006034:	9b08      	ldr	r3, [sp, #32]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80ca 	beq.w	80061d0 <_dtoa_r+0xb20>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	9302      	str	r3, [sp, #8]
 8006040:	2d00      	cmp	r5, #0
 8006042:	dd05      	ble.n	8006050 <_dtoa_r+0x9a0>
 8006044:	4639      	mov	r1, r7
 8006046:	462a      	mov	r2, r5
 8006048:	4620      	mov	r0, r4
 800604a:	f000 fb4b 	bl	80066e4 <__lshift>
 800604e:	4607      	mov	r7, r0
 8006050:	f1b8 0f00 	cmp.w	r8, #0
 8006054:	d05b      	beq.n	800610e <_dtoa_r+0xa5e>
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4620      	mov	r0, r4
 800605a:	f000 f931 	bl	80062c0 <_Balloc>
 800605e:	4605      	mov	r5, r0
 8006060:	b928      	cbnz	r0, 800606e <_dtoa_r+0x9be>
 8006062:	4b87      	ldr	r3, [pc, #540]	; (8006280 <_dtoa_r+0xbd0>)
 8006064:	4602      	mov	r2, r0
 8006066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800606a:	f7ff bb3b 	b.w	80056e4 <_dtoa_r+0x34>
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	3202      	adds	r2, #2
 8006072:	0092      	lsls	r2, r2, #2
 8006074:	f107 010c 	add.w	r1, r7, #12
 8006078:	300c      	adds	r0, #12
 800607a:	f000 f913 	bl	80062a4 <memcpy>
 800607e:	2201      	movs	r2, #1
 8006080:	4629      	mov	r1, r5
 8006082:	4620      	mov	r0, r4
 8006084:	f000 fb2e 	bl	80066e4 <__lshift>
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	f103 0901 	add.w	r9, r3, #1
 800608e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006092:	4413      	add	r3, r2
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f00a 0301 	and.w	r3, sl, #1
 800609a:	46b8      	mov	r8, r7
 800609c:	9304      	str	r3, [sp, #16]
 800609e:	4607      	mov	r7, r0
 80060a0:	4631      	mov	r1, r6
 80060a2:	ee18 0a10 	vmov	r0, s16
 80060a6:	f7ff fa77 	bl	8005598 <quorem>
 80060aa:	4641      	mov	r1, r8
 80060ac:	9002      	str	r0, [sp, #8]
 80060ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80060b2:	ee18 0a10 	vmov	r0, s16
 80060b6:	f000 fb85 	bl	80067c4 <__mcmp>
 80060ba:	463a      	mov	r2, r7
 80060bc:	9003      	str	r0, [sp, #12]
 80060be:	4631      	mov	r1, r6
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 fb9b 	bl	80067fc <__mdiff>
 80060c6:	68c2      	ldr	r2, [r0, #12]
 80060c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80060cc:	4605      	mov	r5, r0
 80060ce:	bb02      	cbnz	r2, 8006112 <_dtoa_r+0xa62>
 80060d0:	4601      	mov	r1, r0
 80060d2:	ee18 0a10 	vmov	r0, s16
 80060d6:	f000 fb75 	bl	80067c4 <__mcmp>
 80060da:	4602      	mov	r2, r0
 80060dc:	4629      	mov	r1, r5
 80060de:	4620      	mov	r0, r4
 80060e0:	9207      	str	r2, [sp, #28]
 80060e2:	f000 f92d 	bl	8006340 <_Bfree>
 80060e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80060ea:	ea43 0102 	orr.w	r1, r3, r2
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	430b      	orrs	r3, r1
 80060f2:	464d      	mov	r5, r9
 80060f4:	d10f      	bne.n	8006116 <_dtoa_r+0xa66>
 80060f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060fa:	d02a      	beq.n	8006152 <_dtoa_r+0xaa2>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd02      	ble.n	8006108 <_dtoa_r+0xa58>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006108:	f88b a000 	strb.w	sl, [fp]
 800610c:	e775      	b.n	8005ffa <_dtoa_r+0x94a>
 800610e:	4638      	mov	r0, r7
 8006110:	e7ba      	b.n	8006088 <_dtoa_r+0x9d8>
 8006112:	2201      	movs	r2, #1
 8006114:	e7e2      	b.n	80060dc <_dtoa_r+0xa2c>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	db04      	blt.n	8006126 <_dtoa_r+0xa76>
 800611c:	9906      	ldr	r1, [sp, #24]
 800611e:	430b      	orrs	r3, r1
 8006120:	9904      	ldr	r1, [sp, #16]
 8006122:	430b      	orrs	r3, r1
 8006124:	d122      	bne.n	800616c <_dtoa_r+0xabc>
 8006126:	2a00      	cmp	r2, #0
 8006128:	ddee      	ble.n	8006108 <_dtoa_r+0xa58>
 800612a:	ee18 1a10 	vmov	r1, s16
 800612e:	2201      	movs	r2, #1
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fad7 	bl	80066e4 <__lshift>
 8006136:	4631      	mov	r1, r6
 8006138:	ee08 0a10 	vmov	s16, r0
 800613c:	f000 fb42 	bl	80067c4 <__mcmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	dc03      	bgt.n	800614c <_dtoa_r+0xa9c>
 8006144:	d1e0      	bne.n	8006108 <_dtoa_r+0xa58>
 8006146:	f01a 0f01 	tst.w	sl, #1
 800614a:	d0dd      	beq.n	8006108 <_dtoa_r+0xa58>
 800614c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006150:	d1d7      	bne.n	8006102 <_dtoa_r+0xa52>
 8006152:	2339      	movs	r3, #57	; 0x39
 8006154:	f88b 3000 	strb.w	r3, [fp]
 8006158:	462b      	mov	r3, r5
 800615a:	461d      	mov	r5, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006162:	2a39      	cmp	r2, #57	; 0x39
 8006164:	d071      	beq.n	800624a <_dtoa_r+0xb9a>
 8006166:	3201      	adds	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e746      	b.n	8005ffa <_dtoa_r+0x94a>
 800616c:	2a00      	cmp	r2, #0
 800616e:	dd07      	ble.n	8006180 <_dtoa_r+0xad0>
 8006170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006174:	d0ed      	beq.n	8006152 <_dtoa_r+0xaa2>
 8006176:	f10a 0301 	add.w	r3, sl, #1
 800617a:	f88b 3000 	strb.w	r3, [fp]
 800617e:	e73c      	b.n	8005ffa <_dtoa_r+0x94a>
 8006180:	9b05      	ldr	r3, [sp, #20]
 8006182:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006186:	4599      	cmp	r9, r3
 8006188:	d047      	beq.n	800621a <_dtoa_r+0xb6a>
 800618a:	ee18 1a10 	vmov	r1, s16
 800618e:	2300      	movs	r3, #0
 8006190:	220a      	movs	r2, #10
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f8f6 	bl	8006384 <__multadd>
 8006198:	45b8      	cmp	r8, r7
 800619a:	ee08 0a10 	vmov	s16, r0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	f04f 020a 	mov.w	r2, #10
 80061a6:	4641      	mov	r1, r8
 80061a8:	4620      	mov	r0, r4
 80061aa:	d106      	bne.n	80061ba <_dtoa_r+0xb0a>
 80061ac:	f000 f8ea 	bl	8006384 <__multadd>
 80061b0:	4680      	mov	r8, r0
 80061b2:	4607      	mov	r7, r0
 80061b4:	f109 0901 	add.w	r9, r9, #1
 80061b8:	e772      	b.n	80060a0 <_dtoa_r+0x9f0>
 80061ba:	f000 f8e3 	bl	8006384 <__multadd>
 80061be:	4639      	mov	r1, r7
 80061c0:	4680      	mov	r8, r0
 80061c2:	2300      	movs	r3, #0
 80061c4:	220a      	movs	r2, #10
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f8dc 	bl	8006384 <__multadd>
 80061cc:	4607      	mov	r7, r0
 80061ce:	e7f1      	b.n	80061b4 <_dtoa_r+0xb04>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	9302      	str	r3, [sp, #8]
 80061d4:	9d01      	ldr	r5, [sp, #4]
 80061d6:	ee18 0a10 	vmov	r0, s16
 80061da:	4631      	mov	r1, r6
 80061dc:	f7ff f9dc 	bl	8005598 <quorem>
 80061e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	f805 ab01 	strb.w	sl, [r5], #1
 80061ea:	1aea      	subs	r2, r5, r3
 80061ec:	9b02      	ldr	r3, [sp, #8]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	dd09      	ble.n	8006206 <_dtoa_r+0xb56>
 80061f2:	ee18 1a10 	vmov	r1, s16
 80061f6:	2300      	movs	r3, #0
 80061f8:	220a      	movs	r2, #10
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f8c2 	bl	8006384 <__multadd>
 8006200:	ee08 0a10 	vmov	s16, r0
 8006204:	e7e7      	b.n	80061d6 <_dtoa_r+0xb26>
 8006206:	9b02      	ldr	r3, [sp, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	bfc8      	it	gt
 800620c:	461d      	movgt	r5, r3
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	bfd8      	it	le
 8006212:	2501      	movle	r5, #1
 8006214:	441d      	add	r5, r3
 8006216:	f04f 0800 	mov.w	r8, #0
 800621a:	ee18 1a10 	vmov	r1, s16
 800621e:	2201      	movs	r2, #1
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fa5f 	bl	80066e4 <__lshift>
 8006226:	4631      	mov	r1, r6
 8006228:	ee08 0a10 	vmov	s16, r0
 800622c:	f000 faca 	bl	80067c4 <__mcmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	dc91      	bgt.n	8006158 <_dtoa_r+0xaa8>
 8006234:	d102      	bne.n	800623c <_dtoa_r+0xb8c>
 8006236:	f01a 0f01 	tst.w	sl, #1
 800623a:	d18d      	bne.n	8006158 <_dtoa_r+0xaa8>
 800623c:	462b      	mov	r3, r5
 800623e:	461d      	mov	r5, r3
 8006240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006244:	2a30      	cmp	r2, #48	; 0x30
 8006246:	d0fa      	beq.n	800623e <_dtoa_r+0xb8e>
 8006248:	e6d7      	b.n	8005ffa <_dtoa_r+0x94a>
 800624a:	9a01      	ldr	r2, [sp, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d184      	bne.n	800615a <_dtoa_r+0xaaa>
 8006250:	9b00      	ldr	r3, [sp, #0]
 8006252:	3301      	adds	r3, #1
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	2331      	movs	r3, #49	; 0x31
 8006258:	7013      	strb	r3, [r2, #0]
 800625a:	e6ce      	b.n	8005ffa <_dtoa_r+0x94a>
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <_dtoa_r+0xbd4>)
 800625e:	f7ff ba95 	b.w	800578c <_dtoa_r+0xdc>
 8006262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006264:	2b00      	cmp	r3, #0
 8006266:	f47f aa6e 	bne.w	8005746 <_dtoa_r+0x96>
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <_dtoa_r+0xbd8>)
 800626c:	f7ff ba8e 	b.w	800578c <_dtoa_r+0xdc>
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	dcae      	bgt.n	80061d4 <_dtoa_r+0xb24>
 8006276:	9b06      	ldr	r3, [sp, #24]
 8006278:	2b02      	cmp	r3, #2
 800627a:	f73f aea8 	bgt.w	8005fce <_dtoa_r+0x91e>
 800627e:	e7a9      	b.n	80061d4 <_dtoa_r+0xb24>
 8006280:	08007bbf 	.word	0x08007bbf
 8006284:	08007b1c 	.word	0x08007b1c
 8006288:	08007b40 	.word	0x08007b40

0800628c <_localeconv_r>:
 800628c:	4800      	ldr	r0, [pc, #0]	; (8006290 <_localeconv_r+0x4>)
 800628e:	4770      	bx	lr
 8006290:	20000160 	.word	0x20000160

08006294 <malloc>:
 8006294:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <malloc+0xc>)
 8006296:	4601      	mov	r1, r0
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f000 bc17 	b.w	8006acc <_malloc_r>
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c

080062a4 <memcpy>:
 80062a4:	440a      	add	r2, r1
 80062a6:	4291      	cmp	r1, r2
 80062a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ac:	d100      	bne.n	80062b0 <memcpy+0xc>
 80062ae:	4770      	bx	lr
 80062b0:	b510      	push	{r4, lr}
 80062b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ba:	4291      	cmp	r1, r2
 80062bc:	d1f9      	bne.n	80062b2 <memcpy+0xe>
 80062be:	bd10      	pop	{r4, pc}

080062c0 <_Balloc>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062c4:	4604      	mov	r4, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	b976      	cbnz	r6, 80062e8 <_Balloc+0x28>
 80062ca:	2010      	movs	r0, #16
 80062cc:	f7ff ffe2 	bl	8006294 <malloc>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6260      	str	r0, [r4, #36]	; 0x24
 80062d4:	b920      	cbnz	r0, 80062e0 <_Balloc+0x20>
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <_Balloc+0x78>)
 80062d8:	4818      	ldr	r0, [pc, #96]	; (800633c <_Balloc+0x7c>)
 80062da:	2166      	movs	r1, #102	; 0x66
 80062dc:	f000 fdd6 	bl	8006e8c <__assert_func>
 80062e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e4:	6006      	str	r6, [r0, #0]
 80062e6:	60c6      	str	r6, [r0, #12]
 80062e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062ea:	68f3      	ldr	r3, [r6, #12]
 80062ec:	b183      	cbz	r3, 8006310 <_Balloc+0x50>
 80062ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062f6:	b9b8      	cbnz	r0, 8006328 <_Balloc+0x68>
 80062f8:	2101      	movs	r1, #1
 80062fa:	fa01 f605 	lsl.w	r6, r1, r5
 80062fe:	1d72      	adds	r2, r6, #5
 8006300:	0092      	lsls	r2, r2, #2
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fb60 	bl	80069c8 <_calloc_r>
 8006308:	b160      	cbz	r0, 8006324 <_Balloc+0x64>
 800630a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800630e:	e00e      	b.n	800632e <_Balloc+0x6e>
 8006310:	2221      	movs	r2, #33	; 0x21
 8006312:	2104      	movs	r1, #4
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fb57 	bl	80069c8 <_calloc_r>
 800631a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800631c:	60f0      	str	r0, [r6, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e4      	bne.n	80062ee <_Balloc+0x2e>
 8006324:	2000      	movs	r0, #0
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	6802      	ldr	r2, [r0, #0]
 800632a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800632e:	2300      	movs	r3, #0
 8006330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006334:	e7f7      	b.n	8006326 <_Balloc+0x66>
 8006336:	bf00      	nop
 8006338:	08007b4d 	.word	0x08007b4d
 800633c:	08007bd0 	.word	0x08007bd0

08006340 <_Bfree>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	b976      	cbnz	r6, 8006368 <_Bfree+0x28>
 800634a:	2010      	movs	r0, #16
 800634c:	f7ff ffa2 	bl	8006294 <malloc>
 8006350:	4602      	mov	r2, r0
 8006352:	6268      	str	r0, [r5, #36]	; 0x24
 8006354:	b920      	cbnz	r0, 8006360 <_Bfree+0x20>
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <_Bfree+0x3c>)
 8006358:	4809      	ldr	r0, [pc, #36]	; (8006380 <_Bfree+0x40>)
 800635a:	218a      	movs	r1, #138	; 0x8a
 800635c:	f000 fd96 	bl	8006e8c <__assert_func>
 8006360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006364:	6006      	str	r6, [r0, #0]
 8006366:	60c6      	str	r6, [r0, #12]
 8006368:	b13c      	cbz	r4, 800637a <_Bfree+0x3a>
 800636a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800636c:	6862      	ldr	r2, [r4, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006374:	6021      	str	r1, [r4, #0]
 8006376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	08007b4d 	.word	0x08007b4d
 8006380:	08007bd0 	.word	0x08007bd0

08006384 <__multadd>:
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	690d      	ldr	r5, [r1, #16]
 800638a:	4607      	mov	r7, r0
 800638c:	460c      	mov	r4, r1
 800638e:	461e      	mov	r6, r3
 8006390:	f101 0c14 	add.w	ip, r1, #20
 8006394:	2000      	movs	r0, #0
 8006396:	f8dc 3000 	ldr.w	r3, [ip]
 800639a:	b299      	uxth	r1, r3
 800639c:	fb02 6101 	mla	r1, r2, r1, r6
 80063a0:	0c1e      	lsrs	r6, r3, #16
 80063a2:	0c0b      	lsrs	r3, r1, #16
 80063a4:	fb02 3306 	mla	r3, r2, r6, r3
 80063a8:	b289      	uxth	r1, r1
 80063aa:	3001      	adds	r0, #1
 80063ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063b0:	4285      	cmp	r5, r0
 80063b2:	f84c 1b04 	str.w	r1, [ip], #4
 80063b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063ba:	dcec      	bgt.n	8006396 <__multadd+0x12>
 80063bc:	b30e      	cbz	r6, 8006402 <__multadd+0x7e>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dc19      	bgt.n	80063f8 <__multadd+0x74>
 80063c4:	6861      	ldr	r1, [r4, #4]
 80063c6:	4638      	mov	r0, r7
 80063c8:	3101      	adds	r1, #1
 80063ca:	f7ff ff79 	bl	80062c0 <_Balloc>
 80063ce:	4680      	mov	r8, r0
 80063d0:	b928      	cbnz	r0, 80063de <__multadd+0x5a>
 80063d2:	4602      	mov	r2, r0
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <__multadd+0x84>)
 80063d6:	480d      	ldr	r0, [pc, #52]	; (800640c <__multadd+0x88>)
 80063d8:	21b5      	movs	r1, #181	; 0xb5
 80063da:	f000 fd57 	bl	8006e8c <__assert_func>
 80063de:	6922      	ldr	r2, [r4, #16]
 80063e0:	3202      	adds	r2, #2
 80063e2:	f104 010c 	add.w	r1, r4, #12
 80063e6:	0092      	lsls	r2, r2, #2
 80063e8:	300c      	adds	r0, #12
 80063ea:	f7ff ff5b 	bl	80062a4 <memcpy>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4638      	mov	r0, r7
 80063f2:	f7ff ffa5 	bl	8006340 <_Bfree>
 80063f6:	4644      	mov	r4, r8
 80063f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063fc:	3501      	adds	r5, #1
 80063fe:	615e      	str	r6, [r3, #20]
 8006400:	6125      	str	r5, [r4, #16]
 8006402:	4620      	mov	r0, r4
 8006404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006408:	08007bbf 	.word	0x08007bbf
 800640c:	08007bd0 	.word	0x08007bd0

08006410 <__hi0bits>:
 8006410:	0c03      	lsrs	r3, r0, #16
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	b9d3      	cbnz	r3, 800644c <__hi0bits+0x3c>
 8006416:	0400      	lsls	r0, r0, #16
 8006418:	2310      	movs	r3, #16
 800641a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800641e:	bf04      	itt	eq
 8006420:	0200      	lsleq	r0, r0, #8
 8006422:	3308      	addeq	r3, #8
 8006424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006428:	bf04      	itt	eq
 800642a:	0100      	lsleq	r0, r0, #4
 800642c:	3304      	addeq	r3, #4
 800642e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006432:	bf04      	itt	eq
 8006434:	0080      	lsleq	r0, r0, #2
 8006436:	3302      	addeq	r3, #2
 8006438:	2800      	cmp	r0, #0
 800643a:	db05      	blt.n	8006448 <__hi0bits+0x38>
 800643c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006440:	f103 0301 	add.w	r3, r3, #1
 8006444:	bf08      	it	eq
 8006446:	2320      	moveq	r3, #32
 8006448:	4618      	mov	r0, r3
 800644a:	4770      	bx	lr
 800644c:	2300      	movs	r3, #0
 800644e:	e7e4      	b.n	800641a <__hi0bits+0xa>

08006450 <__lo0bits>:
 8006450:	6803      	ldr	r3, [r0, #0]
 8006452:	f013 0207 	ands.w	r2, r3, #7
 8006456:	4601      	mov	r1, r0
 8006458:	d00b      	beq.n	8006472 <__lo0bits+0x22>
 800645a:	07da      	lsls	r2, r3, #31
 800645c:	d423      	bmi.n	80064a6 <__lo0bits+0x56>
 800645e:	0798      	lsls	r0, r3, #30
 8006460:	bf49      	itett	mi
 8006462:	085b      	lsrmi	r3, r3, #1
 8006464:	089b      	lsrpl	r3, r3, #2
 8006466:	2001      	movmi	r0, #1
 8006468:	600b      	strmi	r3, [r1, #0]
 800646a:	bf5c      	itt	pl
 800646c:	600b      	strpl	r3, [r1, #0]
 800646e:	2002      	movpl	r0, #2
 8006470:	4770      	bx	lr
 8006472:	b298      	uxth	r0, r3
 8006474:	b9a8      	cbnz	r0, 80064a2 <__lo0bits+0x52>
 8006476:	0c1b      	lsrs	r3, r3, #16
 8006478:	2010      	movs	r0, #16
 800647a:	b2da      	uxtb	r2, r3
 800647c:	b90a      	cbnz	r2, 8006482 <__lo0bits+0x32>
 800647e:	3008      	adds	r0, #8
 8006480:	0a1b      	lsrs	r3, r3, #8
 8006482:	071a      	lsls	r2, r3, #28
 8006484:	bf04      	itt	eq
 8006486:	091b      	lsreq	r3, r3, #4
 8006488:	3004      	addeq	r0, #4
 800648a:	079a      	lsls	r2, r3, #30
 800648c:	bf04      	itt	eq
 800648e:	089b      	lsreq	r3, r3, #2
 8006490:	3002      	addeq	r0, #2
 8006492:	07da      	lsls	r2, r3, #31
 8006494:	d403      	bmi.n	800649e <__lo0bits+0x4e>
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	f100 0001 	add.w	r0, r0, #1
 800649c:	d005      	beq.n	80064aa <__lo0bits+0x5a>
 800649e:	600b      	str	r3, [r1, #0]
 80064a0:	4770      	bx	lr
 80064a2:	4610      	mov	r0, r2
 80064a4:	e7e9      	b.n	800647a <__lo0bits+0x2a>
 80064a6:	2000      	movs	r0, #0
 80064a8:	4770      	bx	lr
 80064aa:	2020      	movs	r0, #32
 80064ac:	4770      	bx	lr
	...

080064b0 <__i2b>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	2101      	movs	r1, #1
 80064b6:	f7ff ff03 	bl	80062c0 <_Balloc>
 80064ba:	4602      	mov	r2, r0
 80064bc:	b928      	cbnz	r0, 80064ca <__i2b+0x1a>
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <__i2b+0x24>)
 80064c0:	4805      	ldr	r0, [pc, #20]	; (80064d8 <__i2b+0x28>)
 80064c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064c6:	f000 fce1 	bl	8006e8c <__assert_func>
 80064ca:	2301      	movs	r3, #1
 80064cc:	6144      	str	r4, [r0, #20]
 80064ce:	6103      	str	r3, [r0, #16]
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	bf00      	nop
 80064d4:	08007bbf 	.word	0x08007bbf
 80064d8:	08007bd0 	.word	0x08007bd0

080064dc <__multiply>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	4691      	mov	r9, r2
 80064e2:	690a      	ldr	r2, [r1, #16]
 80064e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	bfb8      	it	lt
 80064ec:	460b      	movlt	r3, r1
 80064ee:	460c      	mov	r4, r1
 80064f0:	bfbc      	itt	lt
 80064f2:	464c      	movlt	r4, r9
 80064f4:	4699      	movlt	r9, r3
 80064f6:	6927      	ldr	r7, [r4, #16]
 80064f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064fc:	68a3      	ldr	r3, [r4, #8]
 80064fe:	6861      	ldr	r1, [r4, #4]
 8006500:	eb07 060a 	add.w	r6, r7, sl
 8006504:	42b3      	cmp	r3, r6
 8006506:	b085      	sub	sp, #20
 8006508:	bfb8      	it	lt
 800650a:	3101      	addlt	r1, #1
 800650c:	f7ff fed8 	bl	80062c0 <_Balloc>
 8006510:	b930      	cbnz	r0, 8006520 <__multiply+0x44>
 8006512:	4602      	mov	r2, r0
 8006514:	4b44      	ldr	r3, [pc, #272]	; (8006628 <__multiply+0x14c>)
 8006516:	4845      	ldr	r0, [pc, #276]	; (800662c <__multiply+0x150>)
 8006518:	f240 115d 	movw	r1, #349	; 0x15d
 800651c:	f000 fcb6 	bl	8006e8c <__assert_func>
 8006520:	f100 0514 	add.w	r5, r0, #20
 8006524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006528:	462b      	mov	r3, r5
 800652a:	2200      	movs	r2, #0
 800652c:	4543      	cmp	r3, r8
 800652e:	d321      	bcc.n	8006574 <__multiply+0x98>
 8006530:	f104 0314 	add.w	r3, r4, #20
 8006534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006538:	f109 0314 	add.w	r3, r9, #20
 800653c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006540:	9202      	str	r2, [sp, #8]
 8006542:	1b3a      	subs	r2, r7, r4
 8006544:	3a15      	subs	r2, #21
 8006546:	f022 0203 	bic.w	r2, r2, #3
 800654a:	3204      	adds	r2, #4
 800654c:	f104 0115 	add.w	r1, r4, #21
 8006550:	428f      	cmp	r7, r1
 8006552:	bf38      	it	cc
 8006554:	2204      	movcc	r2, #4
 8006556:	9201      	str	r2, [sp, #4]
 8006558:	9a02      	ldr	r2, [sp, #8]
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	429a      	cmp	r2, r3
 800655e:	d80c      	bhi.n	800657a <__multiply+0x9e>
 8006560:	2e00      	cmp	r6, #0
 8006562:	dd03      	ble.n	800656c <__multiply+0x90>
 8006564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006568:	2b00      	cmp	r3, #0
 800656a:	d05a      	beq.n	8006622 <__multiply+0x146>
 800656c:	6106      	str	r6, [r0, #16]
 800656e:	b005      	add	sp, #20
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	f843 2b04 	str.w	r2, [r3], #4
 8006578:	e7d8      	b.n	800652c <__multiply+0x50>
 800657a:	f8b3 a000 	ldrh.w	sl, [r3]
 800657e:	f1ba 0f00 	cmp.w	sl, #0
 8006582:	d024      	beq.n	80065ce <__multiply+0xf2>
 8006584:	f104 0e14 	add.w	lr, r4, #20
 8006588:	46a9      	mov	r9, r5
 800658a:	f04f 0c00 	mov.w	ip, #0
 800658e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006592:	f8d9 1000 	ldr.w	r1, [r9]
 8006596:	fa1f fb82 	uxth.w	fp, r2
 800659a:	b289      	uxth	r1, r1
 800659c:	fb0a 110b 	mla	r1, sl, fp, r1
 80065a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80065a4:	f8d9 2000 	ldr.w	r2, [r9]
 80065a8:	4461      	add	r1, ip
 80065aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80065b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065b6:	b289      	uxth	r1, r1
 80065b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065bc:	4577      	cmp	r7, lr
 80065be:	f849 1b04 	str.w	r1, [r9], #4
 80065c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065c6:	d8e2      	bhi.n	800658e <__multiply+0xb2>
 80065c8:	9a01      	ldr	r2, [sp, #4]
 80065ca:	f845 c002 	str.w	ip, [r5, r2]
 80065ce:	9a03      	ldr	r2, [sp, #12]
 80065d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065d4:	3304      	adds	r3, #4
 80065d6:	f1b9 0f00 	cmp.w	r9, #0
 80065da:	d020      	beq.n	800661e <__multiply+0x142>
 80065dc:	6829      	ldr	r1, [r5, #0]
 80065de:	f104 0c14 	add.w	ip, r4, #20
 80065e2:	46ae      	mov	lr, r5
 80065e4:	f04f 0a00 	mov.w	sl, #0
 80065e8:	f8bc b000 	ldrh.w	fp, [ip]
 80065ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065f0:	fb09 220b 	mla	r2, r9, fp, r2
 80065f4:	4492      	add	sl, r2
 80065f6:	b289      	uxth	r1, r1
 80065f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80065fc:	f84e 1b04 	str.w	r1, [lr], #4
 8006600:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006604:	f8be 1000 	ldrh.w	r1, [lr]
 8006608:	0c12      	lsrs	r2, r2, #16
 800660a:	fb09 1102 	mla	r1, r9, r2, r1
 800660e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006612:	4567      	cmp	r7, ip
 8006614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006618:	d8e6      	bhi.n	80065e8 <__multiply+0x10c>
 800661a:	9a01      	ldr	r2, [sp, #4]
 800661c:	50a9      	str	r1, [r5, r2]
 800661e:	3504      	adds	r5, #4
 8006620:	e79a      	b.n	8006558 <__multiply+0x7c>
 8006622:	3e01      	subs	r6, #1
 8006624:	e79c      	b.n	8006560 <__multiply+0x84>
 8006626:	bf00      	nop
 8006628:	08007bbf 	.word	0x08007bbf
 800662c:	08007bd0 	.word	0x08007bd0

08006630 <__pow5mult>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	4615      	mov	r5, r2
 8006636:	f012 0203 	ands.w	r2, r2, #3
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	d007      	beq.n	8006650 <__pow5mult+0x20>
 8006640:	4c25      	ldr	r4, [pc, #148]	; (80066d8 <__pow5mult+0xa8>)
 8006642:	3a01      	subs	r2, #1
 8006644:	2300      	movs	r3, #0
 8006646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800664a:	f7ff fe9b 	bl	8006384 <__multadd>
 800664e:	4607      	mov	r7, r0
 8006650:	10ad      	asrs	r5, r5, #2
 8006652:	d03d      	beq.n	80066d0 <__pow5mult+0xa0>
 8006654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006656:	b97c      	cbnz	r4, 8006678 <__pow5mult+0x48>
 8006658:	2010      	movs	r0, #16
 800665a:	f7ff fe1b 	bl	8006294 <malloc>
 800665e:	4602      	mov	r2, r0
 8006660:	6270      	str	r0, [r6, #36]	; 0x24
 8006662:	b928      	cbnz	r0, 8006670 <__pow5mult+0x40>
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <__pow5mult+0xac>)
 8006666:	481e      	ldr	r0, [pc, #120]	; (80066e0 <__pow5mult+0xb0>)
 8006668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800666c:	f000 fc0e 	bl	8006e8c <__assert_func>
 8006670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006674:	6004      	str	r4, [r0, #0]
 8006676:	60c4      	str	r4, [r0, #12]
 8006678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800667c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006680:	b94c      	cbnz	r4, 8006696 <__pow5mult+0x66>
 8006682:	f240 2171 	movw	r1, #625	; 0x271
 8006686:	4630      	mov	r0, r6
 8006688:	f7ff ff12 	bl	80064b0 <__i2b>
 800668c:	2300      	movs	r3, #0
 800668e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006692:	4604      	mov	r4, r0
 8006694:	6003      	str	r3, [r0, #0]
 8006696:	f04f 0900 	mov.w	r9, #0
 800669a:	07eb      	lsls	r3, r5, #31
 800669c:	d50a      	bpl.n	80066b4 <__pow5mult+0x84>
 800669e:	4639      	mov	r1, r7
 80066a0:	4622      	mov	r2, r4
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff ff1a 	bl	80064dc <__multiply>
 80066a8:	4639      	mov	r1, r7
 80066aa:	4680      	mov	r8, r0
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7ff fe47 	bl	8006340 <_Bfree>
 80066b2:	4647      	mov	r7, r8
 80066b4:	106d      	asrs	r5, r5, #1
 80066b6:	d00b      	beq.n	80066d0 <__pow5mult+0xa0>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	b938      	cbnz	r0, 80066cc <__pow5mult+0x9c>
 80066bc:	4622      	mov	r2, r4
 80066be:	4621      	mov	r1, r4
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff ff0b 	bl	80064dc <__multiply>
 80066c6:	6020      	str	r0, [r4, #0]
 80066c8:	f8c0 9000 	str.w	r9, [r0]
 80066cc:	4604      	mov	r4, r0
 80066ce:	e7e4      	b.n	800669a <__pow5mult+0x6a>
 80066d0:	4638      	mov	r0, r7
 80066d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d6:	bf00      	nop
 80066d8:	08007d20 	.word	0x08007d20
 80066dc:	08007b4d 	.word	0x08007b4d
 80066e0:	08007bd0 	.word	0x08007bd0

080066e4 <__lshift>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	460c      	mov	r4, r1
 80066ea:	6849      	ldr	r1, [r1, #4]
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	4607      	mov	r7, r0
 80066f6:	4691      	mov	r9, r2
 80066f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066fc:	f108 0601 	add.w	r6, r8, #1
 8006700:	42b3      	cmp	r3, r6
 8006702:	db0b      	blt.n	800671c <__lshift+0x38>
 8006704:	4638      	mov	r0, r7
 8006706:	f7ff fddb 	bl	80062c0 <_Balloc>
 800670a:	4605      	mov	r5, r0
 800670c:	b948      	cbnz	r0, 8006722 <__lshift+0x3e>
 800670e:	4602      	mov	r2, r0
 8006710:	4b2a      	ldr	r3, [pc, #168]	; (80067bc <__lshift+0xd8>)
 8006712:	482b      	ldr	r0, [pc, #172]	; (80067c0 <__lshift+0xdc>)
 8006714:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006718:	f000 fbb8 	bl	8006e8c <__assert_func>
 800671c:	3101      	adds	r1, #1
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	e7ee      	b.n	8006700 <__lshift+0x1c>
 8006722:	2300      	movs	r3, #0
 8006724:	f100 0114 	add.w	r1, r0, #20
 8006728:	f100 0210 	add.w	r2, r0, #16
 800672c:	4618      	mov	r0, r3
 800672e:	4553      	cmp	r3, sl
 8006730:	db37      	blt.n	80067a2 <__lshift+0xbe>
 8006732:	6920      	ldr	r0, [r4, #16]
 8006734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006738:	f104 0314 	add.w	r3, r4, #20
 800673c:	f019 091f 	ands.w	r9, r9, #31
 8006740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006748:	d02f      	beq.n	80067aa <__lshift+0xc6>
 800674a:	f1c9 0e20 	rsb	lr, r9, #32
 800674e:	468a      	mov	sl, r1
 8006750:	f04f 0c00 	mov.w	ip, #0
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	fa02 f209 	lsl.w	r2, r2, r9
 800675a:	ea42 020c 	orr.w	r2, r2, ip
 800675e:	f84a 2b04 	str.w	r2, [sl], #4
 8006762:	f853 2b04 	ldr.w	r2, [r3], #4
 8006766:	4298      	cmp	r0, r3
 8006768:	fa22 fc0e 	lsr.w	ip, r2, lr
 800676c:	d8f2      	bhi.n	8006754 <__lshift+0x70>
 800676e:	1b03      	subs	r3, r0, r4
 8006770:	3b15      	subs	r3, #21
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	3304      	adds	r3, #4
 8006778:	f104 0215 	add.w	r2, r4, #21
 800677c:	4290      	cmp	r0, r2
 800677e:	bf38      	it	cc
 8006780:	2304      	movcc	r3, #4
 8006782:	f841 c003 	str.w	ip, [r1, r3]
 8006786:	f1bc 0f00 	cmp.w	ip, #0
 800678a:	d001      	beq.n	8006790 <__lshift+0xac>
 800678c:	f108 0602 	add.w	r6, r8, #2
 8006790:	3e01      	subs	r6, #1
 8006792:	4638      	mov	r0, r7
 8006794:	612e      	str	r6, [r5, #16]
 8006796:	4621      	mov	r1, r4
 8006798:	f7ff fdd2 	bl	8006340 <_Bfree>
 800679c:	4628      	mov	r0, r5
 800679e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80067a6:	3301      	adds	r3, #1
 80067a8:	e7c1      	b.n	800672e <__lshift+0x4a>
 80067aa:	3904      	subs	r1, #4
 80067ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80067b4:	4298      	cmp	r0, r3
 80067b6:	d8f9      	bhi.n	80067ac <__lshift+0xc8>
 80067b8:	e7ea      	b.n	8006790 <__lshift+0xac>
 80067ba:	bf00      	nop
 80067bc:	08007bbf 	.word	0x08007bbf
 80067c0:	08007bd0 	.word	0x08007bd0

080067c4 <__mcmp>:
 80067c4:	b530      	push	{r4, r5, lr}
 80067c6:	6902      	ldr	r2, [r0, #16]
 80067c8:	690c      	ldr	r4, [r1, #16]
 80067ca:	1b12      	subs	r2, r2, r4
 80067cc:	d10e      	bne.n	80067ec <__mcmp+0x28>
 80067ce:	f100 0314 	add.w	r3, r0, #20
 80067d2:	3114      	adds	r1, #20
 80067d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067e4:	42a5      	cmp	r5, r4
 80067e6:	d003      	beq.n	80067f0 <__mcmp+0x2c>
 80067e8:	d305      	bcc.n	80067f6 <__mcmp+0x32>
 80067ea:	2201      	movs	r2, #1
 80067ec:	4610      	mov	r0, r2
 80067ee:	bd30      	pop	{r4, r5, pc}
 80067f0:	4283      	cmp	r3, r0
 80067f2:	d3f3      	bcc.n	80067dc <__mcmp+0x18>
 80067f4:	e7fa      	b.n	80067ec <__mcmp+0x28>
 80067f6:	f04f 32ff 	mov.w	r2, #4294967295
 80067fa:	e7f7      	b.n	80067ec <__mcmp+0x28>

080067fc <__mdiff>:
 80067fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	460c      	mov	r4, r1
 8006802:	4606      	mov	r6, r0
 8006804:	4611      	mov	r1, r2
 8006806:	4620      	mov	r0, r4
 8006808:	4690      	mov	r8, r2
 800680a:	f7ff ffdb 	bl	80067c4 <__mcmp>
 800680e:	1e05      	subs	r5, r0, #0
 8006810:	d110      	bne.n	8006834 <__mdiff+0x38>
 8006812:	4629      	mov	r1, r5
 8006814:	4630      	mov	r0, r6
 8006816:	f7ff fd53 	bl	80062c0 <_Balloc>
 800681a:	b930      	cbnz	r0, 800682a <__mdiff+0x2e>
 800681c:	4b3a      	ldr	r3, [pc, #232]	; (8006908 <__mdiff+0x10c>)
 800681e:	4602      	mov	r2, r0
 8006820:	f240 2132 	movw	r1, #562	; 0x232
 8006824:	4839      	ldr	r0, [pc, #228]	; (800690c <__mdiff+0x110>)
 8006826:	f000 fb31 	bl	8006e8c <__assert_func>
 800682a:	2301      	movs	r3, #1
 800682c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	bfa4      	itt	ge
 8006836:	4643      	movge	r3, r8
 8006838:	46a0      	movge	r8, r4
 800683a:	4630      	mov	r0, r6
 800683c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006840:	bfa6      	itte	ge
 8006842:	461c      	movge	r4, r3
 8006844:	2500      	movge	r5, #0
 8006846:	2501      	movlt	r5, #1
 8006848:	f7ff fd3a 	bl	80062c0 <_Balloc>
 800684c:	b920      	cbnz	r0, 8006858 <__mdiff+0x5c>
 800684e:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <__mdiff+0x10c>)
 8006850:	4602      	mov	r2, r0
 8006852:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006856:	e7e5      	b.n	8006824 <__mdiff+0x28>
 8006858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800685c:	6926      	ldr	r6, [r4, #16]
 800685e:	60c5      	str	r5, [r0, #12]
 8006860:	f104 0914 	add.w	r9, r4, #20
 8006864:	f108 0514 	add.w	r5, r8, #20
 8006868:	f100 0e14 	add.w	lr, r0, #20
 800686c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006874:	f108 0210 	add.w	r2, r8, #16
 8006878:	46f2      	mov	sl, lr
 800687a:	2100      	movs	r1, #0
 800687c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006884:	fa1f f883 	uxth.w	r8, r3
 8006888:	fa11 f18b 	uxtah	r1, r1, fp
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	eba1 0808 	sub.w	r8, r1, r8
 8006892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800689a:	fa1f f888 	uxth.w	r8, r8
 800689e:	1419      	asrs	r1, r3, #16
 80068a0:	454e      	cmp	r6, r9
 80068a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80068a6:	f84a 3b04 	str.w	r3, [sl], #4
 80068aa:	d8e7      	bhi.n	800687c <__mdiff+0x80>
 80068ac:	1b33      	subs	r3, r6, r4
 80068ae:	3b15      	subs	r3, #21
 80068b0:	f023 0303 	bic.w	r3, r3, #3
 80068b4:	3304      	adds	r3, #4
 80068b6:	3415      	adds	r4, #21
 80068b8:	42a6      	cmp	r6, r4
 80068ba:	bf38      	it	cc
 80068bc:	2304      	movcc	r3, #4
 80068be:	441d      	add	r5, r3
 80068c0:	4473      	add	r3, lr
 80068c2:	469e      	mov	lr, r3
 80068c4:	462e      	mov	r6, r5
 80068c6:	4566      	cmp	r6, ip
 80068c8:	d30e      	bcc.n	80068e8 <__mdiff+0xec>
 80068ca:	f10c 0203 	add.w	r2, ip, #3
 80068ce:	1b52      	subs	r2, r2, r5
 80068d0:	f022 0203 	bic.w	r2, r2, #3
 80068d4:	3d03      	subs	r5, #3
 80068d6:	45ac      	cmp	ip, r5
 80068d8:	bf38      	it	cc
 80068da:	2200      	movcc	r2, #0
 80068dc:	441a      	add	r2, r3
 80068de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068e2:	b17b      	cbz	r3, 8006904 <__mdiff+0x108>
 80068e4:	6107      	str	r7, [r0, #16]
 80068e6:	e7a3      	b.n	8006830 <__mdiff+0x34>
 80068e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80068ec:	fa11 f288 	uxtah	r2, r1, r8
 80068f0:	1414      	asrs	r4, r2, #16
 80068f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068f6:	b292      	uxth	r2, r2
 80068f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80068fc:	f84e 2b04 	str.w	r2, [lr], #4
 8006900:	1421      	asrs	r1, r4, #16
 8006902:	e7e0      	b.n	80068c6 <__mdiff+0xca>
 8006904:	3f01      	subs	r7, #1
 8006906:	e7ea      	b.n	80068de <__mdiff+0xe2>
 8006908:	08007bbf 	.word	0x08007bbf
 800690c:	08007bd0 	.word	0x08007bd0

08006910 <__d2b>:
 8006910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006914:	4689      	mov	r9, r1
 8006916:	2101      	movs	r1, #1
 8006918:	ec57 6b10 	vmov	r6, r7, d0
 800691c:	4690      	mov	r8, r2
 800691e:	f7ff fccf 	bl	80062c0 <_Balloc>
 8006922:	4604      	mov	r4, r0
 8006924:	b930      	cbnz	r0, 8006934 <__d2b+0x24>
 8006926:	4602      	mov	r2, r0
 8006928:	4b25      	ldr	r3, [pc, #148]	; (80069c0 <__d2b+0xb0>)
 800692a:	4826      	ldr	r0, [pc, #152]	; (80069c4 <__d2b+0xb4>)
 800692c:	f240 310a 	movw	r1, #778	; 0x30a
 8006930:	f000 faac 	bl	8006e8c <__assert_func>
 8006934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800693c:	bb35      	cbnz	r5, 800698c <__d2b+0x7c>
 800693e:	2e00      	cmp	r6, #0
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	d028      	beq.n	8006996 <__d2b+0x86>
 8006944:	4668      	mov	r0, sp
 8006946:	9600      	str	r6, [sp, #0]
 8006948:	f7ff fd82 	bl	8006450 <__lo0bits>
 800694c:	9900      	ldr	r1, [sp, #0]
 800694e:	b300      	cbz	r0, 8006992 <__d2b+0x82>
 8006950:	9a01      	ldr	r2, [sp, #4]
 8006952:	f1c0 0320 	rsb	r3, r0, #32
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	430b      	orrs	r3, r1
 800695c:	40c2      	lsrs	r2, r0
 800695e:	6163      	str	r3, [r4, #20]
 8006960:	9201      	str	r2, [sp, #4]
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	61a3      	str	r3, [r4, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	bf14      	ite	ne
 800696a:	2202      	movne	r2, #2
 800696c:	2201      	moveq	r2, #1
 800696e:	6122      	str	r2, [r4, #16]
 8006970:	b1d5      	cbz	r5, 80069a8 <__d2b+0x98>
 8006972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006976:	4405      	add	r5, r0
 8006978:	f8c9 5000 	str.w	r5, [r9]
 800697c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006980:	f8c8 0000 	str.w	r0, [r8]
 8006984:	4620      	mov	r0, r4
 8006986:	b003      	add	sp, #12
 8006988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800698c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006990:	e7d5      	b.n	800693e <__d2b+0x2e>
 8006992:	6161      	str	r1, [r4, #20]
 8006994:	e7e5      	b.n	8006962 <__d2b+0x52>
 8006996:	a801      	add	r0, sp, #4
 8006998:	f7ff fd5a 	bl	8006450 <__lo0bits>
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	6163      	str	r3, [r4, #20]
 80069a0:	2201      	movs	r2, #1
 80069a2:	6122      	str	r2, [r4, #16]
 80069a4:	3020      	adds	r0, #32
 80069a6:	e7e3      	b.n	8006970 <__d2b+0x60>
 80069a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069b0:	f8c9 0000 	str.w	r0, [r9]
 80069b4:	6918      	ldr	r0, [r3, #16]
 80069b6:	f7ff fd2b 	bl	8006410 <__hi0bits>
 80069ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069be:	e7df      	b.n	8006980 <__d2b+0x70>
 80069c0:	08007bbf 	.word	0x08007bbf
 80069c4:	08007bd0 	.word	0x08007bd0

080069c8 <_calloc_r>:
 80069c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ca:	fba1 2402 	umull	r2, r4, r1, r2
 80069ce:	b94c      	cbnz	r4, 80069e4 <_calloc_r+0x1c>
 80069d0:	4611      	mov	r1, r2
 80069d2:	9201      	str	r2, [sp, #4]
 80069d4:	f000 f87a 	bl	8006acc <_malloc_r>
 80069d8:	9a01      	ldr	r2, [sp, #4]
 80069da:	4605      	mov	r5, r0
 80069dc:	b930      	cbnz	r0, 80069ec <_calloc_r+0x24>
 80069de:	4628      	mov	r0, r5
 80069e0:	b003      	add	sp, #12
 80069e2:	bd30      	pop	{r4, r5, pc}
 80069e4:	220c      	movs	r2, #12
 80069e6:	6002      	str	r2, [r0, #0]
 80069e8:	2500      	movs	r5, #0
 80069ea:	e7f8      	b.n	80069de <_calloc_r+0x16>
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7fe f941 	bl	8004c74 <memset>
 80069f2:	e7f4      	b.n	80069de <_calloc_r+0x16>

080069f4 <_free_r>:
 80069f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f6:	2900      	cmp	r1, #0
 80069f8:	d044      	beq.n	8006a84 <_free_r+0x90>
 80069fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fe:	9001      	str	r0, [sp, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f1a1 0404 	sub.w	r4, r1, #4
 8006a06:	bfb8      	it	lt
 8006a08:	18e4      	addlt	r4, r4, r3
 8006a0a:	f000 fa9b 	bl	8006f44 <__malloc_lock>
 8006a0e:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <_free_r+0x94>)
 8006a10:	9801      	ldr	r0, [sp, #4]
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	b933      	cbnz	r3, 8006a24 <_free_r+0x30>
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	6014      	str	r4, [r2, #0]
 8006a1a:	b003      	add	sp, #12
 8006a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a20:	f000 ba96 	b.w	8006f50 <__malloc_unlock>
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d908      	bls.n	8006a3a <_free_r+0x46>
 8006a28:	6825      	ldr	r5, [r4, #0]
 8006a2a:	1961      	adds	r1, r4, r5
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	bf01      	itttt	eq
 8006a30:	6819      	ldreq	r1, [r3, #0]
 8006a32:	685b      	ldreq	r3, [r3, #4]
 8006a34:	1949      	addeq	r1, r1, r5
 8006a36:	6021      	streq	r1, [r4, #0]
 8006a38:	e7ed      	b.n	8006a16 <_free_r+0x22>
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	b10b      	cbz	r3, 8006a44 <_free_r+0x50>
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d9fa      	bls.n	8006a3a <_free_r+0x46>
 8006a44:	6811      	ldr	r1, [r2, #0]
 8006a46:	1855      	adds	r5, r2, r1
 8006a48:	42a5      	cmp	r5, r4
 8006a4a:	d10b      	bne.n	8006a64 <_free_r+0x70>
 8006a4c:	6824      	ldr	r4, [r4, #0]
 8006a4e:	4421      	add	r1, r4
 8006a50:	1854      	adds	r4, r2, r1
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	6011      	str	r1, [r2, #0]
 8006a56:	d1e0      	bne.n	8006a1a <_free_r+0x26>
 8006a58:	681c      	ldr	r4, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	6053      	str	r3, [r2, #4]
 8006a5e:	4421      	add	r1, r4
 8006a60:	6011      	str	r1, [r2, #0]
 8006a62:	e7da      	b.n	8006a1a <_free_r+0x26>
 8006a64:	d902      	bls.n	8006a6c <_free_r+0x78>
 8006a66:	230c      	movs	r3, #12
 8006a68:	6003      	str	r3, [r0, #0]
 8006a6a:	e7d6      	b.n	8006a1a <_free_r+0x26>
 8006a6c:	6825      	ldr	r5, [r4, #0]
 8006a6e:	1961      	adds	r1, r4, r5
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf04      	itt	eq
 8006a74:	6819      	ldreq	r1, [r3, #0]
 8006a76:	685b      	ldreq	r3, [r3, #4]
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	bf04      	itt	eq
 8006a7c:	1949      	addeq	r1, r1, r5
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	6054      	str	r4, [r2, #4]
 8006a82:	e7ca      	b.n	8006a1a <_free_r+0x26>
 8006a84:	b003      	add	sp, #12
 8006a86:	bd30      	pop	{r4, r5, pc}
 8006a88:	200002b4 	.word	0x200002b4

08006a8c <sbrk_aligned>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4e0e      	ldr	r6, [pc, #56]	; (8006ac8 <sbrk_aligned+0x3c>)
 8006a90:	460c      	mov	r4, r1
 8006a92:	6831      	ldr	r1, [r6, #0]
 8006a94:	4605      	mov	r5, r0
 8006a96:	b911      	cbnz	r1, 8006a9e <sbrk_aligned+0x12>
 8006a98:	f000 f9e8 	bl	8006e6c <_sbrk_r>
 8006a9c:	6030      	str	r0, [r6, #0]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f000 f9e3 	bl	8006e6c <_sbrk_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d00a      	beq.n	8006ac0 <sbrk_aligned+0x34>
 8006aaa:	1cc4      	adds	r4, r0, #3
 8006aac:	f024 0403 	bic.w	r4, r4, #3
 8006ab0:	42a0      	cmp	r0, r4
 8006ab2:	d007      	beq.n	8006ac4 <sbrk_aligned+0x38>
 8006ab4:	1a21      	subs	r1, r4, r0
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 f9d8 	bl	8006e6c <_sbrk_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d101      	bne.n	8006ac4 <sbrk_aligned+0x38>
 8006ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	200002b8 	.word	0x200002b8

08006acc <_malloc_r>:
 8006acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	1ccd      	adds	r5, r1, #3
 8006ad2:	f025 0503 	bic.w	r5, r5, #3
 8006ad6:	3508      	adds	r5, #8
 8006ad8:	2d0c      	cmp	r5, #12
 8006ada:	bf38      	it	cc
 8006adc:	250c      	movcc	r5, #12
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	db01      	blt.n	8006ae8 <_malloc_r+0x1c>
 8006ae4:	42a9      	cmp	r1, r5
 8006ae6:	d905      	bls.n	8006af4 <_malloc_r+0x28>
 8006ae8:	230c      	movs	r3, #12
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	2600      	movs	r6, #0
 8006aee:	4630      	mov	r0, r6
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	4e2e      	ldr	r6, [pc, #184]	; (8006bb0 <_malloc_r+0xe4>)
 8006af6:	f000 fa25 	bl	8006f44 <__malloc_lock>
 8006afa:	6833      	ldr	r3, [r6, #0]
 8006afc:	461c      	mov	r4, r3
 8006afe:	bb34      	cbnz	r4, 8006b4e <_malloc_r+0x82>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4638      	mov	r0, r7
 8006b04:	f7ff ffc2 	bl	8006a8c <sbrk_aligned>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	d14d      	bne.n	8006baa <_malloc_r+0xde>
 8006b0e:	6834      	ldr	r4, [r6, #0]
 8006b10:	4626      	mov	r6, r4
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d140      	bne.n	8006b98 <_malloc_r+0xcc>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	eb04 0803 	add.w	r8, r4, r3
 8006b20:	f000 f9a4 	bl	8006e6c <_sbrk_r>
 8006b24:	4580      	cmp	r8, r0
 8006b26:	d13a      	bne.n	8006b9e <_malloc_r+0xd2>
 8006b28:	6821      	ldr	r1, [r4, #0]
 8006b2a:	3503      	adds	r5, #3
 8006b2c:	1a6d      	subs	r5, r5, r1
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f7ff ffa5 	bl	8006a8c <sbrk_aligned>
 8006b42:	3001      	adds	r0, #1
 8006b44:	d02b      	beq.n	8006b9e <_malloc_r+0xd2>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	442b      	add	r3, r5
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	e00e      	b.n	8006b6c <_malloc_r+0xa0>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	1b52      	subs	r2, r2, r5
 8006b52:	d41e      	bmi.n	8006b92 <_malloc_r+0xc6>
 8006b54:	2a0b      	cmp	r2, #11
 8006b56:	d916      	bls.n	8006b86 <_malloc_r+0xba>
 8006b58:	1961      	adds	r1, r4, r5
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	6025      	str	r5, [r4, #0]
 8006b5e:	bf18      	it	ne
 8006b60:	6059      	strne	r1, [r3, #4]
 8006b62:	6863      	ldr	r3, [r4, #4]
 8006b64:	bf08      	it	eq
 8006b66:	6031      	streq	r1, [r6, #0]
 8006b68:	5162      	str	r2, [r4, r5]
 8006b6a:	604b      	str	r3, [r1, #4]
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f104 060b 	add.w	r6, r4, #11
 8006b72:	f000 f9ed 	bl	8006f50 <__malloc_unlock>
 8006b76:	f026 0607 	bic.w	r6, r6, #7
 8006b7a:	1d23      	adds	r3, r4, #4
 8006b7c:	1af2      	subs	r2, r6, r3
 8006b7e:	d0b6      	beq.n	8006aee <_malloc_r+0x22>
 8006b80:	1b9b      	subs	r3, r3, r6
 8006b82:	50a3      	str	r3, [r4, r2]
 8006b84:	e7b3      	b.n	8006aee <_malloc_r+0x22>
 8006b86:	6862      	ldr	r2, [r4, #4]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	bf0c      	ite	eq
 8006b8c:	6032      	streq	r2, [r6, #0]
 8006b8e:	605a      	strne	r2, [r3, #4]
 8006b90:	e7ec      	b.n	8006b6c <_malloc_r+0xa0>
 8006b92:	4623      	mov	r3, r4
 8006b94:	6864      	ldr	r4, [r4, #4]
 8006b96:	e7b2      	b.n	8006afe <_malloc_r+0x32>
 8006b98:	4634      	mov	r4, r6
 8006b9a:	6876      	ldr	r6, [r6, #4]
 8006b9c:	e7b9      	b.n	8006b12 <_malloc_r+0x46>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	f000 f9d4 	bl	8006f50 <__malloc_unlock>
 8006ba8:	e7a1      	b.n	8006aee <_malloc_r+0x22>
 8006baa:	6025      	str	r5, [r4, #0]
 8006bac:	e7de      	b.n	8006b6c <_malloc_r+0xa0>
 8006bae:	bf00      	nop
 8006bb0:	200002b4 	.word	0x200002b4

08006bb4 <__ssputs_r>:
 8006bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb8:	688e      	ldr	r6, [r1, #8]
 8006bba:	429e      	cmp	r6, r3
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	4690      	mov	r8, r2
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	d838      	bhi.n	8006c38 <__ssputs_r+0x84>
 8006bc6:	898a      	ldrh	r2, [r1, #12]
 8006bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bcc:	d032      	beq.n	8006c34 <__ssputs_r+0x80>
 8006bce:	6825      	ldr	r5, [r4, #0]
 8006bd0:	6909      	ldr	r1, [r1, #16]
 8006bd2:	eba5 0901 	sub.w	r9, r5, r1
 8006bd6:	6965      	ldr	r5, [r4, #20]
 8006bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006be0:	3301      	adds	r3, #1
 8006be2:	444b      	add	r3, r9
 8006be4:	106d      	asrs	r5, r5, #1
 8006be6:	429d      	cmp	r5, r3
 8006be8:	bf38      	it	cc
 8006bea:	461d      	movcc	r5, r3
 8006bec:	0553      	lsls	r3, r2, #21
 8006bee:	d531      	bpl.n	8006c54 <__ssputs_r+0xa0>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7ff ff6b 	bl	8006acc <_malloc_r>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	b950      	cbnz	r0, 8006c10 <__ssputs_r+0x5c>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	f8ca 3000 	str.w	r3, [sl]
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	6921      	ldr	r1, [r4, #16]
 8006c12:	464a      	mov	r2, r9
 8006c14:	f7ff fb46 	bl	80062a4 <memcpy>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	6126      	str	r6, [r4, #16]
 8006c26:	6165      	str	r5, [r4, #20]
 8006c28:	444e      	add	r6, r9
 8006c2a:	eba5 0509 	sub.w	r5, r5, r9
 8006c2e:	6026      	str	r6, [r4, #0]
 8006c30:	60a5      	str	r5, [r4, #8]
 8006c32:	463e      	mov	r6, r7
 8006c34:	42be      	cmp	r6, r7
 8006c36:	d900      	bls.n	8006c3a <__ssputs_r+0x86>
 8006c38:	463e      	mov	r6, r7
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4641      	mov	r1, r8
 8006c40:	f000 f966 	bl	8006f10 <memmove>
 8006c44:	68a3      	ldr	r3, [r4, #8]
 8006c46:	1b9b      	subs	r3, r3, r6
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	4433      	add	r3, r6
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	2000      	movs	r0, #0
 8006c52:	e7db      	b.n	8006c0c <__ssputs_r+0x58>
 8006c54:	462a      	mov	r2, r5
 8006c56:	f000 f981 	bl	8006f5c <_realloc_r>
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d1e1      	bne.n	8006c24 <__ssputs_r+0x70>
 8006c60:	6921      	ldr	r1, [r4, #16]
 8006c62:	4650      	mov	r0, sl
 8006c64:	f7ff fec6 	bl	80069f4 <_free_r>
 8006c68:	e7c7      	b.n	8006bfa <__ssputs_r+0x46>
	...

08006c6c <_svfiprintf_r>:
 8006c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	4698      	mov	r8, r3
 8006c72:	898b      	ldrh	r3, [r1, #12]
 8006c74:	061b      	lsls	r3, r3, #24
 8006c76:	b09d      	sub	sp, #116	; 0x74
 8006c78:	4607      	mov	r7, r0
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	d50e      	bpl.n	8006c9e <_svfiprintf_r+0x32>
 8006c80:	690b      	ldr	r3, [r1, #16]
 8006c82:	b963      	cbnz	r3, 8006c9e <_svfiprintf_r+0x32>
 8006c84:	2140      	movs	r1, #64	; 0x40
 8006c86:	f7ff ff21 	bl	8006acc <_malloc_r>
 8006c8a:	6028      	str	r0, [r5, #0]
 8006c8c:	6128      	str	r0, [r5, #16]
 8006c8e:	b920      	cbnz	r0, 8006c9a <_svfiprintf_r+0x2e>
 8006c90:	230c      	movs	r3, #12
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	e0d1      	b.n	8006e3e <_svfiprintf_r+0x1d2>
 8006c9a:	2340      	movs	r3, #64	; 0x40
 8006c9c:	616b      	str	r3, [r5, #20]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca2:	2320      	movs	r3, #32
 8006ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cac:	2330      	movs	r3, #48	; 0x30
 8006cae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e58 <_svfiprintf_r+0x1ec>
 8006cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb6:	f04f 0901 	mov.w	r9, #1
 8006cba:	4623      	mov	r3, r4
 8006cbc:	469a      	mov	sl, r3
 8006cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cc2:	b10a      	cbz	r2, 8006cc8 <_svfiprintf_r+0x5c>
 8006cc4:	2a25      	cmp	r2, #37	; 0x25
 8006cc6:	d1f9      	bne.n	8006cbc <_svfiprintf_r+0x50>
 8006cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ccc:	d00b      	beq.n	8006ce6 <_svfiprintf_r+0x7a>
 8006cce:	465b      	mov	r3, fp
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f7ff ff6d 	bl	8006bb4 <__ssputs_r>
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f000 80aa 	beq.w	8006e34 <_svfiprintf_r+0x1c8>
 8006ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce2:	445a      	add	r2, fp
 8006ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80a2 	beq.w	8006e34 <_svfiprintf_r+0x1c8>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cfa:	f10a 0a01 	add.w	sl, sl, #1
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	9307      	str	r3, [sp, #28]
 8006d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d06:	931a      	str	r3, [sp, #104]	; 0x68
 8006d08:	4654      	mov	r4, sl
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d10:	4851      	ldr	r0, [pc, #324]	; (8006e58 <_svfiprintf_r+0x1ec>)
 8006d12:	f7f9 fa6d 	bl	80001f0 <memchr>
 8006d16:	9a04      	ldr	r2, [sp, #16]
 8006d18:	b9d8      	cbnz	r0, 8006d52 <_svfiprintf_r+0xe6>
 8006d1a:	06d0      	lsls	r0, r2, #27
 8006d1c:	bf44      	itt	mi
 8006d1e:	2320      	movmi	r3, #32
 8006d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d24:	0711      	lsls	r1, r2, #28
 8006d26:	bf44      	itt	mi
 8006d28:	232b      	movmi	r3, #43	; 0x2b
 8006d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d32:	2b2a      	cmp	r3, #42	; 0x2a
 8006d34:	d015      	beq.n	8006d62 <_svfiprintf_r+0xf6>
 8006d36:	9a07      	ldr	r2, [sp, #28]
 8006d38:	4654      	mov	r4, sl
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f04f 0c0a 	mov.w	ip, #10
 8006d40:	4621      	mov	r1, r4
 8006d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d46:	3b30      	subs	r3, #48	; 0x30
 8006d48:	2b09      	cmp	r3, #9
 8006d4a:	d94e      	bls.n	8006dea <_svfiprintf_r+0x17e>
 8006d4c:	b1b0      	cbz	r0, 8006d7c <_svfiprintf_r+0x110>
 8006d4e:	9207      	str	r2, [sp, #28]
 8006d50:	e014      	b.n	8006d7c <_svfiprintf_r+0x110>
 8006d52:	eba0 0308 	sub.w	r3, r0, r8
 8006d56:	fa09 f303 	lsl.w	r3, r9, r3
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	46a2      	mov	sl, r4
 8006d60:	e7d2      	b.n	8006d08 <_svfiprintf_r+0x9c>
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	1d19      	adds	r1, r3, #4
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	9103      	str	r1, [sp, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bfbb      	ittet	lt
 8006d6e:	425b      	neglt	r3, r3
 8006d70:	f042 0202 	orrlt.w	r2, r2, #2
 8006d74:	9307      	strge	r3, [sp, #28]
 8006d76:	9307      	strlt	r3, [sp, #28]
 8006d78:	bfb8      	it	lt
 8006d7a:	9204      	strlt	r2, [sp, #16]
 8006d7c:	7823      	ldrb	r3, [r4, #0]
 8006d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d80:	d10c      	bne.n	8006d9c <_svfiprintf_r+0x130>
 8006d82:	7863      	ldrb	r3, [r4, #1]
 8006d84:	2b2a      	cmp	r3, #42	; 0x2a
 8006d86:	d135      	bne.n	8006df4 <_svfiprintf_r+0x188>
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	1d1a      	adds	r2, r3, #4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	9203      	str	r2, [sp, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bfb8      	it	lt
 8006d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d98:	3402      	adds	r4, #2
 8006d9a:	9305      	str	r3, [sp, #20]
 8006d9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e68 <_svfiprintf_r+0x1fc>
 8006da0:	7821      	ldrb	r1, [r4, #0]
 8006da2:	2203      	movs	r2, #3
 8006da4:	4650      	mov	r0, sl
 8006da6:	f7f9 fa23 	bl	80001f0 <memchr>
 8006daa:	b140      	cbz	r0, 8006dbe <_svfiprintf_r+0x152>
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	eba0 000a 	sub.w	r0, r0, sl
 8006db2:	fa03 f000 	lsl.w	r0, r3, r0
 8006db6:	9b04      	ldr	r3, [sp, #16]
 8006db8:	4303      	orrs	r3, r0
 8006dba:	3401      	adds	r4, #1
 8006dbc:	9304      	str	r3, [sp, #16]
 8006dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc2:	4826      	ldr	r0, [pc, #152]	; (8006e5c <_svfiprintf_r+0x1f0>)
 8006dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc8:	2206      	movs	r2, #6
 8006dca:	f7f9 fa11 	bl	80001f0 <memchr>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d038      	beq.n	8006e44 <_svfiprintf_r+0x1d8>
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <_svfiprintf_r+0x1f4>)
 8006dd4:	bb1b      	cbnz	r3, 8006e1e <_svfiprintf_r+0x1b2>
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	3307      	adds	r3, #7
 8006dda:	f023 0307 	bic.w	r3, r3, #7
 8006dde:	3308      	adds	r3, #8
 8006de0:	9303      	str	r3, [sp, #12]
 8006de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de4:	4433      	add	r3, r6
 8006de6:	9309      	str	r3, [sp, #36]	; 0x24
 8006de8:	e767      	b.n	8006cba <_svfiprintf_r+0x4e>
 8006dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dee:	460c      	mov	r4, r1
 8006df0:	2001      	movs	r0, #1
 8006df2:	e7a5      	b.n	8006d40 <_svfiprintf_r+0xd4>
 8006df4:	2300      	movs	r3, #0
 8006df6:	3401      	adds	r4, #1
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	f04f 0c0a 	mov.w	ip, #10
 8006e00:	4620      	mov	r0, r4
 8006e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e06:	3a30      	subs	r2, #48	; 0x30
 8006e08:	2a09      	cmp	r2, #9
 8006e0a:	d903      	bls.n	8006e14 <_svfiprintf_r+0x1a8>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0c5      	beq.n	8006d9c <_svfiprintf_r+0x130>
 8006e10:	9105      	str	r1, [sp, #20]
 8006e12:	e7c3      	b.n	8006d9c <_svfiprintf_r+0x130>
 8006e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e18:	4604      	mov	r4, r0
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e7f0      	b.n	8006e00 <_svfiprintf_r+0x194>
 8006e1e:	ab03      	add	r3, sp, #12
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462a      	mov	r2, r5
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <_svfiprintf_r+0x1f8>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7fd ffcb 	bl	8004dc4 <_printf_float>
 8006e2e:	1c42      	adds	r2, r0, #1
 8006e30:	4606      	mov	r6, r0
 8006e32:	d1d6      	bne.n	8006de2 <_svfiprintf_r+0x176>
 8006e34:	89ab      	ldrh	r3, [r5, #12]
 8006e36:	065b      	lsls	r3, r3, #25
 8006e38:	f53f af2c 	bmi.w	8006c94 <_svfiprintf_r+0x28>
 8006e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3e:	b01d      	add	sp, #116	; 0x74
 8006e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e44:	ab03      	add	r3, sp, #12
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <_svfiprintf_r+0x1f8>)
 8006e4c:	a904      	add	r1, sp, #16
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7fe fa5c 	bl	800530c <_printf_i>
 8006e54:	e7eb      	b.n	8006e2e <_svfiprintf_r+0x1c2>
 8006e56:	bf00      	nop
 8006e58:	08007d2c 	.word	0x08007d2c
 8006e5c:	08007d36 	.word	0x08007d36
 8006e60:	08004dc5 	.word	0x08004dc5
 8006e64:	08006bb5 	.word	0x08006bb5
 8006e68:	08007d32 	.word	0x08007d32

08006e6c <_sbrk_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d06      	ldr	r5, [pc, #24]	; (8006e88 <_sbrk_r+0x1c>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	f7fa fc26 	bl	80016c8 <_sbrk>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_sbrk_r+0x1a>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_sbrk_r+0x1a>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	200002bc 	.word	0x200002bc

08006e8c <__assert_func>:
 8006e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <__assert_func+0x2c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4605      	mov	r5, r0
 8006e98:	68d8      	ldr	r0, [r3, #12]
 8006e9a:	b14c      	cbz	r4, 8006eb0 <__assert_func+0x24>
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <__assert_func+0x30>)
 8006e9e:	9100      	str	r1, [sp, #0]
 8006ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ea4:	4906      	ldr	r1, [pc, #24]	; (8006ec0 <__assert_func+0x34>)
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f000 f80e 	bl	8006ec8 <fiprintf>
 8006eac:	f000 faac 	bl	8007408 <abort>
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <__assert_func+0x38>)
 8006eb2:	461c      	mov	r4, r3
 8006eb4:	e7f3      	b.n	8006e9e <__assert_func+0x12>
 8006eb6:	bf00      	nop
 8006eb8:	2000000c 	.word	0x2000000c
 8006ebc:	08007d3d 	.word	0x08007d3d
 8006ec0:	08007d4a 	.word	0x08007d4a
 8006ec4:	08007d78 	.word	0x08007d78

08006ec8 <fiprintf>:
 8006ec8:	b40e      	push	{r1, r2, r3}
 8006eca:	b503      	push	{r0, r1, lr}
 8006ecc:	4601      	mov	r1, r0
 8006ece:	ab03      	add	r3, sp, #12
 8006ed0:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <fiprintf+0x20>)
 8006ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed6:	6800      	ldr	r0, [r0, #0]
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	f000 f897 	bl	800700c <_vfiprintf_r>
 8006ede:	b002      	add	sp, #8
 8006ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee4:	b003      	add	sp, #12
 8006ee6:	4770      	bx	lr
 8006ee8:	2000000c 	.word	0x2000000c

08006eec <__ascii_mbtowc>:
 8006eec:	b082      	sub	sp, #8
 8006eee:	b901      	cbnz	r1, 8006ef2 <__ascii_mbtowc+0x6>
 8006ef0:	a901      	add	r1, sp, #4
 8006ef2:	b142      	cbz	r2, 8006f06 <__ascii_mbtowc+0x1a>
 8006ef4:	b14b      	cbz	r3, 8006f0a <__ascii_mbtowc+0x1e>
 8006ef6:	7813      	ldrb	r3, [r2, #0]
 8006ef8:	600b      	str	r3, [r1, #0]
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	1e10      	subs	r0, r2, #0
 8006efe:	bf18      	it	ne
 8006f00:	2001      	movne	r0, #1
 8006f02:	b002      	add	sp, #8
 8006f04:	4770      	bx	lr
 8006f06:	4610      	mov	r0, r2
 8006f08:	e7fb      	b.n	8006f02 <__ascii_mbtowc+0x16>
 8006f0a:	f06f 0001 	mvn.w	r0, #1
 8006f0e:	e7f8      	b.n	8006f02 <__ascii_mbtowc+0x16>

08006f10 <memmove>:
 8006f10:	4288      	cmp	r0, r1
 8006f12:	b510      	push	{r4, lr}
 8006f14:	eb01 0402 	add.w	r4, r1, r2
 8006f18:	d902      	bls.n	8006f20 <memmove+0x10>
 8006f1a:	4284      	cmp	r4, r0
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	d807      	bhi.n	8006f30 <memmove+0x20>
 8006f20:	1e43      	subs	r3, r0, #1
 8006f22:	42a1      	cmp	r1, r4
 8006f24:	d008      	beq.n	8006f38 <memmove+0x28>
 8006f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f2e:	e7f8      	b.n	8006f22 <memmove+0x12>
 8006f30:	4402      	add	r2, r0
 8006f32:	4601      	mov	r1, r0
 8006f34:	428a      	cmp	r2, r1
 8006f36:	d100      	bne.n	8006f3a <memmove+0x2a>
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f42:	e7f7      	b.n	8006f34 <memmove+0x24>

08006f44 <__malloc_lock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__malloc_lock+0x8>)
 8006f46:	f000 bc1f 	b.w	8007788 <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	200002c0 	.word	0x200002c0

08006f50 <__malloc_unlock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__malloc_unlock+0x8>)
 8006f52:	f000 bc1a 	b.w	800778a <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	200002c0 	.word	0x200002c0

08006f5c <_realloc_r>:
 8006f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	4680      	mov	r8, r0
 8006f62:	4614      	mov	r4, r2
 8006f64:	460e      	mov	r6, r1
 8006f66:	b921      	cbnz	r1, 8006f72 <_realloc_r+0x16>
 8006f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	f7ff bdad 	b.w	8006acc <_malloc_r>
 8006f72:	b92a      	cbnz	r2, 8006f80 <_realloc_r+0x24>
 8006f74:	f7ff fd3e 	bl	80069f4 <_free_r>
 8006f78:	4625      	mov	r5, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f80:	f000 fc6a 	bl	8007858 <_malloc_usable_size_r>
 8006f84:	4284      	cmp	r4, r0
 8006f86:	4607      	mov	r7, r0
 8006f88:	d802      	bhi.n	8006f90 <_realloc_r+0x34>
 8006f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f8e:	d812      	bhi.n	8006fb6 <_realloc_r+0x5a>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4640      	mov	r0, r8
 8006f94:	f7ff fd9a 	bl	8006acc <_malloc_r>
 8006f98:	4605      	mov	r5, r0
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d0ed      	beq.n	8006f7a <_realloc_r+0x1e>
 8006f9e:	42bc      	cmp	r4, r7
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	bf28      	it	cs
 8006fa6:	463a      	movcs	r2, r7
 8006fa8:	f7ff f97c 	bl	80062a4 <memcpy>
 8006fac:	4631      	mov	r1, r6
 8006fae:	4640      	mov	r0, r8
 8006fb0:	f7ff fd20 	bl	80069f4 <_free_r>
 8006fb4:	e7e1      	b.n	8006f7a <_realloc_r+0x1e>
 8006fb6:	4635      	mov	r5, r6
 8006fb8:	e7df      	b.n	8006f7a <_realloc_r+0x1e>

08006fba <__sfputc_r>:
 8006fba:	6893      	ldr	r3, [r2, #8]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	b410      	push	{r4}
 8006fc2:	6093      	str	r3, [r2, #8]
 8006fc4:	da08      	bge.n	8006fd8 <__sfputc_r+0x1e>
 8006fc6:	6994      	ldr	r4, [r2, #24]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	db01      	blt.n	8006fd0 <__sfputc_r+0x16>
 8006fcc:	290a      	cmp	r1, #10
 8006fce:	d103      	bne.n	8006fd8 <__sfputc_r+0x1e>
 8006fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd4:	f000 b94a 	b.w	800726c <__swbuf_r>
 8006fd8:	6813      	ldr	r3, [r2, #0]
 8006fda:	1c58      	adds	r0, r3, #1
 8006fdc:	6010      	str	r0, [r2, #0]
 8006fde:	7019      	strb	r1, [r3, #0]
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <__sfputs_r>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	4614      	mov	r4, r2
 8006ff0:	18d5      	adds	r5, r2, r3
 8006ff2:	42ac      	cmp	r4, r5
 8006ff4:	d101      	bne.n	8006ffa <__sfputs_r+0x12>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e007      	b.n	800700a <__sfputs_r+0x22>
 8006ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffe:	463a      	mov	r2, r7
 8007000:	4630      	mov	r0, r6
 8007002:	f7ff ffda 	bl	8006fba <__sfputc_r>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d1f3      	bne.n	8006ff2 <__sfputs_r+0xa>
 800700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800700c <_vfiprintf_r>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	460d      	mov	r5, r1
 8007012:	b09d      	sub	sp, #116	; 0x74
 8007014:	4614      	mov	r4, r2
 8007016:	4698      	mov	r8, r3
 8007018:	4606      	mov	r6, r0
 800701a:	b118      	cbz	r0, 8007024 <_vfiprintf_r+0x18>
 800701c:	6983      	ldr	r3, [r0, #24]
 800701e:	b90b      	cbnz	r3, 8007024 <_vfiprintf_r+0x18>
 8007020:	f000 fb14 	bl	800764c <__sinit>
 8007024:	4b89      	ldr	r3, [pc, #548]	; (800724c <_vfiprintf_r+0x240>)
 8007026:	429d      	cmp	r5, r3
 8007028:	d11b      	bne.n	8007062 <_vfiprintf_r+0x56>
 800702a:	6875      	ldr	r5, [r6, #4]
 800702c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800702e:	07d9      	lsls	r1, r3, #31
 8007030:	d405      	bmi.n	800703e <_vfiprintf_r+0x32>
 8007032:	89ab      	ldrh	r3, [r5, #12]
 8007034:	059a      	lsls	r2, r3, #22
 8007036:	d402      	bmi.n	800703e <_vfiprintf_r+0x32>
 8007038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800703a:	f000 fba5 	bl	8007788 <__retarget_lock_acquire_recursive>
 800703e:	89ab      	ldrh	r3, [r5, #12]
 8007040:	071b      	lsls	r3, r3, #28
 8007042:	d501      	bpl.n	8007048 <_vfiprintf_r+0x3c>
 8007044:	692b      	ldr	r3, [r5, #16]
 8007046:	b9eb      	cbnz	r3, 8007084 <_vfiprintf_r+0x78>
 8007048:	4629      	mov	r1, r5
 800704a:	4630      	mov	r0, r6
 800704c:	f000 f96e 	bl	800732c <__swsetup_r>
 8007050:	b1c0      	cbz	r0, 8007084 <_vfiprintf_r+0x78>
 8007052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007054:	07dc      	lsls	r4, r3, #31
 8007056:	d50e      	bpl.n	8007076 <_vfiprintf_r+0x6a>
 8007058:	f04f 30ff 	mov.w	r0, #4294967295
 800705c:	b01d      	add	sp, #116	; 0x74
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	4b7b      	ldr	r3, [pc, #492]	; (8007250 <_vfiprintf_r+0x244>)
 8007064:	429d      	cmp	r5, r3
 8007066:	d101      	bne.n	800706c <_vfiprintf_r+0x60>
 8007068:	68b5      	ldr	r5, [r6, #8]
 800706a:	e7df      	b.n	800702c <_vfiprintf_r+0x20>
 800706c:	4b79      	ldr	r3, [pc, #484]	; (8007254 <_vfiprintf_r+0x248>)
 800706e:	429d      	cmp	r5, r3
 8007070:	bf08      	it	eq
 8007072:	68f5      	ldreq	r5, [r6, #12]
 8007074:	e7da      	b.n	800702c <_vfiprintf_r+0x20>
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	0598      	lsls	r0, r3, #22
 800707a:	d4ed      	bmi.n	8007058 <_vfiprintf_r+0x4c>
 800707c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800707e:	f000 fb84 	bl	800778a <__retarget_lock_release_recursive>
 8007082:	e7e9      	b.n	8007058 <_vfiprintf_r+0x4c>
 8007084:	2300      	movs	r3, #0
 8007086:	9309      	str	r3, [sp, #36]	; 0x24
 8007088:	2320      	movs	r3, #32
 800708a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800708e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007092:	2330      	movs	r3, #48	; 0x30
 8007094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007258 <_vfiprintf_r+0x24c>
 8007098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800709c:	f04f 0901 	mov.w	r9, #1
 80070a0:	4623      	mov	r3, r4
 80070a2:	469a      	mov	sl, r3
 80070a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a8:	b10a      	cbz	r2, 80070ae <_vfiprintf_r+0xa2>
 80070aa:	2a25      	cmp	r2, #37	; 0x25
 80070ac:	d1f9      	bne.n	80070a2 <_vfiprintf_r+0x96>
 80070ae:	ebba 0b04 	subs.w	fp, sl, r4
 80070b2:	d00b      	beq.n	80070cc <_vfiprintf_r+0xc0>
 80070b4:	465b      	mov	r3, fp
 80070b6:	4622      	mov	r2, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ff94 	bl	8006fe8 <__sfputs_r>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f000 80aa 	beq.w	800721a <_vfiprintf_r+0x20e>
 80070c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c8:	445a      	add	r2, fp
 80070ca:	9209      	str	r2, [sp, #36]	; 0x24
 80070cc:	f89a 3000 	ldrb.w	r3, [sl]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a2 	beq.w	800721a <_vfiprintf_r+0x20e>
 80070d6:	2300      	movs	r3, #0
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e0:	f10a 0a01 	add.w	sl, sl, #1
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ec:	931a      	str	r3, [sp, #104]	; 0x68
 80070ee:	4654      	mov	r4, sl
 80070f0:	2205      	movs	r2, #5
 80070f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f6:	4858      	ldr	r0, [pc, #352]	; (8007258 <_vfiprintf_r+0x24c>)
 80070f8:	f7f9 f87a 	bl	80001f0 <memchr>
 80070fc:	9a04      	ldr	r2, [sp, #16]
 80070fe:	b9d8      	cbnz	r0, 8007138 <_vfiprintf_r+0x12c>
 8007100:	06d1      	lsls	r1, r2, #27
 8007102:	bf44      	itt	mi
 8007104:	2320      	movmi	r3, #32
 8007106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710a:	0713      	lsls	r3, r2, #28
 800710c:	bf44      	itt	mi
 800710e:	232b      	movmi	r3, #43	; 0x2b
 8007110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007114:	f89a 3000 	ldrb.w	r3, [sl]
 8007118:	2b2a      	cmp	r3, #42	; 0x2a
 800711a:	d015      	beq.n	8007148 <_vfiprintf_r+0x13c>
 800711c:	9a07      	ldr	r2, [sp, #28]
 800711e:	4654      	mov	r4, sl
 8007120:	2000      	movs	r0, #0
 8007122:	f04f 0c0a 	mov.w	ip, #10
 8007126:	4621      	mov	r1, r4
 8007128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712c:	3b30      	subs	r3, #48	; 0x30
 800712e:	2b09      	cmp	r3, #9
 8007130:	d94e      	bls.n	80071d0 <_vfiprintf_r+0x1c4>
 8007132:	b1b0      	cbz	r0, 8007162 <_vfiprintf_r+0x156>
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	e014      	b.n	8007162 <_vfiprintf_r+0x156>
 8007138:	eba0 0308 	sub.w	r3, r0, r8
 800713c:	fa09 f303 	lsl.w	r3, r9, r3
 8007140:	4313      	orrs	r3, r2
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	46a2      	mov	sl, r4
 8007146:	e7d2      	b.n	80070ee <_vfiprintf_r+0xe2>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d19      	adds	r1, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9103      	str	r1, [sp, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfbb      	ittet	lt
 8007154:	425b      	neglt	r3, r3
 8007156:	f042 0202 	orrlt.w	r2, r2, #2
 800715a:	9307      	strge	r3, [sp, #28]
 800715c:	9307      	strlt	r3, [sp, #28]
 800715e:	bfb8      	it	lt
 8007160:	9204      	strlt	r2, [sp, #16]
 8007162:	7823      	ldrb	r3, [r4, #0]
 8007164:	2b2e      	cmp	r3, #46	; 0x2e
 8007166:	d10c      	bne.n	8007182 <_vfiprintf_r+0x176>
 8007168:	7863      	ldrb	r3, [r4, #1]
 800716a:	2b2a      	cmp	r3, #42	; 0x2a
 800716c:	d135      	bne.n	80071da <_vfiprintf_r+0x1ce>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	1d1a      	adds	r2, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	9203      	str	r2, [sp, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb8      	it	lt
 800717a:	f04f 33ff 	movlt.w	r3, #4294967295
 800717e:	3402      	adds	r4, #2
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007268 <_vfiprintf_r+0x25c>
 8007186:	7821      	ldrb	r1, [r4, #0]
 8007188:	2203      	movs	r2, #3
 800718a:	4650      	mov	r0, sl
 800718c:	f7f9 f830 	bl	80001f0 <memchr>
 8007190:	b140      	cbz	r0, 80071a4 <_vfiprintf_r+0x198>
 8007192:	2340      	movs	r3, #64	; 0x40
 8007194:	eba0 000a 	sub.w	r0, r0, sl
 8007198:	fa03 f000 	lsl.w	r0, r3, r0
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	4303      	orrs	r3, r0
 80071a0:	3401      	adds	r4, #1
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a8:	482c      	ldr	r0, [pc, #176]	; (800725c <_vfiprintf_r+0x250>)
 80071aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ae:	2206      	movs	r2, #6
 80071b0:	f7f9 f81e 	bl	80001f0 <memchr>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d03f      	beq.n	8007238 <_vfiprintf_r+0x22c>
 80071b8:	4b29      	ldr	r3, [pc, #164]	; (8007260 <_vfiprintf_r+0x254>)
 80071ba:	bb1b      	cbnz	r3, 8007204 <_vfiprintf_r+0x1f8>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	3307      	adds	r3, #7
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	3308      	adds	r3, #8
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	443b      	add	r3, r7
 80071cc:	9309      	str	r3, [sp, #36]	; 0x24
 80071ce:	e767      	b.n	80070a0 <_vfiprintf_r+0x94>
 80071d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d4:	460c      	mov	r4, r1
 80071d6:	2001      	movs	r0, #1
 80071d8:	e7a5      	b.n	8007126 <_vfiprintf_r+0x11a>
 80071da:	2300      	movs	r3, #0
 80071dc:	3401      	adds	r4, #1
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	4619      	mov	r1, r3
 80071e2:	f04f 0c0a 	mov.w	ip, #10
 80071e6:	4620      	mov	r0, r4
 80071e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ec:	3a30      	subs	r2, #48	; 0x30
 80071ee:	2a09      	cmp	r2, #9
 80071f0:	d903      	bls.n	80071fa <_vfiprintf_r+0x1ee>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0c5      	beq.n	8007182 <_vfiprintf_r+0x176>
 80071f6:	9105      	str	r1, [sp, #20]
 80071f8:	e7c3      	b.n	8007182 <_vfiprintf_r+0x176>
 80071fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fe:	4604      	mov	r4, r0
 8007200:	2301      	movs	r3, #1
 8007202:	e7f0      	b.n	80071e6 <_vfiprintf_r+0x1da>
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462a      	mov	r2, r5
 800720a:	4b16      	ldr	r3, [pc, #88]	; (8007264 <_vfiprintf_r+0x258>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	4630      	mov	r0, r6
 8007210:	f7fd fdd8 	bl	8004dc4 <_printf_float>
 8007214:	4607      	mov	r7, r0
 8007216:	1c78      	adds	r0, r7, #1
 8007218:	d1d6      	bne.n	80071c8 <_vfiprintf_r+0x1bc>
 800721a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800721c:	07d9      	lsls	r1, r3, #31
 800721e:	d405      	bmi.n	800722c <_vfiprintf_r+0x220>
 8007220:	89ab      	ldrh	r3, [r5, #12]
 8007222:	059a      	lsls	r2, r3, #22
 8007224:	d402      	bmi.n	800722c <_vfiprintf_r+0x220>
 8007226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007228:	f000 faaf 	bl	800778a <__retarget_lock_release_recursive>
 800722c:	89ab      	ldrh	r3, [r5, #12]
 800722e:	065b      	lsls	r3, r3, #25
 8007230:	f53f af12 	bmi.w	8007058 <_vfiprintf_r+0x4c>
 8007234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007236:	e711      	b.n	800705c <_vfiprintf_r+0x50>
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <_vfiprintf_r+0x258>)
 8007240:	a904      	add	r1, sp, #16
 8007242:	4630      	mov	r0, r6
 8007244:	f7fe f862 	bl	800530c <_printf_i>
 8007248:	e7e4      	b.n	8007214 <_vfiprintf_r+0x208>
 800724a:	bf00      	nop
 800724c:	08007ea4 	.word	0x08007ea4
 8007250:	08007ec4 	.word	0x08007ec4
 8007254:	08007e84 	.word	0x08007e84
 8007258:	08007d2c 	.word	0x08007d2c
 800725c:	08007d36 	.word	0x08007d36
 8007260:	08004dc5 	.word	0x08004dc5
 8007264:	08006fe9 	.word	0x08006fe9
 8007268:	08007d32 	.word	0x08007d32

0800726c <__swbuf_r>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	460e      	mov	r6, r1
 8007270:	4614      	mov	r4, r2
 8007272:	4605      	mov	r5, r0
 8007274:	b118      	cbz	r0, 800727e <__swbuf_r+0x12>
 8007276:	6983      	ldr	r3, [r0, #24]
 8007278:	b90b      	cbnz	r3, 800727e <__swbuf_r+0x12>
 800727a:	f000 f9e7 	bl	800764c <__sinit>
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <__swbuf_r+0x98>)
 8007280:	429c      	cmp	r4, r3
 8007282:	d12b      	bne.n	80072dc <__swbuf_r+0x70>
 8007284:	686c      	ldr	r4, [r5, #4]
 8007286:	69a3      	ldr	r3, [r4, #24]
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	071a      	lsls	r2, r3, #28
 800728e:	d52f      	bpl.n	80072f0 <__swbuf_r+0x84>
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b36b      	cbz	r3, 80072f0 <__swbuf_r+0x84>
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1ac0      	subs	r0, r0, r3
 800729a:	6963      	ldr	r3, [r4, #20]
 800729c:	b2f6      	uxtb	r6, r6
 800729e:	4283      	cmp	r3, r0
 80072a0:	4637      	mov	r7, r6
 80072a2:	dc04      	bgt.n	80072ae <__swbuf_r+0x42>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 f93c 	bl	8007524 <_fflush_r>
 80072ac:	bb30      	cbnz	r0, 80072fc <__swbuf_r+0x90>
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	60a3      	str	r3, [r4, #8]
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	701e      	strb	r6, [r3, #0]
 80072bc:	6963      	ldr	r3, [r4, #20]
 80072be:	3001      	adds	r0, #1
 80072c0:	4283      	cmp	r3, r0
 80072c2:	d004      	beq.n	80072ce <__swbuf_r+0x62>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	07db      	lsls	r3, r3, #31
 80072c8:	d506      	bpl.n	80072d8 <__swbuf_r+0x6c>
 80072ca:	2e0a      	cmp	r6, #10
 80072cc:	d104      	bne.n	80072d8 <__swbuf_r+0x6c>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 f927 	bl	8007524 <_fflush_r>
 80072d6:	b988      	cbnz	r0, 80072fc <__swbuf_r+0x90>
 80072d8:	4638      	mov	r0, r7
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <__swbuf_r+0x9c>)
 80072de:	429c      	cmp	r4, r3
 80072e0:	d101      	bne.n	80072e6 <__swbuf_r+0x7a>
 80072e2:	68ac      	ldr	r4, [r5, #8]
 80072e4:	e7cf      	b.n	8007286 <__swbuf_r+0x1a>
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <__swbuf_r+0xa0>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	bf08      	it	eq
 80072ec:	68ec      	ldreq	r4, [r5, #12]
 80072ee:	e7ca      	b.n	8007286 <__swbuf_r+0x1a>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 f81a 	bl	800732c <__swsetup_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d0cb      	beq.n	8007294 <__swbuf_r+0x28>
 80072fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007300:	e7ea      	b.n	80072d8 <__swbuf_r+0x6c>
 8007302:	bf00      	nop
 8007304:	08007ea4 	.word	0x08007ea4
 8007308:	08007ec4 	.word	0x08007ec4
 800730c:	08007e84 	.word	0x08007e84

08007310 <__ascii_wctomb>:
 8007310:	b149      	cbz	r1, 8007326 <__ascii_wctomb+0x16>
 8007312:	2aff      	cmp	r2, #255	; 0xff
 8007314:	bf85      	ittet	hi
 8007316:	238a      	movhi	r3, #138	; 0x8a
 8007318:	6003      	strhi	r3, [r0, #0]
 800731a:	700a      	strbls	r2, [r1, #0]
 800731c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007320:	bf98      	it	ls
 8007322:	2001      	movls	r0, #1
 8007324:	4770      	bx	lr
 8007326:	4608      	mov	r0, r1
 8007328:	4770      	bx	lr
	...

0800732c <__swsetup_r>:
 800732c:	4b32      	ldr	r3, [pc, #200]	; (80073f8 <__swsetup_r+0xcc>)
 800732e:	b570      	push	{r4, r5, r6, lr}
 8007330:	681d      	ldr	r5, [r3, #0]
 8007332:	4606      	mov	r6, r0
 8007334:	460c      	mov	r4, r1
 8007336:	b125      	cbz	r5, 8007342 <__swsetup_r+0x16>
 8007338:	69ab      	ldr	r3, [r5, #24]
 800733a:	b913      	cbnz	r3, 8007342 <__swsetup_r+0x16>
 800733c:	4628      	mov	r0, r5
 800733e:	f000 f985 	bl	800764c <__sinit>
 8007342:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <__swsetup_r+0xd0>)
 8007344:	429c      	cmp	r4, r3
 8007346:	d10f      	bne.n	8007368 <__swsetup_r+0x3c>
 8007348:	686c      	ldr	r4, [r5, #4]
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007350:	0719      	lsls	r1, r3, #28
 8007352:	d42c      	bmi.n	80073ae <__swsetup_r+0x82>
 8007354:	06dd      	lsls	r5, r3, #27
 8007356:	d411      	bmi.n	800737c <__swsetup_r+0x50>
 8007358:	2309      	movs	r3, #9
 800735a:	6033      	str	r3, [r6, #0]
 800735c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	f04f 30ff 	mov.w	r0, #4294967295
 8007366:	e03e      	b.n	80073e6 <__swsetup_r+0xba>
 8007368:	4b25      	ldr	r3, [pc, #148]	; (8007400 <__swsetup_r+0xd4>)
 800736a:	429c      	cmp	r4, r3
 800736c:	d101      	bne.n	8007372 <__swsetup_r+0x46>
 800736e:	68ac      	ldr	r4, [r5, #8]
 8007370:	e7eb      	b.n	800734a <__swsetup_r+0x1e>
 8007372:	4b24      	ldr	r3, [pc, #144]	; (8007404 <__swsetup_r+0xd8>)
 8007374:	429c      	cmp	r4, r3
 8007376:	bf08      	it	eq
 8007378:	68ec      	ldreq	r4, [r5, #12]
 800737a:	e7e6      	b.n	800734a <__swsetup_r+0x1e>
 800737c:	0758      	lsls	r0, r3, #29
 800737e:	d512      	bpl.n	80073a6 <__swsetup_r+0x7a>
 8007380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007382:	b141      	cbz	r1, 8007396 <__swsetup_r+0x6a>
 8007384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007388:	4299      	cmp	r1, r3
 800738a:	d002      	beq.n	8007392 <__swsetup_r+0x66>
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff fb31 	bl	80069f4 <_free_r>
 8007392:	2300      	movs	r3, #0
 8007394:	6363      	str	r3, [r4, #52]	; 0x34
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800739c:	81a3      	strh	r3, [r4, #12]
 800739e:	2300      	movs	r3, #0
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f043 0308 	orr.w	r3, r3, #8
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	b94b      	cbnz	r3, 80073c6 <__swsetup_r+0x9a>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073bc:	d003      	beq.n	80073c6 <__swsetup_r+0x9a>
 80073be:	4621      	mov	r1, r4
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 fa09 	bl	80077d8 <__smakebuf_r>
 80073c6:	89a0      	ldrh	r0, [r4, #12]
 80073c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073cc:	f010 0301 	ands.w	r3, r0, #1
 80073d0:	d00a      	beq.n	80073e8 <__swsetup_r+0xbc>
 80073d2:	2300      	movs	r3, #0
 80073d4:	60a3      	str	r3, [r4, #8]
 80073d6:	6963      	ldr	r3, [r4, #20]
 80073d8:	425b      	negs	r3, r3
 80073da:	61a3      	str	r3, [r4, #24]
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	b943      	cbnz	r3, 80073f2 <__swsetup_r+0xc6>
 80073e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073e4:	d1ba      	bne.n	800735c <__swsetup_r+0x30>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	0781      	lsls	r1, r0, #30
 80073ea:	bf58      	it	pl
 80073ec:	6963      	ldrpl	r3, [r4, #20]
 80073ee:	60a3      	str	r3, [r4, #8]
 80073f0:	e7f4      	b.n	80073dc <__swsetup_r+0xb0>
 80073f2:	2000      	movs	r0, #0
 80073f4:	e7f7      	b.n	80073e6 <__swsetup_r+0xba>
 80073f6:	bf00      	nop
 80073f8:	2000000c 	.word	0x2000000c
 80073fc:	08007ea4 	.word	0x08007ea4
 8007400:	08007ec4 	.word	0x08007ec4
 8007404:	08007e84 	.word	0x08007e84

08007408 <abort>:
 8007408:	b508      	push	{r3, lr}
 800740a:	2006      	movs	r0, #6
 800740c:	f000 fa54 	bl	80078b8 <raise>
 8007410:	2001      	movs	r0, #1
 8007412:	f7fa f8e1 	bl	80015d8 <_exit>
	...

08007418 <__sflush_r>:
 8007418:	898a      	ldrh	r2, [r1, #12]
 800741a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741e:	4605      	mov	r5, r0
 8007420:	0710      	lsls	r0, r2, #28
 8007422:	460c      	mov	r4, r1
 8007424:	d458      	bmi.n	80074d8 <__sflush_r+0xc0>
 8007426:	684b      	ldr	r3, [r1, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	dc05      	bgt.n	8007438 <__sflush_r+0x20>
 800742c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	dc02      	bgt.n	8007438 <__sflush_r+0x20>
 8007432:	2000      	movs	r0, #0
 8007434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800743a:	2e00      	cmp	r6, #0
 800743c:	d0f9      	beq.n	8007432 <__sflush_r+0x1a>
 800743e:	2300      	movs	r3, #0
 8007440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007444:	682f      	ldr	r7, [r5, #0]
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	d032      	beq.n	80074b0 <__sflush_r+0x98>
 800744a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	075a      	lsls	r2, r3, #29
 8007450:	d505      	bpl.n	800745e <__sflush_r+0x46>
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	1ac0      	subs	r0, r0, r3
 8007456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007458:	b10b      	cbz	r3, 800745e <__sflush_r+0x46>
 800745a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800745c:	1ac0      	subs	r0, r0, r3
 800745e:	2300      	movs	r3, #0
 8007460:	4602      	mov	r2, r0
 8007462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007464:	6a21      	ldr	r1, [r4, #32]
 8007466:	4628      	mov	r0, r5
 8007468:	47b0      	blx	r6
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	d106      	bne.n	800747e <__sflush_r+0x66>
 8007470:	6829      	ldr	r1, [r5, #0]
 8007472:	291d      	cmp	r1, #29
 8007474:	d82c      	bhi.n	80074d0 <__sflush_r+0xb8>
 8007476:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <__sflush_r+0x108>)
 8007478:	40ca      	lsrs	r2, r1
 800747a:	07d6      	lsls	r6, r2, #31
 800747c:	d528      	bpl.n	80074d0 <__sflush_r+0xb8>
 800747e:	2200      	movs	r2, #0
 8007480:	6062      	str	r2, [r4, #4]
 8007482:	04d9      	lsls	r1, r3, #19
 8007484:	6922      	ldr	r2, [r4, #16]
 8007486:	6022      	str	r2, [r4, #0]
 8007488:	d504      	bpl.n	8007494 <__sflush_r+0x7c>
 800748a:	1c42      	adds	r2, r0, #1
 800748c:	d101      	bne.n	8007492 <__sflush_r+0x7a>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	b903      	cbnz	r3, 8007494 <__sflush_r+0x7c>
 8007492:	6560      	str	r0, [r4, #84]	; 0x54
 8007494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007496:	602f      	str	r7, [r5, #0]
 8007498:	2900      	cmp	r1, #0
 800749a:	d0ca      	beq.n	8007432 <__sflush_r+0x1a>
 800749c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <__sflush_r+0x92>
 80074a4:	4628      	mov	r0, r5
 80074a6:	f7ff faa5 	bl	80069f4 <_free_r>
 80074aa:	2000      	movs	r0, #0
 80074ac:	6360      	str	r0, [r4, #52]	; 0x34
 80074ae:	e7c1      	b.n	8007434 <__sflush_r+0x1c>
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	2301      	movs	r3, #1
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b0      	blx	r6
 80074b8:	1c41      	adds	r1, r0, #1
 80074ba:	d1c7      	bne.n	800744c <__sflush_r+0x34>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0c4      	beq.n	800744c <__sflush_r+0x34>
 80074c2:	2b1d      	cmp	r3, #29
 80074c4:	d001      	beq.n	80074ca <__sflush_r+0xb2>
 80074c6:	2b16      	cmp	r3, #22
 80074c8:	d101      	bne.n	80074ce <__sflush_r+0xb6>
 80074ca:	602f      	str	r7, [r5, #0]
 80074cc:	e7b1      	b.n	8007432 <__sflush_r+0x1a>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	e7ad      	b.n	8007434 <__sflush_r+0x1c>
 80074d8:	690f      	ldr	r7, [r1, #16]
 80074da:	2f00      	cmp	r7, #0
 80074dc:	d0a9      	beq.n	8007432 <__sflush_r+0x1a>
 80074de:	0793      	lsls	r3, r2, #30
 80074e0:	680e      	ldr	r6, [r1, #0]
 80074e2:	bf08      	it	eq
 80074e4:	694b      	ldreq	r3, [r1, #20]
 80074e6:	600f      	str	r7, [r1, #0]
 80074e8:	bf18      	it	ne
 80074ea:	2300      	movne	r3, #0
 80074ec:	eba6 0807 	sub.w	r8, r6, r7
 80074f0:	608b      	str	r3, [r1, #8]
 80074f2:	f1b8 0f00 	cmp.w	r8, #0
 80074f6:	dd9c      	ble.n	8007432 <__sflush_r+0x1a>
 80074f8:	6a21      	ldr	r1, [r4, #32]
 80074fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074fc:	4643      	mov	r3, r8
 80074fe:	463a      	mov	r2, r7
 8007500:	4628      	mov	r0, r5
 8007502:	47b0      	blx	r6
 8007504:	2800      	cmp	r0, #0
 8007506:	dc06      	bgt.n	8007516 <__sflush_r+0xfe>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	e78e      	b.n	8007434 <__sflush_r+0x1c>
 8007516:	4407      	add	r7, r0
 8007518:	eba8 0800 	sub.w	r8, r8, r0
 800751c:	e7e9      	b.n	80074f2 <__sflush_r+0xda>
 800751e:	bf00      	nop
 8007520:	20400001 	.word	0x20400001

08007524 <_fflush_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	690b      	ldr	r3, [r1, #16]
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
 800752c:	b913      	cbnz	r3, 8007534 <_fflush_r+0x10>
 800752e:	2500      	movs	r5, #0
 8007530:	4628      	mov	r0, r5
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	b118      	cbz	r0, 800753e <_fflush_r+0x1a>
 8007536:	6983      	ldr	r3, [r0, #24]
 8007538:	b90b      	cbnz	r3, 800753e <_fflush_r+0x1a>
 800753a:	f000 f887 	bl	800764c <__sinit>
 800753e:	4b14      	ldr	r3, [pc, #80]	; (8007590 <_fflush_r+0x6c>)
 8007540:	429c      	cmp	r4, r3
 8007542:	d11b      	bne.n	800757c <_fflush_r+0x58>
 8007544:	686c      	ldr	r4, [r5, #4]
 8007546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0ef      	beq.n	800752e <_fflush_r+0xa>
 800754e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007550:	07d0      	lsls	r0, r2, #31
 8007552:	d404      	bmi.n	800755e <_fflush_r+0x3a>
 8007554:	0599      	lsls	r1, r3, #22
 8007556:	d402      	bmi.n	800755e <_fflush_r+0x3a>
 8007558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755a:	f000 f915 	bl	8007788 <__retarget_lock_acquire_recursive>
 800755e:	4628      	mov	r0, r5
 8007560:	4621      	mov	r1, r4
 8007562:	f7ff ff59 	bl	8007418 <__sflush_r>
 8007566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007568:	07da      	lsls	r2, r3, #31
 800756a:	4605      	mov	r5, r0
 800756c:	d4e0      	bmi.n	8007530 <_fflush_r+0xc>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	059b      	lsls	r3, r3, #22
 8007572:	d4dd      	bmi.n	8007530 <_fflush_r+0xc>
 8007574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007576:	f000 f908 	bl	800778a <__retarget_lock_release_recursive>
 800757a:	e7d9      	b.n	8007530 <_fflush_r+0xc>
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <_fflush_r+0x70>)
 800757e:	429c      	cmp	r4, r3
 8007580:	d101      	bne.n	8007586 <_fflush_r+0x62>
 8007582:	68ac      	ldr	r4, [r5, #8]
 8007584:	e7df      	b.n	8007546 <_fflush_r+0x22>
 8007586:	4b04      	ldr	r3, [pc, #16]	; (8007598 <_fflush_r+0x74>)
 8007588:	429c      	cmp	r4, r3
 800758a:	bf08      	it	eq
 800758c:	68ec      	ldreq	r4, [r5, #12]
 800758e:	e7da      	b.n	8007546 <_fflush_r+0x22>
 8007590:	08007ea4 	.word	0x08007ea4
 8007594:	08007ec4 	.word	0x08007ec4
 8007598:	08007e84 	.word	0x08007e84

0800759c <std>:
 800759c:	2300      	movs	r3, #0
 800759e:	b510      	push	{r4, lr}
 80075a0:	4604      	mov	r4, r0
 80075a2:	e9c0 3300 	strd	r3, r3, [r0]
 80075a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075aa:	6083      	str	r3, [r0, #8]
 80075ac:	8181      	strh	r1, [r0, #12]
 80075ae:	6643      	str	r3, [r0, #100]	; 0x64
 80075b0:	81c2      	strh	r2, [r0, #14]
 80075b2:	6183      	str	r3, [r0, #24]
 80075b4:	4619      	mov	r1, r3
 80075b6:	2208      	movs	r2, #8
 80075b8:	305c      	adds	r0, #92	; 0x5c
 80075ba:	f7fd fb5b 	bl	8004c74 <memset>
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <std+0x38>)
 80075c0:	6263      	str	r3, [r4, #36]	; 0x24
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <std+0x3c>)
 80075c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <std+0x40>)
 80075c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <std+0x44>)
 80075cc:	6224      	str	r4, [r4, #32]
 80075ce:	6323      	str	r3, [r4, #48]	; 0x30
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	080078f1 	.word	0x080078f1
 80075d8:	08007913 	.word	0x08007913
 80075dc:	0800794b 	.word	0x0800794b
 80075e0:	0800796f 	.word	0x0800796f

080075e4 <_cleanup_r>:
 80075e4:	4901      	ldr	r1, [pc, #4]	; (80075ec <_cleanup_r+0x8>)
 80075e6:	f000 b8af 	b.w	8007748 <_fwalk_reent>
 80075ea:	bf00      	nop
 80075ec:	08007525 	.word	0x08007525

080075f0 <__sfmoreglue>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	2268      	movs	r2, #104	; 0x68
 80075f4:	1e4d      	subs	r5, r1, #1
 80075f6:	4355      	muls	r5, r2
 80075f8:	460e      	mov	r6, r1
 80075fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075fe:	f7ff fa65 	bl	8006acc <_malloc_r>
 8007602:	4604      	mov	r4, r0
 8007604:	b140      	cbz	r0, 8007618 <__sfmoreglue+0x28>
 8007606:	2100      	movs	r1, #0
 8007608:	e9c0 1600 	strd	r1, r6, [r0]
 800760c:	300c      	adds	r0, #12
 800760e:	60a0      	str	r0, [r4, #8]
 8007610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007614:	f7fd fb2e 	bl	8004c74 <memset>
 8007618:	4620      	mov	r0, r4
 800761a:	bd70      	pop	{r4, r5, r6, pc}

0800761c <__sfp_lock_acquire>:
 800761c:	4801      	ldr	r0, [pc, #4]	; (8007624 <__sfp_lock_acquire+0x8>)
 800761e:	f000 b8b3 	b.w	8007788 <__retarget_lock_acquire_recursive>
 8007622:	bf00      	nop
 8007624:	200002c1 	.word	0x200002c1

08007628 <__sfp_lock_release>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__sfp_lock_release+0x8>)
 800762a:	f000 b8ae 	b.w	800778a <__retarget_lock_release_recursive>
 800762e:	bf00      	nop
 8007630:	200002c1 	.word	0x200002c1

08007634 <__sinit_lock_acquire>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sinit_lock_acquire+0x8>)
 8007636:	f000 b8a7 	b.w	8007788 <__retarget_lock_acquire_recursive>
 800763a:	bf00      	nop
 800763c:	200002c2 	.word	0x200002c2

08007640 <__sinit_lock_release>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__sinit_lock_release+0x8>)
 8007642:	f000 b8a2 	b.w	800778a <__retarget_lock_release_recursive>
 8007646:	bf00      	nop
 8007648:	200002c2 	.word	0x200002c2

0800764c <__sinit>:
 800764c:	b510      	push	{r4, lr}
 800764e:	4604      	mov	r4, r0
 8007650:	f7ff fff0 	bl	8007634 <__sinit_lock_acquire>
 8007654:	69a3      	ldr	r3, [r4, #24]
 8007656:	b11b      	cbz	r3, 8007660 <__sinit+0x14>
 8007658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765c:	f7ff bff0 	b.w	8007640 <__sinit_lock_release>
 8007660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007664:	6523      	str	r3, [r4, #80]	; 0x50
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <__sinit+0x68>)
 8007668:	4a13      	ldr	r2, [pc, #76]	; (80076b8 <__sinit+0x6c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	62a2      	str	r2, [r4, #40]	; 0x28
 800766e:	42a3      	cmp	r3, r4
 8007670:	bf04      	itt	eq
 8007672:	2301      	moveq	r3, #1
 8007674:	61a3      	streq	r3, [r4, #24]
 8007676:	4620      	mov	r0, r4
 8007678:	f000 f820 	bl	80076bc <__sfp>
 800767c:	6060      	str	r0, [r4, #4]
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f81c 	bl	80076bc <__sfp>
 8007684:	60a0      	str	r0, [r4, #8]
 8007686:	4620      	mov	r0, r4
 8007688:	f000 f818 	bl	80076bc <__sfp>
 800768c:	2200      	movs	r2, #0
 800768e:	60e0      	str	r0, [r4, #12]
 8007690:	2104      	movs	r1, #4
 8007692:	6860      	ldr	r0, [r4, #4]
 8007694:	f7ff ff82 	bl	800759c <std>
 8007698:	68a0      	ldr	r0, [r4, #8]
 800769a:	2201      	movs	r2, #1
 800769c:	2109      	movs	r1, #9
 800769e:	f7ff ff7d 	bl	800759c <std>
 80076a2:	68e0      	ldr	r0, [r4, #12]
 80076a4:	2202      	movs	r2, #2
 80076a6:	2112      	movs	r1, #18
 80076a8:	f7ff ff78 	bl	800759c <std>
 80076ac:	2301      	movs	r3, #1
 80076ae:	61a3      	str	r3, [r4, #24]
 80076b0:	e7d2      	b.n	8007658 <__sinit+0xc>
 80076b2:	bf00      	nop
 80076b4:	08007b08 	.word	0x08007b08
 80076b8:	080075e5 	.word	0x080075e5

080076bc <__sfp>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	4607      	mov	r7, r0
 80076c0:	f7ff ffac 	bl	800761c <__sfp_lock_acquire>
 80076c4:	4b1e      	ldr	r3, [pc, #120]	; (8007740 <__sfp+0x84>)
 80076c6:	681e      	ldr	r6, [r3, #0]
 80076c8:	69b3      	ldr	r3, [r6, #24]
 80076ca:	b913      	cbnz	r3, 80076d2 <__sfp+0x16>
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff ffbd 	bl	800764c <__sinit>
 80076d2:	3648      	adds	r6, #72	; 0x48
 80076d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076d8:	3b01      	subs	r3, #1
 80076da:	d503      	bpl.n	80076e4 <__sfp+0x28>
 80076dc:	6833      	ldr	r3, [r6, #0]
 80076de:	b30b      	cbz	r3, 8007724 <__sfp+0x68>
 80076e0:	6836      	ldr	r6, [r6, #0]
 80076e2:	e7f7      	b.n	80076d4 <__sfp+0x18>
 80076e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076e8:	b9d5      	cbnz	r5, 8007720 <__sfp+0x64>
 80076ea:	4b16      	ldr	r3, [pc, #88]	; (8007744 <__sfp+0x88>)
 80076ec:	60e3      	str	r3, [r4, #12]
 80076ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076f2:	6665      	str	r5, [r4, #100]	; 0x64
 80076f4:	f000 f847 	bl	8007786 <__retarget_lock_init_recursive>
 80076f8:	f7ff ff96 	bl	8007628 <__sfp_lock_release>
 80076fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007704:	6025      	str	r5, [r4, #0]
 8007706:	61a5      	str	r5, [r4, #24]
 8007708:	2208      	movs	r2, #8
 800770a:	4629      	mov	r1, r5
 800770c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007710:	f7fd fab0 	bl	8004c74 <memset>
 8007714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800771c:	4620      	mov	r0, r4
 800771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007720:	3468      	adds	r4, #104	; 0x68
 8007722:	e7d9      	b.n	80076d8 <__sfp+0x1c>
 8007724:	2104      	movs	r1, #4
 8007726:	4638      	mov	r0, r7
 8007728:	f7ff ff62 	bl	80075f0 <__sfmoreglue>
 800772c:	4604      	mov	r4, r0
 800772e:	6030      	str	r0, [r6, #0]
 8007730:	2800      	cmp	r0, #0
 8007732:	d1d5      	bne.n	80076e0 <__sfp+0x24>
 8007734:	f7ff ff78 	bl	8007628 <__sfp_lock_release>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	e7ee      	b.n	800771c <__sfp+0x60>
 800773e:	bf00      	nop
 8007740:	08007b08 	.word	0x08007b08
 8007744:	ffff0001 	.word	0xffff0001

08007748 <_fwalk_reent>:
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	4606      	mov	r6, r0
 800774e:	4688      	mov	r8, r1
 8007750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007754:	2700      	movs	r7, #0
 8007756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800775a:	f1b9 0901 	subs.w	r9, r9, #1
 800775e:	d505      	bpl.n	800776c <_fwalk_reent+0x24>
 8007760:	6824      	ldr	r4, [r4, #0]
 8007762:	2c00      	cmp	r4, #0
 8007764:	d1f7      	bne.n	8007756 <_fwalk_reent+0xe>
 8007766:	4638      	mov	r0, r7
 8007768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776c:	89ab      	ldrh	r3, [r5, #12]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d907      	bls.n	8007782 <_fwalk_reent+0x3a>
 8007772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007776:	3301      	adds	r3, #1
 8007778:	d003      	beq.n	8007782 <_fwalk_reent+0x3a>
 800777a:	4629      	mov	r1, r5
 800777c:	4630      	mov	r0, r6
 800777e:	47c0      	blx	r8
 8007780:	4307      	orrs	r7, r0
 8007782:	3568      	adds	r5, #104	; 0x68
 8007784:	e7e9      	b.n	800775a <_fwalk_reent+0x12>

08007786 <__retarget_lock_init_recursive>:
 8007786:	4770      	bx	lr

08007788 <__retarget_lock_acquire_recursive>:
 8007788:	4770      	bx	lr

0800778a <__retarget_lock_release_recursive>:
 800778a:	4770      	bx	lr

0800778c <__swhatbuf_r>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	460e      	mov	r6, r1
 8007790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007794:	2900      	cmp	r1, #0
 8007796:	b096      	sub	sp, #88	; 0x58
 8007798:	4614      	mov	r4, r2
 800779a:	461d      	mov	r5, r3
 800779c:	da08      	bge.n	80077b0 <__swhatbuf_r+0x24>
 800779e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	061a      	lsls	r2, r3, #24
 80077a8:	d410      	bmi.n	80077cc <__swhatbuf_r+0x40>
 80077aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ae:	e00e      	b.n	80077ce <__swhatbuf_r+0x42>
 80077b0:	466a      	mov	r2, sp
 80077b2:	f000 f903 	bl	80079bc <_fstat_r>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	dbf1      	blt.n	800779e <__swhatbuf_r+0x12>
 80077ba:	9a01      	ldr	r2, [sp, #4]
 80077bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077c4:	425a      	negs	r2, r3
 80077c6:	415a      	adcs	r2, r3
 80077c8:	602a      	str	r2, [r5, #0]
 80077ca:	e7ee      	b.n	80077aa <__swhatbuf_r+0x1e>
 80077cc:	2340      	movs	r3, #64	; 0x40
 80077ce:	2000      	movs	r0, #0
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	b016      	add	sp, #88	; 0x58
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080077d8 <__smakebuf_r>:
 80077d8:	898b      	ldrh	r3, [r1, #12]
 80077da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077dc:	079d      	lsls	r5, r3, #30
 80077de:	4606      	mov	r6, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	d507      	bpl.n	80077f4 <__smakebuf_r+0x1c>
 80077e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	2301      	movs	r3, #1
 80077ee:	6163      	str	r3, [r4, #20]
 80077f0:	b002      	add	sp, #8
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	ab01      	add	r3, sp, #4
 80077f6:	466a      	mov	r2, sp
 80077f8:	f7ff ffc8 	bl	800778c <__swhatbuf_r>
 80077fc:	9900      	ldr	r1, [sp, #0]
 80077fe:	4605      	mov	r5, r0
 8007800:	4630      	mov	r0, r6
 8007802:	f7ff f963 	bl	8006acc <_malloc_r>
 8007806:	b948      	cbnz	r0, 800781c <__smakebuf_r+0x44>
 8007808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780c:	059a      	lsls	r2, r3, #22
 800780e:	d4ef      	bmi.n	80077f0 <__smakebuf_r+0x18>
 8007810:	f023 0303 	bic.w	r3, r3, #3
 8007814:	f043 0302 	orr.w	r3, r3, #2
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	e7e3      	b.n	80077e4 <__smakebuf_r+0xc>
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <__smakebuf_r+0x7c>)
 800781e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	6020      	str	r0, [r4, #0]
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	9b00      	ldr	r3, [sp, #0]
 800782c:	6163      	str	r3, [r4, #20]
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	6120      	str	r0, [r4, #16]
 8007832:	b15b      	cbz	r3, 800784c <__smakebuf_r+0x74>
 8007834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007838:	4630      	mov	r0, r6
 800783a:	f000 f8d1 	bl	80079e0 <_isatty_r>
 800783e:	b128      	cbz	r0, 800784c <__smakebuf_r+0x74>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	89a0      	ldrh	r0, [r4, #12]
 800784e:	4305      	orrs	r5, r0
 8007850:	81a5      	strh	r5, [r4, #12]
 8007852:	e7cd      	b.n	80077f0 <__smakebuf_r+0x18>
 8007854:	080075e5 	.word	0x080075e5

08007858 <_malloc_usable_size_r>:
 8007858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785c:	1f18      	subs	r0, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfbc      	itt	lt
 8007862:	580b      	ldrlt	r3, [r1, r0]
 8007864:	18c0      	addlt	r0, r0, r3
 8007866:	4770      	bx	lr

08007868 <_raise_r>:
 8007868:	291f      	cmp	r1, #31
 800786a:	b538      	push	{r3, r4, r5, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	d904      	bls.n	800787c <_raise_r+0x14>
 8007872:	2316      	movs	r3, #22
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800787e:	b112      	cbz	r2, 8007886 <_raise_r+0x1e>
 8007880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007884:	b94b      	cbnz	r3, 800789a <_raise_r+0x32>
 8007886:	4620      	mov	r0, r4
 8007888:	f000 f830 	bl	80078ec <_getpid_r>
 800788c:	462a      	mov	r2, r5
 800788e:	4601      	mov	r1, r0
 8007890:	4620      	mov	r0, r4
 8007892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007896:	f000 b817 	b.w	80078c8 <_kill_r>
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00a      	beq.n	80078b4 <_raise_r+0x4c>
 800789e:	1c59      	adds	r1, r3, #1
 80078a0:	d103      	bne.n	80078aa <_raise_r+0x42>
 80078a2:	2316      	movs	r3, #22
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	2001      	movs	r0, #1
 80078a8:	e7e7      	b.n	800787a <_raise_r+0x12>
 80078aa:	2400      	movs	r4, #0
 80078ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b0:	4628      	mov	r0, r5
 80078b2:	4798      	blx	r3
 80078b4:	2000      	movs	r0, #0
 80078b6:	e7e0      	b.n	800787a <_raise_r+0x12>

080078b8 <raise>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <raise+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f7ff bfd3 	b.w	8007868 <_raise_r>
 80078c2:	bf00      	nop
 80078c4:	2000000c 	.word	0x2000000c

080078c8 <_kill_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_kill_r+0x20>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	f7f9 fe6f 	bl	80015b8 <_kill>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d102      	bne.n	80078e4 <_kill_r+0x1c>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b103      	cbz	r3, 80078e4 <_kill_r+0x1c>
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	bf00      	nop
 80078e8:	200002bc 	.word	0x200002bc

080078ec <_getpid_r>:
 80078ec:	f7f9 be5c 	b.w	80015a8 <_getpid>

080078f0 <__sread>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	460c      	mov	r4, r1
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	f000 f894 	bl	8007a24 <_read_r>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	bfab      	itete	ge
 8007900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007902:	89a3      	ldrhlt	r3, [r4, #12]
 8007904:	181b      	addge	r3, r3, r0
 8007906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800790a:	bfac      	ite	ge
 800790c:	6563      	strge	r3, [r4, #84]	; 0x54
 800790e:	81a3      	strhlt	r3, [r4, #12]
 8007910:	bd10      	pop	{r4, pc}

08007912 <__swrite>:
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	461f      	mov	r7, r3
 8007918:	898b      	ldrh	r3, [r1, #12]
 800791a:	05db      	lsls	r3, r3, #23
 800791c:	4605      	mov	r5, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4616      	mov	r6, r2
 8007922:	d505      	bpl.n	8007930 <__swrite+0x1e>
 8007924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007928:	2302      	movs	r3, #2
 800792a:	2200      	movs	r2, #0
 800792c:	f000 f868 	bl	8007a00 <_lseek_r>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	4628      	mov	r0, r5
 8007942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007946:	f000 b817 	b.w	8007978 <_write_r>

0800794a <__sseek>:
 800794a:	b510      	push	{r4, lr}
 800794c:	460c      	mov	r4, r1
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	f000 f855 	bl	8007a00 <_lseek_r>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	bf15      	itete	ne
 800795c:	6560      	strne	r0, [r4, #84]	; 0x54
 800795e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007966:	81a3      	strheq	r3, [r4, #12]
 8007968:	bf18      	it	ne
 800796a:	81a3      	strhne	r3, [r4, #12]
 800796c:	bd10      	pop	{r4, pc}

0800796e <__sclose>:
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 b813 	b.w	800799c <_close_r>
	...

08007978 <_write_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d07      	ldr	r5, [pc, #28]	; (8007998 <_write_r+0x20>)
 800797c:	4604      	mov	r4, r0
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	2200      	movs	r2, #0
 8007984:	602a      	str	r2, [r5, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f7f9 fe4d 	bl	8001626 <_write>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_write_r+0x1e>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_write_r+0x1e>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200002bc 	.word	0x200002bc

0800799c <_close_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d06      	ldr	r5, [pc, #24]	; (80079b8 <_close_r+0x1c>)
 80079a0:	2300      	movs	r3, #0
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	f7f9 fe59 	bl	800165e <_close>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_close_r+0x1a>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_close_r+0x1a>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	200002bc 	.word	0x200002bc

080079bc <_fstat_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d07      	ldr	r5, [pc, #28]	; (80079dc <_fstat_r+0x20>)
 80079c0:	2300      	movs	r3, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	4611      	mov	r1, r2
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	f7f9 fe54 	bl	8001676 <_fstat>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	d102      	bne.n	80079d8 <_fstat_r+0x1c>
 80079d2:	682b      	ldr	r3, [r5, #0]
 80079d4:	b103      	cbz	r3, 80079d8 <_fstat_r+0x1c>
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	bd38      	pop	{r3, r4, r5, pc}
 80079da:	bf00      	nop
 80079dc:	200002bc 	.word	0x200002bc

080079e0 <_isatty_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d06      	ldr	r5, [pc, #24]	; (80079fc <_isatty_r+0x1c>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7f9 fe53 	bl	8001696 <_isatty>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_isatty_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_isatty_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	200002bc 	.word	0x200002bc

08007a00 <_lseek_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	; (8007a20 <_lseek_r+0x20>)
 8007a04:	4604      	mov	r4, r0
 8007a06:	4608      	mov	r0, r1
 8007a08:	4611      	mov	r1, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7f9 fe4c 	bl	80016ac <_lseek>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_lseek_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_lseek_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	200002bc 	.word	0x200002bc

08007a24 <_read_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d07      	ldr	r5, [pc, #28]	; (8007a44 <_read_r+0x20>)
 8007a28:	4604      	mov	r4, r0
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	602a      	str	r2, [r5, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7f9 fdda 	bl	80015ec <_read>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_read_r+0x1e>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_read_r+0x1e>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200002bc 	.word	0x200002bc

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
