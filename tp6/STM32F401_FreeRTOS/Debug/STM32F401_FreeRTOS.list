
STM32F401_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003810  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003afc  08003afc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003afc  08003afc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a3a4  20000070  08003b7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000a414  08003b7c  0002a414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9ff  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4d  00000000  00000000  0002ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  0002d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002df40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000113b9  00000000  00000000  0002e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000071f8  00000000  00000000  0003f961  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005d2c0  00000000  00000000  00046b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a3e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d78  00000000  00000000  000a3e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003998 	.word	0x08003998

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003998 	.word	0x08003998

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f103 0208 	add.w	r2, r3, #8
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f04f 32ff 	mov.w	r2, #4294967295
 80002a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f103 0208 	add.w	r2, r3, #8
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f103 0208 	add.w	r2, r3, #8
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002ea:	b480      	push	{r7}
 80002ec:	b085      	sub	sp, #20
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d103      	bne.n	800030a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e00c      	b.n	8000324 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3308      	adds	r3, #8
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e002      	b.n	8000318 <vListInsert+0x2e>
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	429a      	cmp	r2, r3
 8000322:	d2f6      	bcs.n	8000312 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	6892      	ldr	r2, [r2, #8]
 8000372:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	6852      	ldr	r2, [r2, #4]
 800037c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	d103      	bne.n	8000390 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	1e5a      	subs	r2, r3, #1
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	681b      	ldr	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10d      	bne.n	80003e4 <xQueueGenericReset+0x34>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003cc:	f383 8811 	msr	BASEPRI, r3
 80003d0:	f3bf 8f6f 	isb	sy
 80003d4:	f3bf 8f4f 	dsb	sy
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	f44f 7188 	mov.w	r1, #272	; 0x110
 80003de:	4841      	ldr	r0, [pc, #260]	; (80004e4 <xQueueGenericReset+0x134>)
 80003e0:	f002 fc0e 	bl	8002c00 <assert_failed>

    if( ( pxQueue != NULL ) &&
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d063      	beq.n	80004b2 <xQueueGenericReset+0x102>
        ( pxQueue->uxLength >= 1U ) &&
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d05f      	beq.n	80004b2 <xQueueGenericReset+0x102>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003fa:	2000      	movs	r0, #0
 80003fc:	fba2 1203 	umull	r1, r2, r2, r3
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	f04f 0400 	mov.w	r4, #0
 8000408:	0013      	movs	r3, r2
 800040a:	2400      	movs	r4, #0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d000      	beq.n	8000412 <xQueueGenericReset+0x62>
 8000410:	2001      	movs	r0, #1
 8000412:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000414:	2b00      	cmp	r3, #0
 8000416:	d14c      	bne.n	80004b2 <xQueueGenericReset+0x102>
    {
        taskENTER_CRITICAL();
 8000418:	f001 fe40 	bl	800209c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000424:	6939      	ldr	r1, [r7, #16]
 8000426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000428:	fb01 f303 	mul.w	r3, r1, r3
 800042c:	441a      	add	r2, r3
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	2200      	movs	r2, #0
 8000436:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000448:	3b01      	subs	r3, #1
 800044a:	6939      	ldr	r1, [r7, #16]
 800044c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800044e:	fb01 f303 	mul.w	r3, r1, r3
 8000452:	441a      	add	r2, r3
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	22ff      	movs	r2, #255	; 0xff
 800045c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	22ff      	movs	r2, #255	; 0xff
 8000464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d114      	bne.n	8000498 <xQueueGenericReset+0xe8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d01a      	beq.n	80004ac <xQueueGenericReset+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	3310      	adds	r3, #16
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f864 	bl	8001548 <xTaskRemoveFromEventList>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d012      	beq.n	80004ac <xQueueGenericReset+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <xQueueGenericReset+0x138>)
 8000488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	f3bf 8f4f 	dsb	sy
 8000492:	f3bf 8f6f 	isb	sy
 8000496:	e009      	b.n	80004ac <xQueueGenericReset+0xfc>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	3310      	adds	r3, #16
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fef7 	bl	8000290 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	3324      	adds	r3, #36	; 0x24
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fef2 	bl	8000290 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80004ac:	f001 fe28 	bl	8002100 <vPortExitCritical>
 80004b0:	e001      	b.n	80004b6 <xQueueGenericReset+0x106>
    }
    else
    {
        xReturn = pdFAIL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d10d      	bne.n	80004d8 <xQueueGenericReset+0x128>
 80004bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c0:	f383 8811 	msr	BASEPRI, r3
 80004c4:	f3bf 8f6f 	isb	sy
 80004c8:	f3bf 8f4f 	dsb	sy
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	f240 1145 	movw	r1, #325	; 0x145
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <xQueueGenericReset+0x134>)
 80004d4:	f002 fb94 	bl	8002c00 <assert_failed>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80004d8:	697b      	ldr	r3, [r7, #20]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd90      	pop	{r4, r7, pc}
 80004e2:	bf00      	nop
 80004e4:	080039b0 	.word	0x080039b0
 80004e8:	e000ed04 	.word	0xe000ed04

080004ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	4613      	mov	r3, r2
 80004f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d034      	beq.n	800056e <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000504:	2000      	movs	r0, #0
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	fba2 1203 	umull	r1, r2, r2, r3
 800050e:	f04f 0300 	mov.w	r3, #0
 8000512:	f04f 0400 	mov.w	r4, #0
 8000516:	0013      	movs	r3, r2
 8000518:	2400      	movs	r4, #0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d000      	beq.n	8000520 <xQueueGenericCreate+0x34>
 800051e:	2001      	movs	r0, #1
 8000520:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000522:	2b00      	cmp	r3, #0
 8000524:	d123      	bne.n	800056e <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800052e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000532:	d81c      	bhi.n	800056e <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	fb02 f303 	mul.w	r3, r2, r3
 800053c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	3350      	adds	r3, #80	; 0x50
 8000542:	4618      	mov	r0, r3
 8000544:	f001 ffbc 	bl	80024c0 <pvPortMalloc>
 8000548:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d01f      	beq.n	8000590 <xQueueGenericCreate+0xa4>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3350      	adds	r3, #80	; 0x50
 8000558:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800055a:	79fa      	ldrb	r2, [r7, #7]
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	4613      	mov	r3, r2
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	68b9      	ldr	r1, [r7, #8]
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f000 f81a 	bl	80005a0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800056c:	e010      	b.n	8000590 <xQueueGenericCreate+0xa4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10d      	bne.n	8000590 <xQueueGenericCreate+0xa4>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <xQueueGenericCreate+0xb0>)
 800058c:	f002 fb38 	bl	8002c00 <assert_failed>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000590:	69fb      	ldr	r3, [r7, #28]
    }
 8000592:	4618      	mov	r0, r3
 8000594:	3724      	adds	r7, #36	; 0x24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	bf00      	nop
 800059c:	080039b0 	.word	0x080039b0

080005a0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	69ba      	ldr	r2, [r7, #24]
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e002      	b.n	80005c2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005ce:	2101      	movs	r1, #1
 80005d0:	69b8      	ldr	r0, [r7, #24]
 80005d2:	f7ff feed 	bl	80003b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	78fa      	ldrb	r2, [r7, #3]
 80005da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10d      	bne.n	8000618 <xQueueGiveFromISR+0x30>
 80005fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000600:	f383 8811 	msr	BASEPRI, r3
 8000604:	f3bf 8f6f 	isb	sy
 8000608:	f3bf 8f4f 	dsb	sy
 800060c:	623b      	str	r3, [r7, #32]
 800060e:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8000612:	4849      	ldr	r0, [pc, #292]	; (8000738 <xQueueGiveFromISR+0x150>)
 8000614:	f002 faf4 	bl	8002c00 <assert_failed>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00d      	beq.n	800063c <xQueueGiveFromISR+0x54>
 8000620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000624:	f383 8811 	msr	BASEPRI, r3
 8000628:	f3bf 8f6f 	isb	sy
 800062c:	f3bf 8f4f 	dsb	sy
 8000630:	61fb      	str	r3, [r7, #28]
 8000632:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000636:	4840      	ldr	r0, [pc, #256]	; (8000738 <xQueueGiveFromISR+0x150>)
 8000638:	f002 fae2 	bl	8002c00 <assert_failed>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800063c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <xQueueGiveFromISR+0x64>
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <xQueueGiveFromISR+0x68>
 800064c:	2301      	movs	r3, #1
 800064e:	e000      	b.n	8000652 <xQueueGiveFromISR+0x6a>
 8000650:	2300      	movs	r3, #0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10d      	bne.n	8000672 <xQueueGiveFromISR+0x8a>
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	f240 41b6 	movw	r1, #1206	; 0x4b6
 800066c:	4832      	ldr	r0, [pc, #200]	; (8000738 <xQueueGiveFromISR+0x150>)
 800066e:	f002 fac7 	bl	8002c00 <assert_failed>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000672:	f001 fedf 	bl	8002434 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000676:	f3ef 8211 	mrs	r2, BASEPRI
 800067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	617a      	str	r2, [r7, #20]
 800068c:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800068e:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800069e:	429a      	cmp	r2, r3
 80006a0:	d23d      	bcs.n	800071e <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80006a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80006ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80006b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d112      	bne.n	80006e4 <xQueueGiveFromISR+0xfc>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d028      	beq.n	8000718 <xQueueGiveFromISR+0x130>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3324      	adds	r3, #36	; 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ff3c 	bl	8001548 <xTaskRemoveFromEventList>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d020      	beq.n	8000718 <xQueueGiveFromISR+0x130>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01d      	beq.n	8000718 <xQueueGiveFromISR+0x130>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	e019      	b.n	8000718 <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80006e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80006e8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ea:	d10d      	bne.n	8000708 <xQueueGiveFromISR+0x120>
        __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	f240 5135 	movw	r1, #1333	; 0x535
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <xQueueGiveFromISR+0x150>)
 8000704:	f002 fa7c 	bl	8002c00 <assert_failed>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	3301      	adds	r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000718:	2301      	movs	r3, #1
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
 800071c:	e001      	b.n	8000722 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800071e:	2300      	movs	r3, #0
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
 8000722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000724:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800072e:	4618      	mov	r0, r3
 8000730:	3738      	adds	r7, #56	; 0x38
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	080039b0 	.word	0x080039b0

0800073c <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10d      	bne.n	8000774 <xQueueSemaphoreTake+0x38>
        __asm volatile
 8000758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075c:	f383 8811 	msr	BASEPRI, r3
 8000760:	f3bf 8f6f 	isb	sy
 8000764:	f3bf 8f4f 	dsb	sy
 8000768:	623b      	str	r3, [r7, #32]
 800076a:	f240 51e3 	movw	r1, #1507	; 0x5e3
 800076e:	487e      	ldr	r0, [pc, #504]	; (8000968 <xQueueSemaphoreTake+0x22c>)
 8000770:	f002 fa46 	bl	8002c00 <assert_failed>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00d      	beq.n	8000798 <xQueueSemaphoreTake+0x5c>
 800077c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000780:	f383 8811 	msr	BASEPRI, r3
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	f3bf 8f4f 	dsb	sy
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	f240 51e7 	movw	r1, #1511	; 0x5e7
 8000792:	4875      	ldr	r0, [pc, #468]	; (8000968 <xQueueSemaphoreTake+0x22c>)
 8000794:	f002 fa34 	bl	8002c00 <assert_failed>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000798:	f001 f95c 	bl	8001a54 <xTaskGetSchedulerState>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <xQueueSemaphoreTake+0x6c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <xQueueSemaphoreTake+0x70>
 80007a8:	2301      	movs	r3, #1
 80007aa:	e000      	b.n	80007ae <xQueueSemaphoreTake+0x72>
 80007ac:	2300      	movs	r3, #0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d10d      	bne.n	80007ce <xQueueSemaphoreTake+0x92>
 80007b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b6:	f383 8811 	msr	BASEPRI, r3
 80007ba:	f3bf 8f6f 	isb	sy
 80007be:	f3bf 8f4f 	dsb	sy
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	f240 51ec 	movw	r1, #1516	; 0x5ec
 80007c8:	4867      	ldr	r0, [pc, #412]	; (8000968 <xQueueSemaphoreTake+0x22c>)
 80007ca:	f002 fa19 	bl	8002c00 <assert_failed>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80007ce:	f001 fc65 	bl	800209c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d024      	beq.n	8000828 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80007de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d104      	bne.n	80007f8 <xQueueSemaphoreTake+0xbc>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80007ee:	f001 fa99 	bl	8001d24 <pvTaskIncrementMutexHeldCount>
 80007f2:	4602      	mov	r2, r0
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00f      	beq.n	8000820 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000802:	3310      	adds	r3, #16
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fe9f 	bl	8001548 <xTaskRemoveFromEventList>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d007      	beq.n	8000820 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <xQueueSemaphoreTake+0x230>)
 8000812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	f3bf 8f4f 	dsb	sy
 800081c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000820:	f001 fc6e 	bl	8002100 <vPortExitCritical>
                return pdPASS;
 8000824:	2301      	movs	r3, #1
 8000826:	e09a      	b.n	800095e <xQueueSemaphoreTake+0x222>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d114      	bne.n	8000858 <xQueueSemaphoreTake+0x11c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00d      	beq.n	8000850 <xQueueSemaphoreTake+0x114>
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	f240 6132 	movw	r1, #1586	; 0x632
 800084a:	4847      	ldr	r0, [pc, #284]	; (8000968 <xQueueSemaphoreTake+0x22c>)
 800084c:	f002 f9d8 	bl	8002c00 <assert_failed>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000850:	f001 fc56 	bl	8002100 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000854:	2300      	movs	r3, #0
 8000856:	e082      	b.n	800095e <xQueueSemaphoreTake+0x222>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <xQueueSemaphoreTake+0x130>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ff50 	bl	8001708 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000868:	2301      	movs	r3, #1
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800086c:	f001 fc48 	bl	8002100 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000870:	f000 fb1a 	bl	8000ea8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000874:	f001 fc12 	bl	800209c <vPortEnterCritical>
 8000878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800087e:	b25b      	sxtb	r3, r3
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d103      	bne.n	800088e <xQueueSemaphoreTake+0x152>
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000894:	b25b      	sxtb	r3, r3
 8000896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089a:	d103      	bne.n	80008a4 <xQueueSemaphoreTake+0x168>
 800089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008a4:	f001 fc2c 	bl	8002100 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008a8:	463a      	mov	r2, r7
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 ff3f 	bl	8001734 <xTaskCheckForTimeOut>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d132      	bne.n	8000922 <xQueueSemaphoreTake+0x1e6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008be:	f000 f8c1 	bl	8000a44 <prvIsQueueEmpty>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d026      	beq.n	8000916 <xQueueSemaphoreTake+0x1da>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d109      	bne.n	80008e4 <xQueueSemaphoreTake+0x1a8>
                        {
                            taskENTER_CRITICAL();
 80008d0:	f001 fbe4 	bl	800209c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 f8d9 	bl	8001a90 <xTaskPriorityInherit>
 80008de:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80008e0:	f001 fc0e 	bl	8002100 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80008e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e6:	3324      	adds	r3, #36	; 0x24
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fe01 	bl	80014f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80008f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008f4:	f000 f854 	bl	80009a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80008f8:	f000 fb1c 	bl	8000f34 <xTaskResumeAll>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f47f af65 	bne.w	80007ce <xQueueSemaphoreTake+0x92>
                {
                    portYIELD_WITHIN_API();
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <xQueueSemaphoreTake+0x230>)
 8000906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	f3bf 8f6f 	isb	sy
 8000914:	e75b      	b.n	80007ce <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000918:	f000 f842 	bl	80009a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800091c:	f000 fb0a 	bl	8000f34 <xTaskResumeAll>
 8000920:	e755      	b.n	80007ce <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000924:	f000 f83c 	bl	80009a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000928:	f000 fb04 	bl	8000f34 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800092c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800092e:	f000 f889 	bl	8000a44 <prvIsQueueEmpty>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	f43f af4a 	beq.w	80007ce <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00d      	beq.n	800095c <xQueueSemaphoreTake+0x220>
                        {
                            taskENTER_CRITICAL();
 8000940:	f001 fbac 	bl	800209c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000946:	f000 f813 	bl	8000970 <prvGetDisinheritPriorityAfterTimeout>
 800094a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f930 	bl	8001bb8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8000958:	f001 fbd2 	bl	8002100 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800095c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800095e:	4618      	mov	r0, r3
 8000960:	3738      	adds	r7, #56	; 0x38
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	080039b0 	.word	0x080039b0
 800096c:	e000ed04 	.word	0xe000ed04

08000970 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f1c3 031f 	rsb	r3, r3, #31
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e001      	b.n	8000992 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000992:	68fb      	ldr	r3, [r7, #12]
    }
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80009a8:	f001 fb78 	bl	800209c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80009b4:	e011      	b.n	80009da <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d012      	beq.n	80009e4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3324      	adds	r3, #36	; 0x24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fdc0 	bl	8001548 <xTaskRemoveFromEventList>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80009ce:	f000 ff1f 	bl	8001810 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dce9      	bgt.n	80009b6 <prvUnlockQueue+0x16>
 80009e2:	e000      	b.n	80009e6 <prvUnlockQueue+0x46>
                        break;
 80009e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80009ee:	f001 fb87 	bl	8002100 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80009f2:	f001 fb53 	bl	800209c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80009fe:	e011      	b.n	8000a24 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d012      	beq.n	8000a2e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fd9b 	bl	8001548 <xTaskRemoveFromEventList>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a18:	f000 fefa 	bl	8001810 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dce9      	bgt.n	8000a00 <prvUnlockQueue+0x60>
 8000a2c:	e000      	b.n	8000a30 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000a2e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000a38:	f001 fb62 	bl	8002100 <vPortExitCritical>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000a4c:	f001 fb26 	bl	800209c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e001      	b.n	8000a62 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000a62:	f001 fb4d 	bl	8002100 <vPortExitCritical>

    return xReturn;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af04      	add	r7, sp, #16
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fd1c 	bl	80024c0 <pvPortMalloc>
 8000a88:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00e      	beq.n	8000aae <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000a90:	2070      	movs	r0, #112	; 0x70
 8000a92:	f001 fd15 	bl	80024c0 <pvPortMalloc>
 8000a96:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa4:	e005      	b.n	8000ab2 <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f001 fdf4 	bl	8002694 <vPortFree>
 8000aac:	e001      	b.n	8000ab2 <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d013      	beq.n	8000ae0 <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9303      	str	r3, [sp, #12]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f000 f80e 	bl	8000af0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f000 f8b7 	bl	8000c48 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	e002      	b.n	8000ae6 <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000ae6:	69bb      	ldr	r3, [r7, #24]
    }
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	461a      	mov	r2, r3
 8000b08:	21a5      	movs	r1, #165	; 0xa5
 8000b0a:	f002 fc28 	bl	800335e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	f023 0307 	bic.w	r3, r3, #7
 8000b26:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00d      	beq.n	8000b4e <prvInitialiseNewTask+0x5e>
 8000b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000b48:	483e      	ldr	r0, [pc, #248]	; (8000c44 <prvInitialiseNewTask+0x154>)
 8000b4a:	f002 f859 	bl	8002c00 <assert_failed>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d01f      	beq.n	8000b94 <prvInitialiseNewTask+0xa4>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	e012      	b.n	8000b80 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	4413      	add	r3, r2
 8000b60:	7819      	ldrb	r1, [r3, #0]
 8000b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	4413      	add	r3, r2
 8000b68:	3334      	adds	r3, #52	; 0x34
 8000b6a:	460a      	mov	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d9e9      	bls.n	8000b5a <prvInitialiseNewTask+0x6a>
 8000b86:	e000      	b.n	8000b8a <prvInitialiseNewTask+0x9a>
            {
                break;
 8000b88:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000b92:	e003      	b.n	8000b9c <prvInitialiseNewTask+0xac>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9e:	2b1e      	cmp	r3, #30
 8000ba0:	d90d      	bls.n	8000bbe <prvInitialiseNewTask+0xce>
 8000ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba6:	f383 8811 	msr	BASEPRI, r3
 8000baa:	f3bf 8f6f 	isb	sy
 8000bae:	f3bf 8f4f 	dsb	sy
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	f240 3197 	movw	r1, #919	; 0x397
 8000bb8:	4822      	ldr	r0, [pc, #136]	; (8000c44 <prvInitialiseNewTask+0x154>)
 8000bba:	f002 f821 	bl	8002c00 <assert_failed>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc0:	2b1e      	cmp	r3, #30
 8000bc2:	d901      	bls.n	8000bc8 <prvInitialiseNewTask+0xd8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bc4:	231e      	movs	r3, #30
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd2:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bdc:	3304      	adds	r3, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fb76 	bl	80002d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be6:	3318      	adds	r3, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fb71 	bl	80002d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	f1c3 021f 	rsb	r2, r3, #31
 8000bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	2200      	movs	r2, #0
 8000c08:	655a      	str	r2, [r3, #84]	; 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	66da      	str	r2, [r3, #108]	; 0x6c
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	3358      	adds	r3, #88	; 0x58
 8000c14:	2214      	movs	r2, #20
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fba0 	bl	800335e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	69b8      	ldr	r0, [r7, #24]
 8000c24:	f001 f900 	bl	8001e28 <pxPortInitialiseStack>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <prvInitialiseNewTask+0x14a>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c38:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	080039cc 	.word	0x080039cc

08000c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000c50:	f001 fa24 	bl	800209c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000c5c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c6c:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d110      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000c74:	f000 fe56 	bl	8001924 <prvInitialiseTaskLists>
 8000c78:	e00d      	b.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <prvAddNewTaskToReadyList+0x120>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d802      	bhi.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c90:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <prvAddNewTaskToReadyList+0x124>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <prvAddNewTaskToReadyList+0x124>)
 8000c9e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <prvAddNewTaskToReadyList+0x124>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f002 f903 	bl	8002eb4 <task_to_ready>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <prvAddNewTaskToReadyList+0x128>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d903      	bls.n	8000cc2 <prvAddNewTaskToReadyList+0x7a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <prvAddNewTaskToReadyList+0x128>)
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	492b      	ldr	r1, [pc, #172]	; (8000d74 <prvAddNewTaskToReadyList+0x12c>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	3204      	adds	r2, #4
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1d1a      	adds	r2, r3, #4
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <prvAddNewTaskToReadyList+0x12c>)
 8000d06:	441a      	add	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d10:	4918      	ldr	r1, [pc, #96]	; (8000d74 <prvAddNewTaskToReadyList+0x12c>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1c59      	adds	r1, r3, #1
 8000d20:	4814      	ldr	r0, [pc, #80]	; (8000d74 <prvAddNewTaskToReadyList+0x12c>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4403      	add	r3, r0
 8000d2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000d2e:	f001 f9e7 	bl	8002100 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <prvAddNewTaskToReadyList+0x120>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00e      	beq.n	8000d58 <prvAddNewTaskToReadyList+0x110>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <prvAddNewTaskToReadyList+0x110>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <prvAddNewTaskToReadyList+0x130>)
 8000d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000036c 	.word	0x2000036c
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	20000378 	.word	0x20000378
 8000d6c:	20000388 	.word	0x20000388
 8000d70:	20000374 	.word	0x20000374
 8000d74:	20000090 	.word	0x20000090
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d01a      	beq.n	8000dc4 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <vTaskDelay+0x68>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00d      	beq.n	8000db2 <vTaskDelay+0x36>
 8000d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9a:	f383 8811 	msr	BASEPRI, r3
 8000d9e:	f3bf 8f6f 	isb	sy
 8000da2:	f3bf 8f4f 	dsb	sy
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	f240 5149 	movw	r1, #1353	; 0x549
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <vTaskDelay+0x6c>)
 8000dae:	f001 ff27 	bl	8002c00 <assert_failed>
            vTaskSuspendAll();
 8000db2:	f000 f879 	bl	8000ea8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000db6:	2100      	movs	r1, #0
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 ffc7 	bl	8001d4c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000dbe:	f000 f8b9 	bl	8000f34 <xTaskResumeAll>
 8000dc2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d107      	bne.n	8000dda <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <vTaskDelay+0x70>)
 8000dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000394 	.word	0x20000394
 8000de8:	080039cc 	.word	0x080039cc
 8000dec:	e000ed04 	.word	0xe000ed04

08000df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <vTaskStartScheduler+0x94>)
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e04:	4920      	ldr	r1, [pc, #128]	; (8000e88 <vTaskStartScheduler+0x98>)
 8000e06:	4821      	ldr	r0, [pc, #132]	; (8000e8c <vTaskStartScheduler+0x9c>)
 8000e08:	f7ff fe32 	bl	8000a70 <xTaskCreate>
 8000e0c:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d11f      	bne.n	8000e54 <vTaskStartScheduler+0x64>
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <vTaskStartScheduler+0xa0>)
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <vTaskStartScheduler+0xa4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <vTaskStartScheduler+0xa8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8000e3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e3e:	f001 fff3 	bl	8002e28 <TIM5_Init>

        traceTASK_SWITCHED_IN();
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <vTaskStartScheduler+0xac>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f83f 	bl	8002ecc <switched_in>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000e4e:	f001 f879 	bl	8001f44 <xPortStartScheduler>
 8000e52:	e011      	b.n	8000e78 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5a:	d10d      	bne.n	8000e78 <vTaskStartScheduler+0x88>
 8000e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e60:	f383 8811 	msr	BASEPRI, r3
 8000e64:	f3bf 8f6f 	isb	sy
 8000e68:	f3bf 8f4f 	dsb	sy
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <vTaskStartScheduler+0xb0>)
 8000e74:	f001 fec4 	bl	8002c00 <assert_failed>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <vTaskStartScheduler+0xb4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000390 	.word	0x20000390
 8000e88:	080039e8 	.word	0x080039e8
 8000e8c:	08001829 	.word	0x08001829
 8000e90:	2000038c 	.word	0x2000038c
 8000e94:	20000378 	.word	0x20000378
 8000e98:	20000370 	.word	0x20000370
 8000e9c:	2000008c 	.word	0x2000008c
 8000ea0:	080039cc 	.word	0x080039cc
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <vTaskSuspendAll+0x18>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <vTaskSuspendAll+0x18>)
 8000eb4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20000394 	.word	0x20000394

08000ec4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
            {
                if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <prvGetExpectedIdleTime+0x5c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <prvGetExpectedIdleTime+0x16>
                {
                    uxHigherPriorityReadyTasks = pdTRUE;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	603b      	str	r3, [r7, #0]
                    uxHigherPriorityReadyTasks = pdTRUE;
                }
            }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <prvGetExpectedIdleTime+0x60>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	e012      	b.n	8000f10 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <prvGetExpectedIdleTime+0x64>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d902      	bls.n	8000ef8 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e00b      	b.n	8000f10 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e005      	b.n	8000f10 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <prvGetExpectedIdleTime+0x68>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <prvGetExpectedIdleTime+0x6c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8000f10:	687b      	ldr	r3, [r7, #4]
    }
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000374 	.word	0x20000374
 8000f24:	2000008c 	.word	0x2000008c
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	2000038c 	.word	0x2000038c
 8000f30:	20000370 	.word	0x20000370

08000f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000f42:	4b74      	ldr	r3, [pc, #464]	; (8001114 <xTaskResumeAll+0x1e0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10d      	bne.n	8000f66 <xTaskResumeAll+0x32>
 8000f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4e:	f383 8811 	msr	BASEPRI, r3
 8000f52:	f3bf 8f6f 	isb	sy
 8000f56:	f3bf 8f4f 	dsb	sy
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f640 01b3 	movw	r1, #2227	; 0x8b3
 8000f60:	486d      	ldr	r0, [pc, #436]	; (8001118 <xTaskResumeAll+0x1e4>)
 8000f62:	f001 fe4d 	bl	8002c00 <assert_failed>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000f66:	f001 f899 	bl	800209c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000f6a:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <xTaskResumeAll+0x1e0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a68      	ldr	r2, [pc, #416]	; (8001114 <xTaskResumeAll+0x1e0>)
 8000f72:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f74:	4b67      	ldr	r3, [pc, #412]	; (8001114 <xTaskResumeAll+0x1e0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f040 80c4 	bne.w	8001106 <xTaskResumeAll+0x1d2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f7e:	4b67      	ldr	r3, [pc, #412]	; (800111c <xTaskResumeAll+0x1e8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80bf 	beq.w	8001106 <xTaskResumeAll+0x1d2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f88:	e08e      	b.n	80010a8 <xTaskResumeAll+0x174>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f8a:	4b65      	ldr	r3, [pc, #404]	; (8001120 <xTaskResumeAll+0x1ec>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	6a12      	ldr	r2, [r2, #32]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	69d2      	ldr	r2, [r2, #28]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d103      	bne.n	8000fc0 <xTaskResumeAll+0x8c>
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	68d2      	ldr	r2, [r2, #12]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	6892      	ldr	r2, [r2, #8]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d103      	bne.n	8000ffe <xTaskResumeAll+0xca>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800100e:	69f8      	ldr	r0, [r7, #28]
 8001010:	f001 ff50 	bl	8002eb4 <task_to_ready>
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <xTaskResumeAll+0x1f0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d903      	bls.n	8001028 <xTaskResumeAll+0xf4>
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	4a3f      	ldr	r2, [pc, #252]	; (8001124 <xTaskResumeAll+0x1f0>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	493e      	ldr	r1, [pc, #248]	; (8001128 <xTaskResumeAll+0x1f4>)
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3304      	adds	r3, #4
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	3204      	adds	r2, #4
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	1d1a      	adds	r2, r3, #4
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <xTaskResumeAll+0x1f4>)
 800106c:	441a      	add	r2, r3
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001076:	492c      	ldr	r1, [pc, #176]	; (8001128 <xTaskResumeAll+0x1f4>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1c59      	adds	r1, r3, #1
 8001086:	4828      	ldr	r0, [pc, #160]	; (8001128 <xTaskResumeAll+0x1f4>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4403      	add	r3, r0
 8001092:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <xTaskResumeAll+0x1f8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	429a      	cmp	r2, r3
 80010a0:	d302      	bcc.n	80010a8 <xTaskResumeAll+0x174>
                    {
                        xYieldPending = pdTRUE;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <xTaskResumeAll+0x1fc>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <xTaskResumeAll+0x1ec>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f47f af6c 	bne.w	8000f8a <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <xTaskResumeAll+0x188>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80010b8:	f000 fcb0 	bl	8001a1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <xTaskResumeAll+0x200>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d010      	beq.n	80010ea <xTaskResumeAll+0x1b6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80010c8:	f000 f862 	bl	8001190 <xTaskIncrementTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <xTaskResumeAll+0x1a4>
                            {
                                xYieldPending = pdTRUE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <xTaskResumeAll+0x1fc>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3b01      	subs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f1      	bne.n	80010c8 <xTaskResumeAll+0x194>

                        xPendedTicks = 0;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <xTaskResumeAll+0x200>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <xTaskResumeAll+0x1fc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <xTaskResumeAll+0x1d2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <xTaskResumeAll+0x204>)
 80010f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	f3bf 8f4f 	dsb	sy
 8001102:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001106:	f000 fffb 	bl	8002100 <vPortExitCritical>

    return xAlreadyYielded;
 800110a:	69bb      	ldr	r3, [r7, #24]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000394 	.word	0x20000394
 8001118:	080039cc 	.word	0x080039cc
 800111c:	2000036c 	.word	0x2000036c
 8001120:	2000032c 	.word	0x2000032c
 8001124:	20000374 	.word	0x20000374
 8001128:	20000090 	.word	0x20000090
 800112c:	2000008c 	.word	0x2000008c
 8001130:	20000380 	.word	0x20000380
 8001134:	2000037c 	.word	0x2000037c
 8001138:	e000ed04 	.word	0xe000ed04

0800113c <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( const TickType_t xTicksToJump )
    {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <vTaskStepTick+0x48>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	441a      	add	r2, r3
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <vTaskStepTick+0x4c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d90d      	bls.n	8001170 <vTaskStepTick+0x34>
 8001154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001158:	f383 8811 	msr	BASEPRI, r3
 800115c:	f3bf 8f6f 	isb	sy
 8001160:	f3bf 8f4f 	dsb	sy
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	f640 2146 	movw	r1, #2630	; 0xa46
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <vTaskStepTick+0x50>)
 800116c:	f001 fd48 	bl	8002c00 <assert_failed>
        xTickCount += xTicksToJump;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <vTaskStepTick+0x48>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	4a02      	ldr	r2, [pc, #8]	; (8001184 <vTaskStepTick+0x48>)
 800117a:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000370 	.word	0x20000370
 8001188:	2000038c 	.word	0x2000038c
 800118c:	080039cc 	.word	0x080039cc

08001190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <xTaskIncrementTick+0x220>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 80f9 	bne.w	8001396 <xTaskIncrementTick+0x206>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80011a4:	4b83      	ldr	r3, [pc, #524]	; (80013b4 <xTaskIncrementTick+0x224>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80011ac:	4a81      	ldr	r2, [pc, #516]	; (80013b4 <xTaskIncrementTick+0x224>)
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d123      	bne.n	8001200 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80011b8:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <xTaskIncrementTick+0x228>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00d      	beq.n	80011de <xTaskIncrementTick+0x4e>
 80011c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	f640 21c7 	movw	r1, #2759	; 0xac7
 80011d8:	4878      	ldr	r0, [pc, #480]	; (80013bc <xTaskIncrementTick+0x22c>)
 80011da:	f001 fd11 	bl	8002c00 <assert_failed>
 80011de:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <xTaskIncrementTick+0x228>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <xTaskIncrementTick+0x230>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a73      	ldr	r2, [pc, #460]	; (80013b8 <xTaskIncrementTick+0x228>)
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4a74      	ldr	r2, [pc, #464]	; (80013c0 <xTaskIncrementTick+0x230>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b74      	ldr	r3, [pc, #464]	; (80013c4 <xTaskIncrementTick+0x234>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <xTaskIncrementTick+0x234>)
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	f000 fc0e 	bl	8001a1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001200:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <xTaskIncrementTick+0x238>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6a3a      	ldr	r2, [r7, #32]
 8001206:	429a      	cmp	r2, r3
 8001208:	f0c0 80aa 	bcc.w	8001360 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <xTaskIncrementTick+0x228>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <xTaskIncrementTick+0x238>)
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	601a      	str	r2, [r3, #0]
                    break;
 800121e:	e09f      	b.n	8001360 <xTaskIncrementTick+0x1d0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001220:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <xTaskIncrementTick+0x228>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001230:	6a3a      	ldr	r2, [r7, #32]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	d203      	bcs.n	8001240 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001238:	4a63      	ldr	r2, [pc, #396]	; (80013c8 <xTaskIncrementTick+0x238>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800123e:	e08f      	b.n	8001360 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	68d2      	ldr	r2, [r2, #12]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	6892      	ldr	r2, [r2, #8]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	3304      	adds	r3, #4
 8001262:	429a      	cmp	r2, r3
 8001264:	d103      	bne.n	800126e <xTaskIncrementTick+0xde>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01e      	beq.n	80012c4 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	6a12      	ldr	r2, [r2, #32]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	69d2      	ldr	r2, [r2, #28]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3318      	adds	r3, #24
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <xTaskIncrementTick+0x124>
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2200      	movs	r2, #0
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012c4:	69b8      	ldr	r0, [r7, #24]
 80012c6:	f001 fdf5 	bl	8002eb4 <task_to_ready>
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <xTaskIncrementTick+0x23c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d903      	bls.n	80012de <xTaskIncrementTick+0x14e>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <xTaskIncrementTick+0x23c>)
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e2:	493b      	ldr	r1, [pc, #236]	; (80013d0 <xTaskIncrementTick+0x240>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	3304      	adds	r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	3204      	adds	r2, #4
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1d1a      	adds	r2, r3, #4
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <xTaskIncrementTick+0x240>)
 8001322:	441a      	add	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	4928      	ldr	r1, [pc, #160]	; (80013d0 <xTaskIncrementTick+0x240>)
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1c59      	adds	r1, r3, #1
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <xTaskIncrementTick+0x240>)
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4403      	add	r3, r0
 8001348:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <xTaskIncrementTick+0x244>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	429a      	cmp	r2, r3
 8001356:	f4ff af59 	bcc.w	800120c <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800135e:	e755      	b.n	800120c <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <xTaskIncrementTick+0x244>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001366:	491a      	ldr	r1, [pc, #104]	; (80013d0 <xTaskIncrementTick+0x240>)
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d901      	bls.n	800137c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8001378:	2301      	movs	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24

        #if ( configUSE_TICK_HOOK == 1 )
            {
                /* Guard against the tick hook being called when the pended tick
                 * count is being unwound (when the scheduler is being unlocked). */
                if( xPendedTicks == ( TickType_t ) 0 )
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <xTaskIncrementTick+0x248>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <xTaskIncrementTick+0x1f8>
                {
                    vApplicationTickHook();
 8001384:	f001 fc2e 	bl	8002be4 <vApplicationTickHook>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <xTaskIncrementTick+0x24c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <xTaskIncrementTick+0x214>
                {
                    xSwitchRequired = pdTRUE;
 8001390:	2301      	movs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	e006      	b.n	80013a4 <xTaskIncrementTick+0x214>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <xTaskIncrementTick+0x248>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <xTaskIncrementTick+0x248>)
 800139e:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
            {
                vApplicationTickHook();
 80013a0:	f001 fc20 	bl	8002be4 <vApplicationTickHook>
            }
        #endif
    }

    return xSwitchRequired;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000394 	.word	0x20000394
 80013b4:	20000370 	.word	0x20000370
 80013b8:	20000324 	.word	0x20000324
 80013bc:	080039cc 	.word	0x080039cc
 80013c0:	20000328 	.word	0x20000328
 80013c4:	20000384 	.word	0x20000384
 80013c8:	2000038c 	.word	0x2000038c
 80013cc:	20000374 	.word	0x20000374
 80013d0:	20000090 	.word	0x20000090
 80013d4:	2000008c 	.word	0x2000008c
 80013d8:	2000037c 	.word	0x2000037c
 80013dc:	20000380 	.word	0x20000380

080013e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <vTaskSwitchContext+0xf4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <vTaskSwitchContext+0xf8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80013f4:	e069      	b.n	80014ca <vTaskSwitchContext+0xea>
        xYieldPending = pdFALSE;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <vTaskSwitchContext+0xf8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_OUT();
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <vTaskSwitchContext+0xfc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fd9c 	bl	8002f40 <switched_out>
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001408:	f001 fd44 	bl	8002e94 <TIM5_get_cnt>
 800140c:	4602      	mov	r2, r0
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <vTaskSwitchContext+0x100>)
 8001410:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <vTaskSwitchContext+0x100>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <vTaskSwitchContext+0x104>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d909      	bls.n	8001432 <vTaskSwitchContext+0x52>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <vTaskSwitchContext+0x100>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <vTaskSwitchContext+0x104>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1ad1      	subs	r1, r2, r3
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <vTaskSwitchContext+0xfc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800142e:	440a      	add	r2, r1
 8001430:	66da      	str	r2, [r3, #108]	; 0x6c
                ulTaskSwitchedInTime = ulTotalRunTime;
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <vTaskSwitchContext+0x100>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a2b      	ldr	r2, [pc, #172]	; (80014e4 <vTaskSwitchContext+0x104>)
 8001438:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <vTaskSwitchContext+0x108>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e013      	b.n	800146a <vTaskSwitchContext+0x8a>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10d      	bne.n	8001464 <vTaskSwitchContext+0x84>
 8001448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144c:	f383 8811 	msr	BASEPRI, r3
 8001450:	f3bf 8f6f 	isb	sy
 8001454:	f3bf 8f4f 	dsb	sy
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	f640 4102 	movw	r1, #3074	; 0xc02
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <vTaskSwitchContext+0x10c>)
 8001460:	f001 fbce 	bl	8002c00 <assert_failed>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4921      	ldr	r1, [pc, #132]	; (80014f0 <vTaskSwitchContext+0x110>)
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0e1      	beq.n	8001442 <vTaskSwitchContext+0x62>
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <vTaskSwitchContext+0x110>)
 800148a:	4413      	add	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3308      	adds	r3, #8
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d104      	bne.n	80014ae <vTaskSwitchContext+0xce>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a09      	ldr	r2, [pc, #36]	; (80014dc <vTaskSwitchContext+0xfc>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <vTaskSwitchContext+0x108>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <vTaskSwitchContext+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fd01 	bl	8002ecc <switched_in>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000394 	.word	0x20000394
 80014d8:	20000380 	.word	0x20000380
 80014dc:	2000008c 	.word	0x2000008c
 80014e0:	2000039c 	.word	0x2000039c
 80014e4:	20000398 	.word	0x20000398
 80014e8:	20000374 	.word	0x20000374
 80014ec:	080039cc 	.word	0x080039cc
 80014f0:	20000090 	.word	0x20000090

080014f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10d      	bne.n	8001520 <vTaskPlaceOnEventList+0x2c>
 8001504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	f640 411c 	movw	r1, #3100	; 0xc1c
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <vTaskPlaceOnEventList+0x4c>)
 800151c:	f001 fb70 	bl	8002c00 <assert_failed>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <vTaskPlaceOnEventList+0x50>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3318      	adds	r3, #24
 8001526:	4619      	mov	r1, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7fe fede 	bl	80002ea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800152e:	2101      	movs	r1, #1
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f000 fc0b 	bl	8001d4c <prvAddCurrentTaskToDelayedList>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	080039cc 	.word	0x080039cc
 8001544:	2000008c 	.word	0x2000008c

08001548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <xTaskRemoveFromEventList+0x32>
 800155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	f640 4182 	movw	r1, #3202	; 0xc82
 8001574:	485d      	ldr	r0, [pc, #372]	; (80016ec <xTaskRemoveFromEventList+0x1a4>)
 8001576:	f001 fb43 	bl	8002c00 <assert_failed>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	6a3a      	ldr	r2, [r7, #32]
 8001586:	6a12      	ldr	r2, [r2, #32]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	69d2      	ldr	r2, [r2, #28]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	3318      	adds	r3, #24
 800159c:	429a      	cmp	r2, r3
 800159e:	d103      	bne.n	80015a8 <xTaskRemoveFromEventList+0x60>
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015b8:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <xTaskRemoveFromEventList+0x1a8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d164      	bne.n	800168a <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	6a3a      	ldr	r2, [r7, #32]
 80015cc:	68d2      	ldr	r2, [r2, #12]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	6892      	ldr	r2, [r2, #8]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	3304      	adds	r3, #4
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d103      	bne.n	80015ee <xTaskRemoveFromEventList+0xa6>
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80015fe:	6a38      	ldr	r0, [r7, #32]
 8001600:	f001 fc58 	bl	8002eb4 <task_to_ready>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <xTaskRemoveFromEventList+0x1ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d903      	bls.n	8001618 <xTaskRemoveFromEventList+0xd0>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	4a37      	ldr	r2, [pc, #220]	; (80016f4 <xTaskRemoveFromEventList+0x1ac>)
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	4936      	ldr	r1, [pc, #216]	; (80016f8 <xTaskRemoveFromEventList+0x1b0>)
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	3204      	adds	r2, #4
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	1d1a      	adds	r2, r3, #4
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <xTaskRemoveFromEventList+0x1b0>)
 800165c:	441a      	add	r2, r3
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001666:	4924      	ldr	r1, [pc, #144]	; (80016f8 <xTaskRemoveFromEventList+0x1b0>)
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1c59      	adds	r1, r3, #1
 8001676:	4820      	ldr	r0, [pc, #128]	; (80016f8 <xTaskRemoveFromEventList+0x1b0>)
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4403      	add	r3, r0
 8001682:	6019      	str	r1, [r3, #0]
                 * normally left unchanged, because it is automatically reset to a new
                 * value when the tick count equals xNextTaskUnblockTime.  However if
                 * tickless idling is used it might be more important to enter sleep mode
                 * at the earliest possible time - so reset xNextTaskUnblockTime here to
                 * ensure it is updated at the earliest possible time. */
                prvResetNextTaskUnblockTime();
 8001684:	f000 f9ca 	bl	8001a1c <prvResetNextTaskUnblockTime>
 8001688:	e01b      	b.n	80016c2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <xTaskRemoveFromEventList+0x1b4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	61da      	str	r2, [r3, #28]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	621a      	str	r2, [r3, #32]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	6a3a      	ldr	r2, [r7, #32]
 80016a4:	3218      	adds	r2, #24
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	f103 0218 	add.w	r2, r3, #24
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <xTaskRemoveFromEventList+0x1b4>)
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <xTaskRemoveFromEventList+0x1b4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <xTaskRemoveFromEventList+0x1b4>)
 80016c0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <xTaskRemoveFromEventList+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d905      	bls.n	80016dc <xTaskRemoveFromEventList+0x194>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <xTaskRemoveFromEventList+0x1bc>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e001      	b.n	80016e0 <xTaskRemoveFromEventList+0x198>
    }
    else
    {
        xReturn = pdFALSE;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	080039cc 	.word	0x080039cc
 80016f0:	20000394 	.word	0x20000394
 80016f4:	20000374 	.word	0x20000374
 80016f8:	20000090 	.word	0x20000090
 80016fc:	2000032c 	.word	0x2000032c
 8001700:	2000008c 	.word	0x2000008c
 8001704:	20000380 	.word	0x20000380

08001708 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <vTaskInternalSetTimeOutState+0x24>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <vTaskInternalSetTimeOutState+0x28>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	605a      	str	r2, [r3, #4]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	20000384 	.word	0x20000384
 8001730:	20000370 	.word	0x20000370

08001734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <xTaskCheckForTimeOut+0x2c>
 8001744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001748:	f383 8811 	msr	BASEPRI, r3
 800174c:	f3bf 8f6f 	isb	sy
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	f640 41fd 	movw	r1, #3325	; 0xcfd
 800175a:	482a      	ldr	r0, [pc, #168]	; (8001804 <xTaskCheckForTimeOut+0xd0>)
 800175c:	f001 fa50 	bl	8002c00 <assert_failed>
    configASSERT( pxTicksToWait );
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <xTaskCheckForTimeOut+0x4e>
 8001766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176a:	f383 8811 	msr	BASEPRI, r3
 800176e:	f3bf 8f6f 	isb	sy
 8001772:	f3bf 8f4f 	dsb	sy
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	f640 41fe 	movw	r1, #3326	; 0xcfe
 800177c:	4821      	ldr	r0, [pc, #132]	; (8001804 <xTaskCheckForTimeOut+0xd0>)
 800177e:	f001 fa3f 	bl	8002c00 <assert_failed>

    taskENTER_CRITICAL();
 8001782:	f000 fc8b 	bl	800209c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <xTaskCheckForTimeOut+0xd4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179e:	d102      	bne.n	80017a6 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e026      	b.n	80017f4 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <xTaskCheckForTimeOut+0xd8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d00a      	beq.n	80017c8 <xTaskCheckForTimeOut+0x94>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d305      	bcc.n	80017c8 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80017bc:	2301      	movs	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e015      	b.n	80017f4 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d20b      	bcs.n	80017ea <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff92 	bl	8001708 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e004      	b.n	80017f4 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80017f4:	f000 fc84 	bl	8002100 <vPortExitCritical>

    return xReturn;
 80017f8:	69fb      	ldr	r3, [r7, #28]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	080039cc 	.word	0x080039cc
 8001808:	20000370 	.word	0x20000370
 800180c:	20000384 	.word	0x20000384

08001810 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <vTaskMissedYield+0x14>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000380 	.word	0x20000380

08001828 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001830:	f000 f8b8 	bl	80019a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <prvIdleTask+0x78>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d907      	bls.n	800184c <prvIdleTask+0x24>
                {
                    taskYIELD();
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <prvIdleTask+0x7c>)
 800183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 800184c:	f001 f9a2 	bl	8002b94 <vApplicationIdleHook>
                /* It is not desirable to suspend then resume the scheduler on
                 * each iteration of the idle task.  Therefore, a preliminary
                 * test of the expected idle time is performed without the
                 * scheduler suspended.  The result here is not necessarily
                 * valid. */
                xExpectedIdleTime = prvGetExpectedIdleTime();
 8001850:	f7ff fb38 	bl	8000ec4 <prvGetExpectedIdleTime>
 8001854:	60f8      	str	r0, [r7, #12]

                if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d9e9      	bls.n	8001830 <prvIdleTask+0x8>
                {
                    vTaskSuspendAll();
 800185c:	f7ff fb24 	bl	8000ea8 <vTaskSuspendAll>
                    {
                        /* Now the scheduler is suspended, the expected idle
                         * time can be sampled again, and this time its value can
                         * be used. */
                        configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <prvIdleTask+0x80>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <prvIdleTask+0x84>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d20d      	bcs.n	8001888 <prvIdleTask+0x60>
 800186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001870:	f383 8811 	msr	BASEPRI, r3
 8001874:	f3bf 8f6f 	isb	sy
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	f640 51c7 	movw	r1, #3527	; 0xdc7
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <prvIdleTask+0x88>)
 8001884:	f001 f9bc 	bl	8002c00 <assert_failed>
                        xExpectedIdleTime = prvGetExpectedIdleTime();
 8001888:	f7ff fb1c 	bl	8000ec4 <prvGetExpectedIdleTime>
 800188c:	60f8      	str	r0, [r7, #12]
                        /* Define the following macro to set xExpectedIdleTime to 0
                         * if the application does not want
                         * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                        configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                        if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d902      	bls.n	800189a <prvIdleTask+0x72>
                        {
                            traceLOW_POWER_IDLE_BEGIN();
                            portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fcb7 	bl	8002208 <vPortSuppressTicksAndSleep>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    ( void ) xTaskResumeAll();
 800189a:	f7ff fb4b 	bl	8000f34 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 800189e:	e7c7      	b.n	8001830 <prvIdleTask+0x8>
 80018a0:	20000090 	.word	0x20000090
 80018a4:	e000ed04 	.word	0xe000ed04
 80018a8:	2000038c 	.word	0x2000038c
 80018ac:	20000370 	.word	0x20000370
 80018b0:	080039cc 	.word	0x080039cc

080018b4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
        /* The idle task exists in addition to the application tasks. */
        const UBaseType_t uxNonApplicationTasks = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	603b      	str	r3, [r7, #0]
        eSleepModeStatus eReturn = eStandardSleep;
 80018be:	2301      	movs	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <eTaskConfirmSleepModeStatus+0x5c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80018ca:	2300      	movs	r3, #0
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	e017      	b.n	8001900 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <eTaskConfirmSleepModeStatus+0x60>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80018d8:	2300      	movs	r3, #0
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	e010      	b.n	8001900 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <eTaskConfirmSleepModeStatus+0x64>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e009      	b.n	8001900 <eTaskConfirmSleepModeStatus+0x4c>
        {
            /* If all the tasks are in the suspended list (which might mean they
             * have an infinite block time rather than actually being suspended)
             * then it is safe to turn all clocks off and just wait for external
             * interrupts. */
            if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <eTaskConfirmSleepModeStatus+0x68>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <eTaskConfirmSleepModeStatus+0x6c>)
 80018f2:	6819      	ldr	r1, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	1acb      	subs	r3, r1, r3
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d101      	bne.n	8001900 <eTaskConfirmSleepModeStatus+0x4c>
            {
                eReturn = eNoTasksWaitingTimeout;
 80018fc:	2302      	movs	r3, #2
 80018fe:	71fb      	strb	r3, [r7, #7]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return eReturn;
 8001900:	79fb      	ldrb	r3, [r7, #7]
    }
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000032c 	.word	0x2000032c
 8001914:	20000380 	.word	0x20000380
 8001918:	2000037c 	.word	0x2000037c
 800191c:	20000358 	.word	0x20000358
 8001920:	2000036c 	.word	0x2000036c

08001924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e00c      	b.n	800194a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <prvInitialiseTaskLists+0x60>)
 800193c:	4413      	add	r3, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fca6 	bl	8000290 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3301      	adds	r3, #1
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b1e      	cmp	r3, #30
 800194e:	d9ef      	bls.n	8001930 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <prvInitialiseTaskLists+0x64>)
 8001952:	f7fe fc9d 	bl	8000290 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <prvInitialiseTaskLists+0x68>)
 8001958:	f7fe fc9a 	bl	8000290 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <prvInitialiseTaskLists+0x6c>)
 800195e:	f7fe fc97 	bl	8000290 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <prvInitialiseTaskLists+0x70>)
 8001964:	f7fe fc94 	bl	8000290 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <prvInitialiseTaskLists+0x74>)
 800196a:	f7fe fc91 	bl	8000290 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <prvInitialiseTaskLists+0x78>)
 8001970:	4a05      	ldr	r2, [pc, #20]	; (8001988 <prvInitialiseTaskLists+0x64>)
 8001972:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <prvInitialiseTaskLists+0x7c>)
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <prvInitialiseTaskLists+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000090 	.word	0x20000090
 8001988:	200002fc 	.word	0x200002fc
 800198c:	20000310 	.word	0x20000310
 8001990:	2000032c 	.word	0x2000032c
 8001994:	20000340 	.word	0x20000340
 8001998:	20000358 	.word	0x20000358
 800199c:	20000324 	.word	0x20000324
 80019a0:	20000328 	.word	0x20000328

080019a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019aa:	e019      	b.n	80019e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80019ac:	f000 fb76 	bl	800209c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <prvCheckTasksWaitingTermination+0x4c>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fccd 	bl	800035c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <prvCheckTasksWaitingTermination+0x50>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <prvCheckTasksWaitingTermination+0x50>)
 80019ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <prvCheckTasksWaitingTermination+0x54>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <prvCheckTasksWaitingTermination+0x54>)
 80019d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80019d6:	f000 fb93 	bl	8002100 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f80e 	bl	80019fc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <prvCheckTasksWaitingTermination+0x54>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e1      	bne.n	80019ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000340 	.word	0x20000340
 80019f4:	2000036c 	.word	0x2000036c
 80019f8:	20000354 	.word	0x20000354

080019fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fe43 	bl	8002694 <vPortFree>
                vPortFree( pxTCB );
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fe40 	bl	8002694 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <prvResetNextTaskUnblockTime+0x30>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d104      	bne.n	8001a34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <prvResetNextTaskUnblockTime+0x34>)
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a32:	e005      	b.n	8001a40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <prvResetNextTaskUnblockTime+0x30>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <prvResetNextTaskUnblockTime+0x34>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000324 	.word	0x20000324
 8001a50:	2000038c 	.word	0x2000038c

08001a54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <xTaskGetSchedulerState+0x34>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001a62:	2301      	movs	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	e008      	b.n	8001a7a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <xTaskGetSchedulerState+0x38>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001a70:	2302      	movs	r3, #2
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001a7a:	687b      	ldr	r3, [r7, #4]
    }
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000378 	.word	0x20000378
 8001a8c:	20000394 	.word	0x20000394

08001a90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07c      	beq.n	8001ba0 <xTaskPriorityInherit+0x110>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <xTaskPriorityInherit+0x11c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d26c      	bcs.n	8001b8e <xTaskPriorityInherit+0xfe>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db06      	blt.n	8001aca <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <xTaskPriorityInherit+0x11c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	f1c3 021f 	rsb	r2, r3, #31
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	6959      	ldr	r1, [r3, #20]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <xTaskPriorityInherit+0x120>)
 8001adc:	4413      	add	r3, r2
 8001ade:	4299      	cmp	r1, r3
 8001ae0:	d14d      	bne.n	8001b7e <xTaskPriorityInherit+0xee>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fc38 	bl	800035c <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001aec:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <xTaskPriorityInherit+0x11c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001af6:	6938      	ldr	r0, [r7, #16]
 8001af8:	f001 f9dc 	bl	8002eb4 <task_to_ready>
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <xTaskPriorityInherit+0x124>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d903      	bls.n	8001b10 <xTaskPriorityInherit+0x80>
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <xTaskPriorityInherit+0x124>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	4926      	ldr	r1, [pc, #152]	; (8001bb0 <xTaskPriorityInherit+0x120>)
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	3304      	adds	r3, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	3204      	adds	r2, #4
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1d1a      	adds	r2, r3, #4
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <xTaskPriorityInherit+0x120>)
 8001b54:	441a      	add	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	4914      	ldr	r1, [pc, #80]	; (8001bb0 <xTaskPriorityInherit+0x120>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1c59      	adds	r1, r3, #1
 8001b6e:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <xTaskPriorityInherit+0x120>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4403      	add	r3, r0
 8001b7a:	6019      	str	r1, [r3, #0]
 8001b7c:	e004      	b.n	8001b88 <xTaskPriorityInherit+0xf8>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <xTaskPriorityInherit+0x11c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e008      	b.n	8001ba0 <xTaskPriorityInherit+0x110>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <xTaskPriorityInherit+0x11c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d201      	bcs.n	8001ba0 <xTaskPriorityInherit+0x110>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001ba0:	697b      	ldr	r3, [r7, #20]
    }
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000008c 	.word	0x2000008c
 8001bb0:	20000090 	.word	0x20000090
 8001bb4:	20000374 	.word	0x20000374

08001bb8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 809c 	beq.w	8001d0a <vTaskPriorityDisinheritAfterTimeout+0x152>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	f241 019f 	movw	r1, #4255	; 0x109f
 8001bf0:	4848      	ldr	r0, [pc, #288]	; (8001d14 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8001bf2:	f001 f805 	bl	8002c00 <assert_failed>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d902      	bls.n	8001c06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
 8001c04:	e002      	b.n	8001c0c <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d079      	beq.n	8001d0a <vTaskPriorityDisinheritAfterTimeout+0x152>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d174      	bne.n	8001d0a <vTaskPriorityDisinheritAfterTimeout+0x152>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001c20:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <vTaskPriorityDisinheritAfterTimeout+0x160>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10d      	bne.n	8001c46 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	f241 01ba 	movw	r1, #4282	; 0x10ba
 8001c40:	4834      	ldr	r0, [pc, #208]	; (8001d14 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8001c42:	f000 ffdd 	bl	8002c00 <assert_failed>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db04      	blt.n	8001c64 <vTaskPriorityDisinheritAfterTimeout+0xac>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	f1c3 021f 	rsb	r2, r3, #31
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	6959      	ldr	r1, [r3, #20]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001c74:	4413      	add	r3, r2
 8001c76:	4299      	cmp	r1, r3
 8001c78:	d147      	bne.n	8001d0a <vTaskPriorityDisinheritAfterTimeout+0x152>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fb6c 	bl	800035c <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001c84:	6a38      	ldr	r0, [r7, #32]
 8001c86:	f001 f915 	bl	8002eb4 <task_to_ready>
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d903      	bls.n	8001c9e <vTaskPriorityDisinheritAfterTimeout+0xe6>
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	491e      	ldr	r1, [pc, #120]	; (8001d1c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3304      	adds	r3, #4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	3204      	adds	r2, #4
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	1d1a      	adds	r2, r3, #4
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001ce2:	441a      	add	r2, r3
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cec:	490b      	ldr	r1, [pc, #44]	; (8001d1c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4403      	add	r3, r0
 8001d08:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	080039cc 	.word	0x080039cc
 8001d18:	2000008c 	.word	0x2000008c
 8001d1c:	20000090 	.word	0x20000090
 8001d20:	20000374 	.word	0x20000374

08001d24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d36:	3201      	adds	r2, #1
 8001d38:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8001d3a:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
    }
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	2000008c 	.word	0x2000008c

08001d4c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fafa 	bl	800035c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6e:	d124      	bne.n	8001dba <prvAddCurrentTaskToDelayedList+0x6e>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d021      	beq.n	8001dba <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	6892      	ldr	r2, [r2, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	3204      	adds	r2, #4
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1d1a      	adds	r2, r3, #4
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001db8:	e026      	b.n	8001e08 <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d209      	bcs.n	8001de6 <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <prvAddCurrentTaskToDelayedList+0xd0>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f7fe fa83 	bl	80002ea <vListInsert>
}
 8001de4:	e010      	b.n	8001e08 <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f7fe fa79 	bl	80002ea <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d202      	bcs.n	8001e08 <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000370 	.word	0x20000370
 8001e14:	2000008c 	.word	0x2000008c
 8001e18:	20000358 	.word	0x20000358
 8001e1c:	20000328 	.word	0x20000328
 8001e20:	20000324 	.word	0x20000324
 8001e24:	2000038c 	.word	0x2000038c

08001e28 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3b04      	subs	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b04      	subs	r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f023 0201 	bic.w	r2, r3, #1
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3b04      	subs	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <pxPortInitialiseStack+0x64>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3b14      	subs	r3, #20
 8001e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3b04      	subs	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f06f 0202 	mvn.w	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3b20      	subs	r3, #32
 8001e7c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	08001e91 	.word	0x08001e91

08001e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <prvTaskExitError+0x50>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d00c      	beq.n	8001ebe <prvTaskExitError+0x2e>
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	21e7      	movs	r1, #231	; 0xe7
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <prvTaskExitError+0x54>)
 8001eba:	f000 fea1 	bl	8002c00 <assert_failed>
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001ed0:	bf00      	nop
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0fc      	beq.n	8001ed2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	08003a18 	.word	0x08003a18
	...

08001ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <pxCurrentTCBConst2>)
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	6808      	ldr	r0, [r1, #0]
 8001ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efa:	f380 8809 	msr	PSP, r0
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f380 8811 	msr	BASEPRI, r0
 8001f0a:	4770      	bx	lr
 8001f0c:	f3af 8000 	nop.w

08001f10 <pxCurrentTCBConst2>:
 8001f10:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop

08001f18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <prvPortStartFirstTask+0x24>)
 8001f1a:	6800      	ldr	r0, [r0, #0]
 8001f1c:	6800      	ldr	r0, [r0, #0]
 8001f1e:	f380 8808 	msr	MSP, r0
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f380 8814 	msr	CONTROL, r0
 8001f2a:	b662      	cpsie	i
 8001f2c:	b661      	cpsie	f
 8001f2e:	f3bf 8f4f 	dsb	sy
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	df00      	svc	0
 8001f38:	bf00      	nop
 8001f3a:	0000      	.short	0x0000
 8001f3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop

08001f44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <xPortStartScheduler+0x130>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <xPortStartScheduler+0x134>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10d      	bne.n	8001f70 <xPortStartScheduler+0x2c>
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001f6a:	4844      	ldr	r0, [pc, #272]	; (800207c <xPortStartScheduler+0x138>)
 8001f6c:	f000 fe48 	bl	8002c00 <assert_failed>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <xPortStartScheduler+0x130>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a42      	ldr	r2, [pc, #264]	; (8002080 <xPortStartScheduler+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10d      	bne.n	8001f96 <xPortStartScheduler+0x52>
 8001f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7e:	f383 8811 	msr	BASEPRI, r3
 8001f82:	f3bf 8f6f 	isb	sy
 8001f86:	f3bf 8f4f 	dsb	sy
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	f240 112f 	movw	r1, #303	; 0x12f
 8001f90:	483a      	ldr	r0, [pc, #232]	; (800207c <xPortStartScheduler+0x138>)
 8001f92:	f000 fe35 	bl	8002c00 <assert_failed>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <xPortStartScheduler+0x140>)
 8001f98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	22ff      	movs	r2, #255	; 0xff
 8001fa6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b33      	ldr	r3, [pc, #204]	; (8002088 <xPortStartScheduler+0x144>)
 8001fbc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <xPortStartScheduler+0x148>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fc4:	e009      	b.n	8001fda <xPortStartScheduler+0x96>
            {
                ulMaxPRIGROUPValue--;
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <xPortStartScheduler+0x148>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <xPortStartScheduler+0x148>)
 8001fce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b80      	cmp	r3, #128	; 0x80
 8001fe4:	d0ef      	beq.n	8001fc6 <xPortStartScheduler+0x82>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <xPortStartScheduler+0x148>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d00d      	beq.n	800200e <xPortStartScheduler+0xca>
 8001ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	f240 1161 	movw	r1, #353	; 0x161
 8002008:	481c      	ldr	r0, [pc, #112]	; (800207c <xPortStartScheduler+0x138>)
 800200a:	f000 fdf9 	bl	8002c00 <assert_failed>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <xPortStartScheduler+0x148>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <xPortStartScheduler+0x148>)
 8002016:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <xPortStartScheduler+0x148>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002020:	4a1a      	ldr	r2, [pc, #104]	; (800208c <xPortStartScheduler+0x148>)
 8002022:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <xPortStartScheduler+0x14c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <xPortStartScheduler+0x14c>)
 8002032:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002036:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <xPortStartScheduler+0x14c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <xPortStartScheduler+0x14c>)
 800203e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002042:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002044:	f000 f9a4 	bl	8002390 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <xPortStartScheduler+0x150>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800204e:	f000 f9e5 	bl	800241c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <xPortStartScheduler+0x154>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <xPortStartScheduler+0x154>)
 8002058:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800205c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800205e:	f7ff ff5b 	bl	8001f18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002062:	f7ff f9bd 	bl	80013e0 <vTaskSwitchContext>
    prvTaskExitError();
 8002066:	f7ff ff13 	bl	8001e90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	410fc271 	.word	0x410fc271
 800207c:	08003a18 	.word	0x08003a18
 8002080:	410fc270 	.word	0x410fc270
 8002084:	e000e400 	.word	0xe000e400
 8002088:	200003ac 	.word	0x200003ac
 800208c:	200003b0 	.word	0x200003b0
 8002090:	e000ed20 	.word	0xe000ed20
 8002094:	20000004 	.word	0x20000004
 8002098:	e000ef34 	.word	0xe000ef34

0800209c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <vPortEnterCritical+0x58>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <vPortEnterCritical+0x58>)
 80020bc:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <vPortEnterCritical+0x58>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d112      	bne.n	80020ec <vPortEnterCritical+0x50>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <vPortEnterCritical+0x5c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <vPortEnterCritical+0x50>
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <vPortEnterCritical+0x60>)
 80020e8:	f000 fd8a 	bl	8002c00 <assert_failed>
    }
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000004 	.word	0x20000004
 80020f8:	e000ed04 	.word	0xe000ed04
 80020fc:	08003a18 	.word	0x08003a18

08002100 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <vPortExitCritical+0x50>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <vPortExitCritical+0x2a>
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <vPortExitCritical+0x54>)
 8002126:	f000 fd6b 	bl	8002c00 <assert_failed>
    uxCriticalNesting--;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <vPortExitCritical+0x50>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <vPortExitCritical+0x50>)
 8002132:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <vPortExitCritical+0x50>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <vPortExitCritical+0x46>
 800213c:	2300      	movs	r3, #0
 800213e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000004 	.word	0x20000004
 8002154:	08003a18 	.word	0x08003a18
	...

08002160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002160:	f3ef 8009 	mrs	r0, PSP
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <pxCurrentTCBConst>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f01e 0f10 	tst.w	lr, #16
 8002170:	bf08      	it	eq
 8002172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002184:	f380 8811 	msr	BASEPRI, r0
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f7ff f926 	bl	80013e0 <vTaskSwitchContext>
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	f380 8811 	msr	BASEPRI, r0
 800219c:	bc09      	pop	{r0, r3}
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	6808      	ldr	r0, [r1, #0]
 80021a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a6:	f01e 0f10 	tst.w	lr, #16
 80021aa:	bf08      	it	eq
 80021ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021b0:	f380 8809 	msr	PSP, r0
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w

080021c0 <pxCurrentTCBConst>:
 80021c0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop

080021c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
        __asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80021e0:	f7fe ffd6 	bl	8001190 <xTaskIncrementTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <SysTick_Handler+0x3c>)
 80021ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	e000ed04 	.word	0xe000ed04

08002208 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <vPortSuppressTicksAndSleep+0x170>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d902      	bls.n	8002220 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800221a:	4b57      	ldr	r3, [pc, #348]	; (8002378 <vPortSuppressTicksAndSleep+0x170>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	607b      	str	r3, [r7, #4]

        /* Stop the SysTick momentarily.  The time the SysTick is stopped for
         * is accounted for as best it can be, but using the tickless mode will
         * inevitably result in some tiny drift of the time maintained by the
         * kernel with respect to calendar time. */
        portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002220:	4b56      	ldr	r3, [pc, #344]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]

        /* Calculate the reload value required to wait xExpectedIdleTime
         * tick periods.  -1 is used because this code will execute part way
         * through one of the tick periods. */
        ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800222c:	4b54      	ldr	r3, [pc, #336]	; (8002380 <vPortSuppressTicksAndSleep+0x178>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	4953      	ldr	r1, [pc, #332]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]

        if( ulReloadValue > ulStoppedTimerCompensation )
 8002240:	4b51      	ldr	r3, [pc, #324]	; (8002388 <vPortSuppressTicksAndSleep+0x180>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	429a      	cmp	r2, r3
 8002248:	d904      	bls.n	8002254 <vPortSuppressTicksAndSleep+0x4c>
        {
            ulReloadValue -= ulStoppedTimerCompensation;
 800224a:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <vPortSuppressTicksAndSleep+0x180>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	61fb      	str	r3, [r7, #28]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 8002254:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 8002256:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 800225a:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800225e:	f7ff fb29 	bl	80018b4 <eTaskConfirmSleepModeStatus>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d110      	bne.n	800228a <vPortSuppressTicksAndSleep+0x82>
        {
            /* Restart from whatever is left in the count register to complete
             * this tick period. */
            portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <vPortSuppressTicksAndSleep+0x178>)
 800226a:	4a48      	ldr	r2, [pc, #288]	; (800238c <vPortSuppressTicksAndSleep+0x184>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6013      	str	r3, [r2, #0]

            /* Restart SysTick. */
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a41      	ldr	r2, [pc, #260]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

            /* Reset the reload register to the value required for normal tick
             * periods. */
            portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a42      	ldr	r2, [pc, #264]	; (800238c <vPortSuppressTicksAndSleep+0x184>)
 8002282:	3b01      	subs	r3, #1
 8002284:	6013      	str	r3, [r2, #0]

            /* Re-enable interrupts - see comments above the cpsid instruction()
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 8002286:	b662      	cpsie	i
            portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 8002288:	e071      	b.n	800236e <vPortSuppressTicksAndSleep+0x166>
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800228a:	4a40      	ldr	r2, [pc, #256]	; (800238c <vPortSuppressTicksAndSleep+0x184>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <vPortSuppressTicksAndSleep+0x178>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	613b      	str	r3, [r7, #16]
            if( xModifiableIdleTime > 0 )
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <vPortSuppressTicksAndSleep+0xae>
                __asm volatile ( "dsb" ::: "memory" );
 80022ac:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 80022b0:	bf30      	wfi
                __asm volatile ( "isb" );
 80022b2:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 80022b6:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 80022b8:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80022bc:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 80022c0:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 80022c2:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80022c6:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <vPortSuppressTicksAndSleep+0x110>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <vPortSuppressTicksAndSleep+0x178>)
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	1acb      	subs	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3b01      	subs	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
                if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <vPortSuppressTicksAndSleep+0x180>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d304      	bcc.n	8002302 <vPortSuppressTicksAndSleep+0xfa>
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d903      	bls.n	800230a <vPortSuppressTicksAndSleep+0x102>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3b01      	subs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <vPortSuppressTicksAndSleep+0x184>)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e018      	b.n	800234a <vPortSuppressTicksAndSleep+0x142>
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f203 	mul.w	r2, r2, r3
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <vPortSuppressTicksAndSleep+0x178>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	60fb      	str	r3, [r7, #12]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3301      	adds	r3, #1
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	fb02 f203 	mul.w	r2, r2, r3
 8002342:	4912      	ldr	r1, [pc, #72]	; (800238c <vPortSuppressTicksAndSleep+0x184>)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <vPortSuppressTicksAndSleep+0x178>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <vPortSuppressTicksAndSleep+0x174>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 800235c:	69b8      	ldr	r0, [r7, #24]
 800235e:	f7fe feed 	bl	800113c <vTaskStepTick>
            portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <vPortSuppressTicksAndSleep+0x17c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <vPortSuppressTicksAndSleep+0x184>)
 8002368:	3b01      	subs	r3, #1
 800236a:	6013      	str	r3, [r2, #0]
            __asm volatile ( "cpsie i" ::: "memory" );
 800236c:	b662      	cpsie	i
    }
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200003a4 	.word	0x200003a4
 800237c:	e000e010 	.word	0xe000e010
 8002380:	e000e018 	.word	0xe000e018
 8002384:	200003a0 	.word	0x200003a0
 8002388:	200003a8 	.word	0x200003a8
 800238c:	e000e014 	.word	0xe000e014

08002390 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
        {
            ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <vPortSetupTimerInterrupt+0x6c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <vPortSetupTimerInterrupt+0x70>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <vPortSetupTimerInterrupt+0x74>)
 80023a2:	6013      	str	r3, [r2, #0]
            xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <vPortSetupTimerInterrupt+0x74>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	4a15      	ldr	r2, [pc, #84]	; (8002408 <vPortSetupTimerInterrupt+0x78>)
 80023b2:	6013      	str	r3, [r2, #0]
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <vPortSetupTimerInterrupt+0x6c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <vPortSetupTimerInterrupt+0x6c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	222d      	movs	r2, #45	; 0x2d
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <vPortSetupTimerInterrupt+0x7c>)
 80023ca:	6013      	str	r3, [r2, #0]
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <vPortSetupTimerInterrupt+0x80>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <vPortSetupTimerInterrupt+0x84>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <vPortSetupTimerInterrupt+0x6c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a08      	ldr	r2, [pc, #32]	; (8002400 <vPortSetupTimerInterrupt+0x70>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <vPortSetupTimerInterrupt+0x88>)
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <vPortSetupTimerInterrupt+0x80>)
 80023ec:	2203      	movs	r2, #3
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008
 8002400:	51eb851f 	.word	0x51eb851f
 8002404:	200003a0 	.word	0x200003a0
 8002408:	200003a4 	.word	0x200003a4
 800240c:	200003a8 	.word	0x200003a8
 8002410:	e000e010 	.word	0xe000e010
 8002414:	e000e018 	.word	0xe000e018
 8002418:	e000e014 	.word	0xe000e014

0800241c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800241c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800242c <vPortEnableVFP+0x10>
 8002420:	6801      	ldr	r1, [r0, #0]
 8002422:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002426:	6001      	str	r1, [r0, #0]
 8002428:	4770      	bx	lr
 800242a:	0000      	.short	0x0000
 800242c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop

08002434 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800243a:	f3ef 8305 	mrs	r3, IPSR
 800243e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d917      	bls.n	8002476 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <vPortValidateInterruptPriority+0x78>)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <vPortValidateInterruptPriority+0x7c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	7afa      	ldrb	r2, [r7, #11]
 8002456:	429a      	cmp	r2, r3
 8002458:	d20d      	bcs.n	8002476 <vPortValidateInterruptPriority+0x42>
        __asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	f240 21fe 	movw	r1, #766	; 0x2fe
 8002470:	4810      	ldr	r0, [pc, #64]	; (80024b4 <vPortValidateInterruptPriority+0x80>)
 8002472:	f000 fbc5 	bl	8002c00 <assert_failed>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <vPortValidateInterruptPriority+0x84>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <vPortValidateInterruptPriority+0x88>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d90d      	bls.n	80024a2 <vPortValidateInterruptPriority+0x6e>
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	f240 310e 	movw	r1, #782	; 0x30e
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <vPortValidateInterruptPriority+0x80>)
 800249e:	f000 fbaf 	bl	8002c00 <assert_failed>
    }
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e3f0 	.word	0xe000e3f0
 80024b0:	200003ac 	.word	0x200003ac
 80024b4:	08003a18 	.word	0x08003a18
 80024b8:	e000ed0c 	.word	0xe000ed0c
 80024bc:	200003b0 	.word	0x200003b0

080024c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80024cc:	f7fe fcec 	bl	8000ea8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024d0:	4b69      	ldr	r3, [pc, #420]	; (8002678 <pvPortMalloc+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80024d8:	f000 f946 	bl	8002768 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024dc:	4b67      	ldr	r3, [pc, #412]	; (800267c <pvPortMalloc+0x1bc>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 80ac 	bne.w	8002642 <pvPortMalloc+0x182>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d030      	beq.n	8002552 <pvPortMalloc+0x92>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80024f0:	2208      	movs	r2, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d22a      	bcs.n	8002552 <pvPortMalloc+0x92>
            {
                xWantedSize += xHeapStructSize;
 80024fc:	2208      	movs	r2, #8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	2b00      	cmp	r3, #0
 800250c:	d024      	beq.n	8002558 <pvPortMalloc+0x98>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f023 0307 	bic.w	r3, r3, #7
 8002514:	3308      	adds	r3, #8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	d217      	bcs.n	800254c <pvPortMalloc+0x8c>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f023 0307 	bic.w	r3, r3, #7
 8002522:	3308      	adds	r3, #8
 8002524:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <pvPortMalloc+0x98>
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	219c      	movs	r1, #156	; 0x9c
 8002544:	484e      	ldr	r0, [pc, #312]	; (8002680 <pvPortMalloc+0x1c0>)
 8002546:	f000 fb5b 	bl	8002c00 <assert_failed>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800254a:	e005      	b.n	8002558 <pvPortMalloc+0x98>
                    }
                    else
                    {
                        xWantedSize = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002550:	e002      	b.n	8002558 <pvPortMalloc+0x98>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	e000      	b.n	800255a <pvPortMalloc+0x9a>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002558:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d070      	beq.n	8002642 <pvPortMalloc+0x182>
 8002560:	4b48      	ldr	r3, [pc, #288]	; (8002684 <pvPortMalloc+0x1c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d86b      	bhi.n	8002642 <pvPortMalloc+0x182>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <pvPortMalloc+0x1c8>)
 800256c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <pvPortMalloc+0x1c8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002574:	e004      	b.n	8002580 <pvPortMalloc+0xc0>
                {
                    pxPreviousBlock = pxBlock;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d903      	bls.n	8002592 <pvPortMalloc+0xd2>
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f1      	bne.n	8002576 <pvPortMalloc+0xb6>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <pvPortMalloc+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	429a      	cmp	r2, r3
 800259a:	d052      	beq.n	8002642 <pvPortMalloc+0x182>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	4413      	add	r3, r2
 80025a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	1ad2      	subs	r2, r2, r3
 80025b6:	2308      	movs	r3, #8
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d921      	bls.n	8002602 <pvPortMalloc+0x142>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <pvPortMalloc+0x12a>
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	21cf      	movs	r1, #207	; 0xcf
 80025e4:	4826      	ldr	r0, [pc, #152]	; (8002680 <pvPortMalloc+0x1c0>)
 80025e6:	f000 fb0b 	bl	8002c00 <assert_failed>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1ad2      	subs	r2, r2, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80025fc:	69b8      	ldr	r0, [r7, #24]
 80025fe:	f000 f915 	bl	800282c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <pvPortMalloc+0x1c4>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <pvPortMalloc+0x1c4>)
 800260e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <pvPortMalloc+0x1c4>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <pvPortMalloc+0x1cc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d203      	bcs.n	8002624 <pvPortMalloc+0x164>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <pvPortMalloc+0x1c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <pvPortMalloc+0x1cc>)
 8002622:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <pvPortMalloc+0x1bc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	431a      	orrs	r2, r3
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <pvPortMalloc+0x1d0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	4a14      	ldr	r2, [pc, #80]	; (8002690 <pvPortMalloc+0x1d0>)
 8002640:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002642:	f7fe fc77 	bl	8000f34 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <pvPortMalloc+0x1ac>
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002666:	4806      	ldr	r0, [pc, #24]	; (8002680 <pvPortMalloc+0x1c0>)
 8002668:	f000 faca 	bl	8002c00 <assert_failed>
    return pvReturn;
 800266c:	69fb      	ldr	r3, [r7, #28]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000a3bc 	.word	0x2000a3bc
 800267c:	2000a3d0 	.word	0x2000a3d0
 8002680:	08003a48 	.word	0x08003a48
 8002684:	2000a3c0 	.word	0x2000a3c0
 8002688:	2000a3b4 	.word	0x2000a3b4
 800268c:	2000a3c4 	.word	0x2000a3c4
 8002690:	2000a3c8 	.word	0x2000a3c8

08002694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d053      	beq.n	800274e <vPortFree+0xba>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80026a6:	2308      	movs	r3, #8
 80026a8:	425b      	negs	r3, r3
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4413      	add	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <vPortFree+0xc4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <vPortFree+0x4a>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	f44f 7192 	mov.w	r1, #292	; 0x124
 80026d8:	4820      	ldr	r0, [pc, #128]	; (800275c <vPortFree+0xc8>)
 80026da:	f000 fa91 	bl	8002c00 <assert_failed>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <vPortFree+0x6e>
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	f240 1125 	movw	r1, #293	; 0x125
 80026fc:	4817      	ldr	r0, [pc, #92]	; (800275c <vPortFree+0xc8>)
 80026fe:	f000 fa7f 	bl	8002c00 <assert_failed>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <vPortFree+0xc4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01e      	beq.n	800274e <vPortFree+0xba>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11a      	bne.n	800274e <vPortFree+0xba>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <vPortFree+0xc4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002728:	f7fe fbbe 	bl	8000ea8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <vPortFree+0xcc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4413      	add	r3, r2
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <vPortFree+0xcc>)
 8002738:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800273a:	6938      	ldr	r0, [r7, #16]
 800273c:	f000 f876 	bl	800282c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <vPortFree+0xd0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a07      	ldr	r2, [pc, #28]	; (8002764 <vPortFree+0xd0>)
 8002748:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800274a:	f7fe fbf3 	bl	8000f34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000a3d0 	.word	0x2000a3d0
 800275c:	08003a48 	.word	0x08003a48
 8002760:	2000a3c0 	.word	0x2000a3c0
 8002764:	2000a3cc 	.word	0x2000a3cc

08002768 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800276e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002772:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <prvHeapInit+0xac>)
 8002776:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3307      	adds	r3, #7
 8002786:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0307 	bic.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <prvHeapInit+0xac>)
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <prvHeapInit+0xb0>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <prvHeapInit+0xb0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80027b4:	2208      	movs	r2, #8
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <prvHeapInit+0xb4>)
 80027c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <prvHeapInit+0xb4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <prvHeapInit+0xb4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	1ad2      	subs	r2, r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <prvHeapInit+0xb4>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <prvHeapInit+0xb8>)
 80027f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <prvHeapInit+0xbc>)
 80027fe:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <prvHeapInit+0xc0>)
 8002802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002806:	601a      	str	r2, [r3, #0]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	200003b4 	.word	0x200003b4
 8002818:	2000a3b4 	.word	0x2000a3b4
 800281c:	2000a3bc 	.word	0x2000a3bc
 8002820:	2000a3c4 	.word	0x2000a3c4
 8002824:	2000a3c0 	.word	0x2000a3c0
 8002828:	2000a3d0 	.word	0x2000a3d0

0800282c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002834:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <prvInsertBlockIntoFreeList+0xac>)
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e002      	b.n	8002840 <prvInsertBlockIntoFreeList+0x14>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	d8f7      	bhi.n	800283a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d108      	bne.n	800286e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	441a      	add	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	441a      	add	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d118      	bne.n	80028b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <prvInsertBlockIntoFreeList+0xb0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d00d      	beq.n	80028aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e008      	b.n	80028bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <prvInsertBlockIntoFreeList+0xb0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e003      	b.n	80028bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d002      	beq.n	80028ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000a3b4 	.word	0x2000a3b4
 80028dc:	2000a3bc 	.word	0x2000a3bc

080028e0 <start_application>:
  * @brief  Create Task and launch Scheduler
  * @parm 	none
  * @retval none
  */
void start_application(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af02      	add	r7, sp, #8
	BaseType_t xReturned;

      binary_usart2_mutex = xSemaphoreCreateBinary();
 80028e6:	2203      	movs	r2, #3
 80028e8:	2100      	movs	r1, #0
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fd fdfe 	bl	80004ec <xQueueGenericCreate>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <start_application+0x54>)
 80028f4:	601a      	str	r2, [r3, #0]

	 xReturned = xTaskCreate(
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <start_application+0x58>)
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2305      	movs	r3, #5
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2304      	movs	r3, #4
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	490d      	ldr	r1, [pc, #52]	; (800293c <start_application+0x5c>)
 8002906:	480e      	ldr	r0, [pc, #56]	; (8002940 <start_application+0x60>)
 8002908:	f7fe f8b2 	bl	8000a70 <xTaskCreate>
 800290c:	6078      	str	r0, [r7, #4]
		  //vTaskDelete( xHandle );
	  }else{
		// not enough memory to create task
	  }

	 xReturned = xTaskCreate(
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <start_application+0x64>)
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2305      	movs	r3, #5
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2302      	movs	r3, #2
 8002918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291c:	490a      	ldr	r1, [pc, #40]	; (8002948 <start_application+0x68>)
 800291e:	480b      	ldr	r0, [pc, #44]	; (800294c <start_application+0x6c>)
 8002920:	f7fe f8a6 	bl	8000a70 <xTaskCreate>
 8002924:	6078      	str	r0, [r7, #4]



     // start the scheduler, task will be started and the
     // function will not return
	vTaskStartScheduler();
 8002926:	f7fe fa63 	bl	8000df0 <vTaskStartScheduler>


}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000a400 	.word	0x2000a400
 8002938:	2000a3d4 	.word	0x2000a3d4
 800293c:	08003a78 	.word	0x08003a78
 8002940:	08002951 	.word	0x08002951
 8002944:	2000a3d8 	.word	0x2000a3d8
 8002948:	08003a90 	.word	0x08003a90
 800294c:	080029a9 	.word	0x080029a9

08002950 <pin13_activation>:


void pin13_activation(int p){
 8002950:	b580      	push	{r7, lr}
 8002952:	b0c2      	sub	sp, #264	; 0x108
 8002954:	af00      	add	r7, sp, #0
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	6018      	str	r0, [r3, #0]
		char buffer[256];
		sprintf(buffer, "Activation numero %d\r\n", p);
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	f107 0008 	add.w	r0, r7, #8
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	490f      	ldr	r1, [pc, #60]	; (80029a0 <pin13_activation+0x50>)
 8002964:	f000 fd04 	bl	8003370 <siprintf>
		while(1){

			if( binary_usart2_mutex == NULL )
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <pin13_activation+0x54>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0fb      	beq.n	8002968 <pin13_activation+0x18>
			        /* There was insufficient FreeRTOS heap available for the semaphore to
			        be created successfully. */
			    }
			    else
			    {
			        if( xSemaphoreTake( binary_usart2_mutex, ( TickType_t ) portMAX_DELAY ) == pdTRUE )
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <pin13_activation+0x54>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fedf 	bl	800073c <xQueueSemaphoreTake>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d1f1      	bne.n	8002968 <pin13_activation+0x18>
			        {
						USART2_Transmit(buffer, strlen(buffer));
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fc29 	bl	80001e0 <strlen>
 800298e:	4602      	mov	r2, r0
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fbb2 	bl	8003100 <USART2_Transmit>
			if( binary_usart2_mutex == NULL )
 800299c:	e7e4      	b.n	8002968 <pin13_activation+0x18>
 800299e:	bf00      	nop
 80029a0:	08003a98 	.word	0x08003a98
 80029a4:	2000a400 	.word	0x2000a400

080029a8 <led_blinking>:
			    }
		}
}

void led_blinking(int p)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	/* Block for 500ms. */
	 const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
 80029b0:	2332      	movs	r3, #50	; 0x32
 80029b2:	60fb      	str	r3, [r7, #12]
	/* tasks must not return, use an infinite loop */
	for(;;){


		//vTaskDelayUntil( &xLastWakeTime, xFrequency );
		vTaskDelay(xDelay);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7fe f9e1 	bl	8000d7c <vTaskDelay>
		GPIOA->BSRR = GPIO_BSRR_BR5;/* switch le led OFF */
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <led_blinking+0x28>)
 80029bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029c0:	619a      	str	r2, [r3, #24]
		//vTaskDelayUntil( &xLastWakeTime, xFrequency );
		vTaskDelay(xDelay);
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7fe f9da 	bl	8000d7c <vTaskDelay>
		GPIOA->BSRR = GPIO_BSRR_BS5 ;/*switch led ON*/
 80029c8:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <led_blinking+0x28>)
 80029ca:	2220      	movs	r2, #32
 80029cc:	619a      	str	r2, [r3, #24]
		vTaskDelay(xDelay);
 80029ce:	e7f1      	b.n	80029b4 <led_blinking+0xc>
 80029d0:	40020000 	.word	0x40020000

080029d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	; (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <EXTI15_10_IRQHandler>:
{
	return binary_usart2_mutex;
}

void EXTI15_10_IRQHandler()
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
	/*make sure the interrupt is enable for pc13*/
	if((EXTI->PR & EXTI_PR_PR13)&& (EXTI->IMR & EXTI_IMR_MR13)){
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <EXTI15_10_IRQHandler+0x44>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <EXTI15_10_IRQHandler+0x3c>
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <EXTI15_10_IRQHandler+0x44>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <EXTI15_10_IRQHandler+0x3c>

		xSemaphoreGiveFromISR( binary_usart2_mutex,  &xHigherPriorityTaskWoken);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <EXTI15_10_IRQHandler+0x48>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1d3a      	adds	r2, r7, #4
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fd86 	bl	80005e8 <xQueueGiveFromISR>
		/*clear the bit by setting it to '1'*/
		EXTI->PR |= EXTI_PR_PR13;
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <EXTI15_10_IRQHandler+0x44>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <EXTI15_10_IRQHandler+0x44>)
 8002ae2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae6:	6153      	str	r3, [r2, #20]
	}
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013c00 	.word	0x40013c00
 8002af4:	2000a400 	.word	0x2000a400

08002af8 <EXTI15_10_set_IRQ>:


void EXTI15_10_set_IRQ()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	/** activate clock of peripheric GPIOC and SYSCFG*/
	 RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOAEN;
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <EXTI15_10_set_IRQ+0x78>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <EXTI15_10_set_IRQ+0x78>)
 8002b02:	f043 0305 	orr.w	r3, r3, #5
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
	 RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <EXTI15_10_set_IRQ+0x78>)
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	4a18      	ldr	r2, [pc, #96]	; (8002b70 <EXTI15_10_set_IRQ+0x78>)
 8002b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b12:	6453      	str	r3, [r2, #68]	; 0x44

	 /*Configuration of pc13 input mode*/
	 GPIOC->MODER &= ~GPIO_MODER_MODE13;
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <EXTI15_10_set_IRQ+0x7c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <EXTI15_10_set_IRQ+0x7c>)
 8002b1a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b1e:	6013      	str	r3, [r2, #0]
	 GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <EXTI15_10_set_IRQ+0x7c>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <EXTI15_10_set_IRQ+0x7c>)
 8002b26:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b2a:	60d3      	str	r3, [r2, #12]

	 /*Séléction de PC13 en entrée de EXTI15_10*/
	 SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13_PC;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <EXTI15_10_set_IRQ+0x80>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <EXTI15_10_set_IRQ+0x80>)
 8002b32:	f023 0320 	bic.w	r3, r3, #32
 8002b36:	6153      	str	r3, [r2, #20]
	 SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <EXTI15_10_set_IRQ+0x80>)
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <EXTI15_10_set_IRQ+0x80>)
 8002b3e:	f043 0320 	orr.w	r3, r3, #32
 8002b42:	6153      	str	r3, [r2, #20]

	 /*AUtorise la détection de front descendant*/
	 EXTI->FTSR |= EXTI_FTSR_TR13;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <EXTI15_10_set_IRQ+0x84>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <EXTI15_10_set_IRQ+0x84>)
 8002b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b4e:	60d3      	str	r3, [r2, #12]
	 /*: Interrupt request from line 13 is not masked*/
	 EXTI->IMR |= EXTI_IMR_MR13;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <EXTI15_10_set_IRQ+0x84>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <EXTI15_10_set_IRQ+0x84>)
 8002b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b5a:	6013      	str	r3, [r2, #0]

	 /*Set priority and enable IRQ on EXTI15_10*/
	 NVIC_SetPriority(EXTI15_10_IRQn,configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
 8002b5c:	210f      	movs	r1, #15
 8002b5e:	2028      	movs	r0, #40	; 0x28
 8002b60:	f7ff ff7a 	bl	8002a58 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f7ff ff59 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40013c00 	.word	0x40013c00

08002b80 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0

	EXTI15_10_set_IRQ();
 8002b84:	f7ff ffb8 	bl	8002af8 <EXTI15_10_set_IRQ>

	/*priority grouping 4 bits for pre-emption priority 0 bits for subpriority
	 * (No Subpriority) for FreeRTOS*/
	NVIC_SetPriorityGrouping( 3 );
 8002b88:	2003      	movs	r0, #3
 8002b8a:	f7ff ff23 	bl	80029d4 <__NVIC_SetPriorityGrouping>
	//config_stop_mode();
	/* create tasks and lanch scheduler */
	start_application();
 8002b8e:	f7ff fea7 	bl	80028e0 <start_application>

 	/* Loop forever */
	for(;;);
 8002b92:	e7fe      	b.n	8002b92 <main+0x12>

08002b94 <vApplicationIdleHook>:

/**
  * Idle Hook function, called in loop in the Idle Task
  */
 void vApplicationIdleHook( void )
 {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
	  * De plus lorsque l'on remet le bit configUSE_TICKLESS_IDLE à 0, la fréquence d'incrémentation de tick système explose,
	  * De même lorqu'on appuie sur le bouton, cela génère une interruption et donc réveil le système
	  * Le système s'endort donc bien ce qui permet des économies d'énergie :)
	  */
	 /** to test if the system sleep*/
	 char* buffer = malloc(sizeof(uint8_t)*30);
 8002b9a:	201e      	movs	r0, #30
 8002b9c:	f000 fbc4 	bl	8003328 <malloc>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	607b      	str	r3, [r7, #4]
	 sprintf(buffer, "idle hook, count : %d\r\n", count_tick_system);
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <vApplicationIdleHook+0x44>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	490c      	ldr	r1, [pc, #48]	; (8002bdc <vApplicationIdleHook+0x48>)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fbdf 	bl	8003370 <siprintf>
	 USART2_Transmit_IRQ(buffer, strlen(buffer));
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd fb14 	bl	80001e0 <strlen>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fac5 	bl	800314c <USART2_Transmit_IRQ>

	 /*On attend que toutes les données aient été transmises*/
	 while(!USART2->SR & USART_SR_TC);
 8002bc2:	bf00      	nop
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <vApplicationIdleHook+0x4c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
	 free(buffer);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fbb5 	bl	8003338 <free>
 }
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000a3dc 	.word	0x2000a3dc
 8002bdc:	08003ab0 	.word	0x08003ab0
 8002be0:	40004400 	.word	0x40004400

08002be4 <vApplicationTickHook>:

 /**
   * Tick Hook function, called from ISR SysTick
   */
 void vApplicationTickHook( void )
 {
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
	 /**to test if the system sleep*/
	 count_tick_system ++;
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <vApplicationTickHook+0x18>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <vApplicationTickHook+0x18>)
 8002bf0:	6013      	str	r3, [r2, #0]
 }
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	2000a3dc 	.word	0x2000a3dc

08002c00 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char* file, uint32_t line)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <assert_failed+0xa>

08002c0c <pin_init>:
 * @brief	constructor to configure pin before main()
 * @param	none
 * @retval	none
 */
static void pin_init(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
	/* 2 port instance are declared and mapped on GPIOA and GPIOC address
	 * GPIOA and GPIOC are constant address defined in stm32f401xe.h
	 */
	GPIO_TypeDef * PA = GPIOA, *PC = GPIOC, *PB = GPIOB;
 8002c12:	4b45      	ldr	r3, [pc, #276]	; (8002d28 <pin_init+0x11c>)
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <pin_init+0x120>)
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <pin_init+0x124>)
 8002c1c:	607b      	str	r3, [r7, #4]
	 * of GPIOA and GPOC
	 * RCC is macro definced in stm32f401xe.h and RCC_AHB1ENR_GPIOAEN and
	 * RCC_AHB1ENR_GPIOCEN RCC_AHB1ENR_GPIOCEN are constant also defined in
	 * stm32f401xe.h
	 */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8002c1e:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <pin_init+0x128>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a44      	ldr	r2, [pc, #272]	; (8002d34 <pin_init+0x128>)
 8002c24:	f043 0305 	orr.w	r3, r3, #5
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
	 */
	/* electric configuration (reset the state if in an other state than the
	 * one after reset
	 */
	/* output push pull */
	PA->OTYPER &= ~GPIO_OTYPER_OT5_Msk;			// clear bit field
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f023 0220 	bic.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
	/* slow speed, better for low electrical interference (less noisy) */
	PA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED5_Msk;	// clear bit field
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
	/* no pull-up or pull-down resistor */
	PA->PUPDR &= ~GPIO_PUPDR_PUPD5_Msk;			// clear bit field
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	60da      	str	r2, [r3, #12]

#undef USE_PWM_LED
#ifndef USE_PWM_LED
	/* PA5 in output mode */
	PA->MODER &= ~GPIO_MODER_MODER5_Msk; /* GPIO_MODER_MODER5_Msk : constante
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	601a      	str	r2, [r3, #0]
											définie dans stm32f401xe.h */
	PA->MODER |= GPIO_MODER_MODER5_0;	/* GPIO_MODER_MODER5_0, constante
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]

	/***************************************************************************
	 * Pin configuration for the user button connected to PC13
	 * input,no pull
	 */
	PC->MODER &= ~GPIO_MODER_MODE13_Msk;		// clear bit field
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	601a      	str	r2, [r3, #0]
	PC->PUPDR &= ~GPIO_PUPDR_PUPD13_Msk;		// clear bit field
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
	/***************************************************************************
	 * Pin configuration for USART2,
	 * PA2 et PA3 select alternate function N°7 in alternate function register
	 */
	/* TX on PA2 alternate function 7*/
	GPIOA->AFR[0] &= ~(0xF << (2*4) );	/* clear the 4 bits */
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <pin_init+0x11c>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <pin_init+0x11c>)
 8002c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c88:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << (2*4) ); 	/* set alternate function Nbr 7*/
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <pin_init+0x11c>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <pin_init+0x11c>)
 8002c90:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c94:	6213      	str	r3, [r2, #32]
	/* RX on PA3 alternate function 7 */
	GPIOA->AFR[0] &= ~(0xF << (3*4) );	/* clear the 4 bits */
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <pin_init+0x11c>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <pin_init+0x11c>)
 8002c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ca0:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << (3*4) );		/* set alternate function Nbr 7*/
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <pin_init+0x11c>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <pin_init+0x11c>)
 8002ca8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002cac:	6213      	str	r3, [r2, #32]
	/* Configure alternate function for USART2 TX/RX (PIN2/3) in mode register*/
	GPIOA->MODER &= ~(3 << (2 * 2) );	/*TX*/
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <pin_init+0x11c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <pin_init+0x11c>)
 8002cb4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cb8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(3 << (3 * 2) );	/*RX*/
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <pin_init+0x11c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <pin_init+0x11c>)
 8002cc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cc4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << (2 * 2) );	/*TX*/
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <pin_init+0x11c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <pin_init+0x11c>)
 8002ccc:	f043 0320 	orr.w	r3, r3, #32
 8002cd0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << (3 * 2) );	/*RX*/
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <pin_init+0x11c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <pin_init+0x11c>)
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cdc:	6013      	str	r3, [r2, #0]
	/************************** PINS PB7 for TIM4 CH2 *************************/
	/* Enable GPIOB and clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <pin_init+0x128>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <pin_init+0x128>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
	/* PB7 as alternate function N°2*/
	PB->AFR[0] &= ~ GPIO_AFRL_AFSEL7_Msk	;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	621a      	str	r2, [r3, #32]
	PB->AFR[0] |= (0x2 << GPIO_AFRL_AFSEL7_Pos)	;	/* AF02 */
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	621a      	str	r2, [r3, #32]
	PB->MODER &= ~GPIO_MODER_MODER7;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
	PB->MODER |= GPIO_MODER_MODER7_1; /* alternate function */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
	/************************** PINS PB7 for TIM4 CH2 *************************/
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40023800 	.word	0x40023800

08002d38 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <HardFault_Handler+0x4>

08002d4c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <MemManage_Handler+0x4>

08002d52 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <BusFault_Handler+0x4>

08002d58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <UsageFault_Handler+0x4>

08002d5e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_malloc_r>:
/* Functions */

#if 1
/* wrap malloc on pvPortMalloc */

void * _malloc_r(struct _reent *reent, size_t nbytes) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
     return pvPortMalloc(nbytes);
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	f7ff fba2 	bl	80024c0 <pvPortMalloc>
 8002d7c:	4603      	mov	r3, r0
};
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_free_r>:


void _free_r(struct _reent *reent,void* ptr)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
        // We simply wrap the FreeRTOS call into a standard form
        vPortFree(ptr);
 8002d90:	6838      	ldr	r0, [r7, #0]
 8002d92:	f7ff fc7f 	bl	8002694 <vPortFree>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_realloc_r>:

void *_realloc_r(struct _reent *reent, void *aptr, size_t nbytes)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
	/* no equivalent function in free RTOS, some newlib functions use it, maybe better to trap
	 * it to debug  */
	return NULL;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <SystemInit+0x20>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <SystemInit+0x20>)
 8002dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <TIM3_IRQHandler>:
  * @brief  TIM3 IRQ Handler
  * @param  none
  * @retval none
  */
void TIM3_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
	TIM_TypeDef  * tim = TIM3;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <TIM3_IRQHandler+0x44>)
 8002de4:	607b      	str	r3, [r7, #4]
	
	/* test uif */
	if ((tim->SR & TIM_SR_UIF) && tim->DIER & TIM_DIER_UIE){
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <TIM3_IRQHandler+0x30>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <TIM3_IRQHandler+0x30>
		/* call the user callback function if set */
		if (TIM3_Callback != 0){
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <TIM3_IRQHandler+0x48>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <TIM3_IRQHandler+0x30>
			TIM3_Callback();
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <TIM3_IRQHandler+0x48>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4798      	blx	r3
		}
	}
	/* ack the IRQ */
	TIM3->SR &= ~ TIM_SR_UIF ;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <TIM3_IRQHandler+0x44>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <TIM3_IRQHandler+0x44>)
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	6113      	str	r3, [r2, #16]
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40000400 	.word	0x40000400
 8002e24:	2000a3e0 	.word	0x2000a3e0

08002e28 <TIM5_Init>:
 * @brief  Setup the TIM5 to count (for FreeRTOS profiling),
 * @param  freq : frequency of counting
 * @retval None
 */
 void TIM5_Init(uint32_t freq)
 {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	TIM_TypeDef  * tim = TIM5;
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <TIM5_Init+0x60>)
 8002e32:	60fb      	str	r3, [r7, #12]
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		/* activate TIM5 Clock */
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <TIM5_Init+0x64>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <TIM5_Init+0x64>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6413      	str	r3, [r2, #64]	; 0x40

	/* prescaler value set to get a freq Hz clock */
	tim->PSC = (SystemCoreClock / freq) - 1 ;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <TIM5_Init+0x68>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	1e5a      	subs	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
	/* auto reload register set to its maximum value (32 bits) */
	tim->ARR = 0xffffffff;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
	/* to enable change the in CCMR for CCxS bit the channel must be off */
	tim->CCER = 0;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	621a      	str	r2, [r3, #32]
	 	/* update counter and prescaler : it clear prescaler and counter, to start
	 * with a full cycle. It will set the Update flag  (UIF), note that it can
	 * be avoided by setting the UDIS bit in CR1
	 * see TIM5_clear_periodic_event() */
	tim->EGR = TIM_EGR_UG;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	615a      	str	r2, [r3, #20]
	/* As an update has been generated by software,
	 * clear the bit in the status register, all flags can also be cleared
	 * here
	 */
	tim->SR &= ~ TIM_SR_UIF ;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 0201 	bic.w	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
	/* enable the counter (start counting) */
	tim->CR1 |= TIM_CR1_CEN ;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]
 }
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	20000008 	.word	0x20000008

08002e94 <TIM5_get_cnt>:

 uint32_t TIM5_get_cnt(void)
 {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
	TIM_TypeDef  * tim = TIM5;
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <TIM5_get_cnt+0x1c>)
 8002e9c:	607b      	str	r3, [r7, #4]
	return tim->CNT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

 }
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40000c00 	.word	0x40000c00

08002eb4 <task_to_ready>:
	T2_count++;	// led on
	return 0;
}

void task_to_ready(void * pvParameter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	asm("nop");
 8002ebc:	bf00      	nop
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <switched_in>:
 * 			the last task switched out in FreeRTOSConfig.h with trace macro
 * @parm   	task tag
 */

void switched_in(int task_tag)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
//	if (last_TaskTag != task_tag){
		// context switch has occured : preemption or time-slice
		// do whatever ..
		// increase profiling counter
		switch (task_tag) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d822      	bhi.n	8002f20 <switched_in+0x54>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <switched_in+0x14>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002efd 	.word	0x08002efd
 8002ee8:	08002f09 	.word	0x08002f09
 8002eec:	08002f15 	.word	0x08002f15
			case 0 :
				Idle_count++;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <switched_in+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <switched_in+0x64>)
 8002ef8:	6013      	str	r3, [r2, #0]
				break;
 8002efa:	e012      	b.n	8002f22 <switched_in+0x56>
			case 1 :
				T1_count++;
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <switched_in+0x68>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <switched_in+0x68>)
 8002f04:	6013      	str	r3, [r2, #0]
				break;
 8002f06:	e00c      	b.n	8002f22 <switched_in+0x56>
			case 2 :
				T2_count++;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <switched_in+0x6c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <switched_in+0x6c>)
 8002f10:	6013      	str	r3, [r2, #0]
				break;
 8002f12:	e006      	b.n	8002f22 <switched_in+0x56>
			case 3 :
				T3_count++;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <switched_in+0x70>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <switched_in+0x70>)
 8002f1c:	6013      	str	r3, [r2, #0]
				break;
 8002f1e:	e000      	b.n	8002f22 <switched_in+0x56>
			default :

				break;
 8002f20:	bf00      	nop
		}
//	}
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	2000a410 	.word	0x2000a410
 8002f34:	2000a404 	.word	0x2000a404
 8002f38:	2000a40c 	.word	0x2000a40c
 8002f3c:	2000a408 	.word	0x2000a408

08002f40 <switched_out>:
 * 			task tag is used here, last_TaskTag is set to
 * 			the last task switched out in FreeRTOSConfig.h with trace macro
 * @parm   	task tag
 */
void switched_out(int task_tag)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	switch (task_tag) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d80a      	bhi.n	8002f64 <switched_out+0x24>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <switched_out+0x14>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f65 	.word	0x08002f65
 8002f5c:	08002f65 	.word	0x08002f65
 8002f60:	08002f65 	.word	0x08002f65
		case 2 :
			break;
		case 3 :
			break;
		default :
			break;
 8002f64:	bf00      	nop
	}

}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <__NVIC_EnableIRQ>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db0b      	blt.n	8002f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4907      	ldr	r1, [pc, #28]	; (8002fac <__NVIC_EnableIRQ+0x38>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_DisableIRQ>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db10      	blt.n	8002fe4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <__NVIC_DisableIRQ+0x40>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	3320      	adds	r3, #32
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fe0:	f3bf 8f6f 	isb	sy
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <USART_Init_115200>:
  * @brief  constructor to Init USART2 @ 115200 baud before main()
  * @param  None
  * @retval None
  * */
__attribute__((constructor(108))) static void USART_Init_115200(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	USART2_Init(115200);
 8002ff8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002ffc:	f000 f802 	bl	8003004 <USART2_Init>
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}

08003004 <USART2_Init>:
  * @brief  Init USART2 @ baud,8,1,n
  * @param  baud rate
  * @retval None
  * */
void USART2_Init(uint32_t baud)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
uint32_t tmp = 0, divmantissa, divfraction, apbclk;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]

	/* initialisation de l'USART2 : baud,8,1,n */

	/* reset/de-reset USART2 */
	RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 8003010:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <USART2_Init+0xf0>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a37      	ldr	r2, [pc, #220]	; (80030f4 <USART2_Init+0xf0>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 800301c:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <USART2_Init+0xf0>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a34      	ldr	r2, [pc, #208]	; (80030f4 <USART2_Init+0xf0>)
 8003022:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003026:	6213      	str	r3, [r2, #32]
	/* enable USART2 clk */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003028:	4b32      	ldr	r3, [pc, #200]	; (80030f4 <USART2_Init+0xf0>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a31      	ldr	r2, [pc, #196]	; (80030f4 <USART2_Init+0xf0>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40

	/*-------------- UART parameters configuration --------------- */
	USART2->CR1 &= ~USART_CR1_UE;
 8003034:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <USART2_Init+0xf4>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <USART2_Init+0xf4>)
 800303a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303e:	60d3      	str	r3, [r2, #12]
	/* USART CR1 Configuration : tx and rx enable; oversampling = 16 */
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <USART2_Init+0xf4>)
 8003042:	220c      	movs	r2, #12
 8003044:	60da      	str	r2, [r3, #12]
	/* USART CR2 Configuration : 1 stop bit*/
	USART2->CR2 = 0 ;
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <USART2_Init+0xf4>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
	/* USART CR3 Configuration : no flow control*/
	USART2->CR3 = 0;
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <USART2_Init+0xf4>)
 800304e:	2200      	movs	r2, #0
 8003050:	615a      	str	r2, [r3, #20]
	/* USART BRR Configuration : depend on the bus frequency*/
	/* get APB1 prescaler to determine the USART clock frequency apbclk*/
	tmp = (RCC->CFGR & RCC_CFGR_PPRE1)>>10;
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <USART2_Init+0xf0>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	60bb      	str	r3, [r7, #8]
	if (tmp & 4){
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <USART2_Init+0x7c>
		tmp =  (tmp & 3) + 1;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
		apbclk = SystemCoreClock >> tmp;
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <USART2_Init+0xf8>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e002      	b.n	8003086 <USART2_Init+0x82>
	}
	else {
		apbclk = SystemCoreClock;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <USART2_Init+0xf8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
	}

	/* compute baud rate from the apbclock frequency
	 *  baud = apbclk /(8*(2-OVER8)*USARTDIV) */

	tmp = (USART2->CR1 & USART_CR1_OVER8)>>15;
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <USART2_Init+0xf4>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0bdb      	lsrs	r3, r3, #15
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
	if (tmp == 0) {
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <USART2_Init+0xb0>
		/* OVER8 = 0, div by 16 */
		divmantissa = (apbclk/baud) >> 4;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	617b      	str	r3, [r7, #20]
		divfraction = (apbclk/baud) & 0xF;
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e00c      	b.n	80030ce <USART2_Init+0xca>
	}
	else {
		/* OVER8 = 0, div by 8 */
		divmantissa = (apbclk/baud) >> 3;
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	617b      	str	r3, [r7, #20]
		divfraction = (apbclk/baud) & 3;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	613b      	str	r3, [r7, #16]
	}
	/*USART2->BRR = mantissa and fraction part*/
	USART2->BRR = (divmantissa << 4) | divfraction ;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	011a      	lsls	r2, r3, #4
 80030d2:	4909      	ldr	r1, [pc, #36]	; (80030f8 <USART2_Init+0xf4>)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]


	/* enable USART */
	USART2->CR1 |= USART_CR1_UE;
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <USART2_Init+0xf4>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <USART2_Init+0xf4>)
 80030e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030e4:	60d3      	str	r3, [r2, #12]

	/*-------------- interrupt --------------- */
	//NVIC_SetPriority(USART2_IRQn,0x15); /*  priority */
	//NVIC_EnableIRQ(USART2_IRQn);
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40004400 	.word	0x40004400
 80030fc:	20000008 	.word	0x20000008

08003100 <USART2_Transmit>:
  * @param  data address
  * 		len (in bytes = nbr of data)
  * @retval nbr of data sent
  * */
uint32_t USART2_Transmit(uint8_t * data, uint32_t len)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
	uint32_t Nrdata = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]

	while (Nrdata < len){
 800310e:	e00f      	b.n	8003130 <USART2_Transmit+0x30>
		while (!(USART2->SR & USART_SR_TXE)){
 8003110:	bf00      	nop
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <USART2_Transmit+0x48>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f9      	beq.n	8003112 <USART2_Transmit+0x12>
			/* wait for TXE to be set */
		}
		/* store the datum in TDR */
		USART2->DR = *data++;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <USART2_Transmit+0x48>)
 8003128:	605a      	str	r2, [r3, #4]
		/* increment the data counter */
		Nrdata++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3301      	adds	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
	while (Nrdata < len){
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3eb      	bcc.n	8003110 <USART2_Transmit+0x10>
	}
	/* wait last data to be completely sent (Optionnal) */
	//while (!(USART2->SR & USART_SR_TC));

	return Nrdata;
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40004400 	.word	0x40004400

0800314c <USART2_Transmit_IRQ>:
  * @param  adress of the data to send
  * @param	number of data
  * @retval 0 if success, -1 if the transmission is already busy
  * */
int32_t USART2_Transmit_IRQ( uint8_t * data, uint32_t len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]

	/* critical section */
	NVIC_DisableIRQ(USART2_IRQn);
 8003156:	2026      	movs	r0, #38	; 0x26
 8003158:	f7ff ff2a 	bl	8002fb0 <__NVIC_DisableIRQ>

	/* test busy flag for transmission */
	if (usart2_dev.state & TX_BUSY){
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <USART2_Transmit_IRQ+0x80>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <USART2_Transmit_IRQ+0x32>
		/* a transmission is running, quit critical section return error */
		NVIC_EnableIRQ(USART2_IRQn);
 8003168:	2026      	movs	r0, #38	; 0x26
 800316a:	f7ff ff03 	bl	8002f74 <__NVIC_EnableIRQ>
		errno = EAGAIN;
 800316e:	f000 f8b1 	bl	80032d4 <__errno>
 8003172:	4602      	mov	r2, r0
 8003174:	230b      	movs	r3, #11
 8003176:	6013      	str	r3, [r2, #0]
		return -1;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e022      	b.n	80031c4 <USART2_Transmit_IRQ+0x78>
	}
	/* test if there are any data to send */
	if (len==0){
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <USART2_Transmit_IRQ+0x42>
		NVIC_EnableIRQ(USART2_IRQn);
 8003184:	2026      	movs	r0, #38	; 0x26
 8003186:	f7ff fef5 	bl	8002f74 <__NVIC_EnableIRQ>
		return 0;
 800318a:	2300      	movs	r3, #0
 800318c:	e01a      	b.n	80031c4 <USART2_Transmit_IRQ+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800318e:	f3bf 8f4f 	dsb	sy
	}
	/* set busy flag for transmission */
	__DSB(); // synchronisation barrier
	usart2_dev.state |=  TX_BUSY;
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <USART2_Transmit_IRQ+0x80>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <USART2_Transmit_IRQ+0x80>)
 800319c:	6013      	str	r3, [r2, #0]
	/* initialize the transmit info for ISR */
	usart2_dev.pTxBuffer = data;
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <USART2_Transmit_IRQ+0x80>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6053      	str	r3, [r2, #4]
	usart2_dev.TxSize = len;
 80031a4:	4a09      	ldr	r2, [pc, #36]	; (80031cc <USART2_Transmit_IRQ+0x80>)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	60d3      	str	r3, [r2, #12]
	usart2_dev.TxCount=0;
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <USART2_Transmit_IRQ+0x80>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]

	/* end of critical section */
	NVIC_EnableIRQ(USART2_IRQn);
 80031b0:	2026      	movs	r0, #38	; 0x26
 80031b2:	f7ff fedf 	bl	8002f74 <__NVIC_EnableIRQ>

	/* enable interrupt on transmit data register empty */
	USART2->CR1 |= USART_CR1_TXEIE;
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <USART2_Transmit_IRQ+0x84>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <USART2_Transmit_IRQ+0x84>)
 80031bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c0:	60d3      	str	r3, [r2, #12]

	// return len
	return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	2000a3e4 	.word	0x2000a3e4
 80031d0:	40004400 	.word	0x40004400

080031d4 <USART2_IRQHandler>:
  * @brief  ISR of USART2
  * @param  none
  * @retval none
  * */
void USART2_IRQHandler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
	uint32_t status, cr1, dummy_read;

	/* get status register */
	status = USART2->SR;
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <USART2_IRQHandler+0xa4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	607b      	str	r3, [r7, #4]
	/* get Interrupt sources */
	cr1 = USART2->CR1 & 0x1F0;
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <USART2_IRQHandler+0xa4>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e8:	603b      	str	r3, [r7, #0]

	/* TXIE interrupt (a char has been transfered in the serializer) */
	if ((status & USART_SR_TXE) && (cr1 & USART_CR1_TXEIE) ){
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d024      	beq.n	800323e <USART2_IRQHandler+0x6a>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01f      	beq.n	800323e <USART2_IRQHandler+0x6a>
		if (usart2_dev.TxCount < usart2_dev.TxSize){
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <USART2_IRQHandler+0xa8>)
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <USART2_IRQHandler+0xa8>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	429a      	cmp	r2, r3
 8003208:	d20d      	bcs.n	8003226 <USART2_IRQHandler+0x52>
			USART2->DR = *usart2_dev.pTxBuffer++;
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <USART2_IRQHandler+0xa8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	491a      	ldr	r1, [pc, #104]	; (800327c <USART2_IRQHandler+0xa8>)
 8003212:	604a      	str	r2, [r1, #4]
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <USART2_IRQHandler+0xa4>)
 8003218:	605a      	str	r2, [r3, #4]
			usart2_dev.TxCount++;
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <USART2_IRQHandler+0xa8>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	4a16      	ldr	r2, [pc, #88]	; (800327c <USART2_IRQHandler+0xa8>)
 8003222:	6153      	str	r3, [r2, #20]
 8003224:	e00b      	b.n	800323e <USART2_IRQHandler+0x6a>
		} else {
			/* No char to transmit anymore stop TXE interrupt */
			USART2->CR1 &= ~USART_CR1_TXEIE;
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <USART2_IRQHandler+0xa4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a13      	ldr	r2, [pc, #76]	; (8003278 <USART2_IRQHandler+0xa4>)
 800322c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003230:	60d3      	str	r3, [r2, #12]
			/* optionally enable TC interrupt if the usart is going to be
			 * shut down */
//			USART2->CR1 |= USART_CR1_TCIE;

			/* now the transmission is not busy anymore */
			usart2_dev.state &= ~TX_BUSY ;
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <USART2_IRQHandler+0xa8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0302 	bic.w	r3, r3, #2
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <USART2_IRQHandler+0xa8>)
 800323c:	6013      	str	r3, [r2, #0]
		}
	}

	/* TCIE interrupt (a char has been completely transmitted on the line) */
	if ((status & USART_SR_TC) && (cr1 & USART_CR1_TCIE) ){
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <USART2_IRQHandler+0x96>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <USART2_IRQHandler+0x96>
		 * USART can be shut down to save power
		 * to maintain the line IDLE for a transmit character duration
		 * and enable end of frame detection a timer should be used
		 */
		/* stop the TC interrupt */
		USART2->CR1 &= ~USART_CR1_TCIE;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <USART2_IRQHandler+0xa4>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <USART2_IRQHandler+0xa4>)
 8003258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325c:	60d3      	str	r3, [r2, #12]
		/* now the transmission is not busy anymore */
		usart2_dev.state &= ~TX_BUSY ;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <USART2_IRQHandler+0xa8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0302 	bic.w	r3, r3, #2
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <USART2_IRQHandler+0xa8>)
 8003268:	6013      	str	r3, [r2, #0]

	/* RXNE interrupt (a char has been received) */

	/* ... */

}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40004400 	.word	0x40004400
 800327c:	2000a3e4 	.word	0x2000a3e4

08003280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003286:	e003      	b.n	8003290 <LoopCopyDataInit>

08003288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800328a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800328c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800328e:	3104      	adds	r1, #4

08003290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003298:	d3f6      	bcc.n	8003288 <CopyDataInit>
  ldr  r2, =_sbss
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800329c:	e002      	b.n	80032a4 <LoopFillZerobss>

0800329e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800329e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032a0:	f842 3b04 	str.w	r3, [r2], #4

080032a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032a8:	d3f9      	bcc.n	800329e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032aa:	f7ff fd85 	bl	8002db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ae:	f000 f817 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032b2:	f7ff fc65 	bl	8002b80 <main>
  bx  lr    
 80032b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80032bc:	08003b0c 	.word	0x08003b0c
  ldr  r0, =_sdata
 80032c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032c4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80032c8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80032cc:	2000a414 	.word	0x2000a414

080032d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d0:	e7fe      	b.n	80032d0 <ADC_IRQHandler>
	...

080032d4 <__errno>:
 80032d4:	4b01      	ldr	r3, [pc, #4]	; (80032dc <__errno+0x8>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	2000000c 	.word	0x2000000c

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4e0d      	ldr	r6, [pc, #52]	; (8003318 <__libc_init_array+0x38>)
 80032e4:	4c0d      	ldr	r4, [pc, #52]	; (800331c <__libc_init_array+0x3c>)
 80032e6:	1ba4      	subs	r4, r4, r6
 80032e8:	10a4      	asrs	r4, r4, #2
 80032ea:	2500      	movs	r5, #0
 80032ec:	42a5      	cmp	r5, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	4e0b      	ldr	r6, [pc, #44]	; (8003320 <__libc_init_array+0x40>)
 80032f2:	4c0c      	ldr	r4, [pc, #48]	; (8003324 <__libc_init_array+0x44>)
 80032f4:	f000 fb50 	bl	8003998 <_init>
 80032f8:	1ba4      	subs	r4, r4, r6
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	2500      	movs	r5, #0
 80032fe:	42a5      	cmp	r5, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003308:	4798      	blx	r3
 800330a:	3501      	adds	r5, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003312:	4798      	blx	r3
 8003314:	3501      	adds	r5, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003afc 	.word	0x08003afc
 800331c:	08003afc 	.word	0x08003afc
 8003320:	08003afc 	.word	0x08003afc
 8003324:	08003b08 	.word	0x08003b08

08003328 <malloc>:
 8003328:	4b02      	ldr	r3, [pc, #8]	; (8003334 <malloc+0xc>)
 800332a:	4601      	mov	r1, r0
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f7ff bd1d 	b.w	8002d6c <_malloc_r>
 8003332:	bf00      	nop
 8003334:	2000000c 	.word	0x2000000c

08003338 <free>:
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <free+0xc>)
 800333a:	4601      	mov	r1, r0
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	f7ff bd22 	b.w	8002d86 <_free_r>
 8003342:	bf00      	nop
 8003344:	2000000c 	.word	0x2000000c

08003348 <memcpy>:
 8003348:	b510      	push	{r4, lr}
 800334a:	1e43      	subs	r3, r0, #1
 800334c:	440a      	add	r2, r1
 800334e:	4291      	cmp	r1, r2
 8003350:	d100      	bne.n	8003354 <memcpy+0xc>
 8003352:	bd10      	pop	{r4, pc}
 8003354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800335c:	e7f7      	b.n	800334e <memcpy+0x6>

0800335e <memset>:
 800335e:	4402      	add	r2, r0
 8003360:	4603      	mov	r3, r0
 8003362:	4293      	cmp	r3, r2
 8003364:	d100      	bne.n	8003368 <memset+0xa>
 8003366:	4770      	bx	lr
 8003368:	f803 1b01 	strb.w	r1, [r3], #1
 800336c:	e7f9      	b.n	8003362 <memset+0x4>
	...

08003370 <siprintf>:
 8003370:	b40e      	push	{r1, r2, r3}
 8003372:	b500      	push	{lr}
 8003374:	b09c      	sub	sp, #112	; 0x70
 8003376:	ab1d      	add	r3, sp, #116	; 0x74
 8003378:	9002      	str	r0, [sp, #8]
 800337a:	9006      	str	r0, [sp, #24]
 800337c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <siprintf+0x38>)
 8003382:	9107      	str	r1, [sp, #28]
 8003384:	9104      	str	r1, [sp, #16]
 8003386:	4909      	ldr	r1, [pc, #36]	; (80033ac <siprintf+0x3c>)
 8003388:	f853 2b04 	ldr.w	r2, [r3], #4
 800338c:	9105      	str	r1, [sp, #20]
 800338e:	6800      	ldr	r0, [r0, #0]
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	a902      	add	r1, sp, #8
 8003394:	f000 f866 	bl	8003464 <_svfiprintf_r>
 8003398:	9b02      	ldr	r3, [sp, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	b01c      	add	sp, #112	; 0x70
 80033a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033a4:	b003      	add	sp, #12
 80033a6:	4770      	bx	lr
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	ffff0208 	.word	0xffff0208

080033b0 <__ssputs_r>:
 80033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	688e      	ldr	r6, [r1, #8]
 80033b6:	429e      	cmp	r6, r3
 80033b8:	4682      	mov	sl, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	4690      	mov	r8, r2
 80033be:	4699      	mov	r9, r3
 80033c0:	d837      	bhi.n	8003432 <__ssputs_r+0x82>
 80033c2:	898a      	ldrh	r2, [r1, #12]
 80033c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033c8:	d031      	beq.n	800342e <__ssputs_r+0x7e>
 80033ca:	6825      	ldr	r5, [r4, #0]
 80033cc:	6909      	ldr	r1, [r1, #16]
 80033ce:	1a6f      	subs	r7, r5, r1
 80033d0:	6965      	ldr	r5, [r4, #20]
 80033d2:	2302      	movs	r3, #2
 80033d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80033dc:	f109 0301 	add.w	r3, r9, #1
 80033e0:	443b      	add	r3, r7
 80033e2:	429d      	cmp	r5, r3
 80033e4:	bf38      	it	cc
 80033e6:	461d      	movcc	r5, r3
 80033e8:	0553      	lsls	r3, r2, #21
 80033ea:	d530      	bpl.n	800344e <__ssputs_r+0x9e>
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7ff fcbd 	bl	8002d6c <_malloc_r>
 80033f2:	4606      	mov	r6, r0
 80033f4:	b950      	cbnz	r0, 800340c <__ssputs_r+0x5c>
 80033f6:	230c      	movs	r3, #12
 80033f8:	f8ca 3000 	str.w	r3, [sl]
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003402:	81a3      	strh	r3, [r4, #12]
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340c:	463a      	mov	r2, r7
 800340e:	6921      	ldr	r1, [r4, #16]
 8003410:	f7ff ff9a 	bl	8003348 <memcpy>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800341a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	6126      	str	r6, [r4, #16]
 8003422:	6165      	str	r5, [r4, #20]
 8003424:	443e      	add	r6, r7
 8003426:	1bed      	subs	r5, r5, r7
 8003428:	6026      	str	r6, [r4, #0]
 800342a:	60a5      	str	r5, [r4, #8]
 800342c:	464e      	mov	r6, r9
 800342e:	454e      	cmp	r6, r9
 8003430:	d900      	bls.n	8003434 <__ssputs_r+0x84>
 8003432:	464e      	mov	r6, r9
 8003434:	4632      	mov	r2, r6
 8003436:	4641      	mov	r1, r8
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	f000 fa93 	bl	8003964 <memmove>
 800343e:	68a3      	ldr	r3, [r4, #8]
 8003440:	1b9b      	subs	r3, r3, r6
 8003442:	60a3      	str	r3, [r4, #8]
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	441e      	add	r6, r3
 8003448:	6026      	str	r6, [r4, #0]
 800344a:	2000      	movs	r0, #0
 800344c:	e7dc      	b.n	8003408 <__ssputs_r+0x58>
 800344e:	462a      	mov	r2, r5
 8003450:	f7ff fca5 	bl	8002d9e <_realloc_r>
 8003454:	4606      	mov	r6, r0
 8003456:	2800      	cmp	r0, #0
 8003458:	d1e2      	bne.n	8003420 <__ssputs_r+0x70>
 800345a:	6921      	ldr	r1, [r4, #16]
 800345c:	4650      	mov	r0, sl
 800345e:	f7ff fc92 	bl	8002d86 <_free_r>
 8003462:	e7c8      	b.n	80033f6 <__ssputs_r+0x46>

08003464 <_svfiprintf_r>:
 8003464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003468:	461d      	mov	r5, r3
 800346a:	898b      	ldrh	r3, [r1, #12]
 800346c:	061f      	lsls	r7, r3, #24
 800346e:	b09d      	sub	sp, #116	; 0x74
 8003470:	4680      	mov	r8, r0
 8003472:	460c      	mov	r4, r1
 8003474:	4616      	mov	r6, r2
 8003476:	d50f      	bpl.n	8003498 <_svfiprintf_r+0x34>
 8003478:	690b      	ldr	r3, [r1, #16]
 800347a:	b96b      	cbnz	r3, 8003498 <_svfiprintf_r+0x34>
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	f7ff fc75 	bl	8002d6c <_malloc_r>
 8003482:	6020      	str	r0, [r4, #0]
 8003484:	6120      	str	r0, [r4, #16]
 8003486:	b928      	cbnz	r0, 8003494 <_svfiprintf_r+0x30>
 8003488:	230c      	movs	r3, #12
 800348a:	f8c8 3000 	str.w	r3, [r8]
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	e0c8      	b.n	8003626 <_svfiprintf_r+0x1c2>
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	6163      	str	r3, [r4, #20]
 8003498:	2300      	movs	r3, #0
 800349a:	9309      	str	r3, [sp, #36]	; 0x24
 800349c:	2320      	movs	r3, #32
 800349e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034a2:	2330      	movs	r3, #48	; 0x30
 80034a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034a8:	9503      	str	r5, [sp, #12]
 80034aa:	f04f 0b01 	mov.w	fp, #1
 80034ae:	4637      	mov	r7, r6
 80034b0:	463d      	mov	r5, r7
 80034b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034b6:	b10b      	cbz	r3, 80034bc <_svfiprintf_r+0x58>
 80034b8:	2b25      	cmp	r3, #37	; 0x25
 80034ba:	d13e      	bne.n	800353a <_svfiprintf_r+0xd6>
 80034bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80034c0:	d00b      	beq.n	80034da <_svfiprintf_r+0x76>
 80034c2:	4653      	mov	r3, sl
 80034c4:	4632      	mov	r2, r6
 80034c6:	4621      	mov	r1, r4
 80034c8:	4640      	mov	r0, r8
 80034ca:	f7ff ff71 	bl	80033b0 <__ssputs_r>
 80034ce:	3001      	adds	r0, #1
 80034d0:	f000 80a4 	beq.w	800361c <_svfiprintf_r+0x1b8>
 80034d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d6:	4453      	add	r3, sl
 80034d8:	9309      	str	r3, [sp, #36]	; 0x24
 80034da:	783b      	ldrb	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 809d 	beq.w	800361c <_svfiprintf_r+0x1b8>
 80034e2:	2300      	movs	r3, #0
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ec:	9304      	str	r3, [sp, #16]
 80034ee:	9307      	str	r3, [sp, #28]
 80034f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034f4:	931a      	str	r3, [sp, #104]	; 0x68
 80034f6:	462f      	mov	r7, r5
 80034f8:	2205      	movs	r2, #5
 80034fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034fe:	4850      	ldr	r0, [pc, #320]	; (8003640 <_svfiprintf_r+0x1dc>)
 8003500:	f7fc fe76 	bl	80001f0 <memchr>
 8003504:	9b04      	ldr	r3, [sp, #16]
 8003506:	b9d0      	cbnz	r0, 800353e <_svfiprintf_r+0xda>
 8003508:	06d9      	lsls	r1, r3, #27
 800350a:	bf44      	itt	mi
 800350c:	2220      	movmi	r2, #32
 800350e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003512:	071a      	lsls	r2, r3, #28
 8003514:	bf44      	itt	mi
 8003516:	222b      	movmi	r2, #43	; 0x2b
 8003518:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800351c:	782a      	ldrb	r2, [r5, #0]
 800351e:	2a2a      	cmp	r2, #42	; 0x2a
 8003520:	d015      	beq.n	800354e <_svfiprintf_r+0xea>
 8003522:	9a07      	ldr	r2, [sp, #28]
 8003524:	462f      	mov	r7, r5
 8003526:	2000      	movs	r0, #0
 8003528:	250a      	movs	r5, #10
 800352a:	4639      	mov	r1, r7
 800352c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003530:	3b30      	subs	r3, #48	; 0x30
 8003532:	2b09      	cmp	r3, #9
 8003534:	d94d      	bls.n	80035d2 <_svfiprintf_r+0x16e>
 8003536:	b1b8      	cbz	r0, 8003568 <_svfiprintf_r+0x104>
 8003538:	e00f      	b.n	800355a <_svfiprintf_r+0xf6>
 800353a:	462f      	mov	r7, r5
 800353c:	e7b8      	b.n	80034b0 <_svfiprintf_r+0x4c>
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <_svfiprintf_r+0x1dc>)
 8003540:	1a80      	subs	r0, r0, r2
 8003542:	fa0b f000 	lsl.w	r0, fp, r0
 8003546:	4318      	orrs	r0, r3
 8003548:	9004      	str	r0, [sp, #16]
 800354a:	463d      	mov	r5, r7
 800354c:	e7d3      	b.n	80034f6 <_svfiprintf_r+0x92>
 800354e:	9a03      	ldr	r2, [sp, #12]
 8003550:	1d11      	adds	r1, r2, #4
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	9103      	str	r1, [sp, #12]
 8003556:	2a00      	cmp	r2, #0
 8003558:	db01      	blt.n	800355e <_svfiprintf_r+0xfa>
 800355a:	9207      	str	r2, [sp, #28]
 800355c:	e004      	b.n	8003568 <_svfiprintf_r+0x104>
 800355e:	4252      	negs	r2, r2
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	9207      	str	r2, [sp, #28]
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	783b      	ldrb	r3, [r7, #0]
 800356a:	2b2e      	cmp	r3, #46	; 0x2e
 800356c:	d10c      	bne.n	8003588 <_svfiprintf_r+0x124>
 800356e:	787b      	ldrb	r3, [r7, #1]
 8003570:	2b2a      	cmp	r3, #42	; 0x2a
 8003572:	d133      	bne.n	80035dc <_svfiprintf_r+0x178>
 8003574:	9b03      	ldr	r3, [sp, #12]
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	9203      	str	r2, [sp, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	bfb8      	it	lt
 8003580:	f04f 33ff 	movlt.w	r3, #4294967295
 8003584:	3702      	adds	r7, #2
 8003586:	9305      	str	r3, [sp, #20]
 8003588:	4d2e      	ldr	r5, [pc, #184]	; (8003644 <_svfiprintf_r+0x1e0>)
 800358a:	7839      	ldrb	r1, [r7, #0]
 800358c:	2203      	movs	r2, #3
 800358e:	4628      	mov	r0, r5
 8003590:	f7fc fe2e 	bl	80001f0 <memchr>
 8003594:	b138      	cbz	r0, 80035a6 <_svfiprintf_r+0x142>
 8003596:	2340      	movs	r3, #64	; 0x40
 8003598:	1b40      	subs	r0, r0, r5
 800359a:	fa03 f000 	lsl.w	r0, r3, r0
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	4303      	orrs	r3, r0
 80035a2:	3701      	adds	r7, #1
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	7839      	ldrb	r1, [r7, #0]
 80035a8:	4827      	ldr	r0, [pc, #156]	; (8003648 <_svfiprintf_r+0x1e4>)
 80035aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ae:	2206      	movs	r2, #6
 80035b0:	1c7e      	adds	r6, r7, #1
 80035b2:	f7fc fe1d 	bl	80001f0 <memchr>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d038      	beq.n	800362c <_svfiprintf_r+0x1c8>
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <_svfiprintf_r+0x1e8>)
 80035bc:	bb13      	cbnz	r3, 8003604 <_svfiprintf_r+0x1a0>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	3307      	adds	r3, #7
 80035c2:	f023 0307 	bic.w	r3, r3, #7
 80035c6:	3308      	adds	r3, #8
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035cc:	444b      	add	r3, r9
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	e76d      	b.n	80034ae <_svfiprintf_r+0x4a>
 80035d2:	fb05 3202 	mla	r2, r5, r2, r3
 80035d6:	2001      	movs	r0, #1
 80035d8:	460f      	mov	r7, r1
 80035da:	e7a6      	b.n	800352a <_svfiprintf_r+0xc6>
 80035dc:	2300      	movs	r3, #0
 80035de:	3701      	adds	r7, #1
 80035e0:	9305      	str	r3, [sp, #20]
 80035e2:	4619      	mov	r1, r3
 80035e4:	250a      	movs	r5, #10
 80035e6:	4638      	mov	r0, r7
 80035e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ec:	3a30      	subs	r2, #48	; 0x30
 80035ee:	2a09      	cmp	r2, #9
 80035f0:	d903      	bls.n	80035fa <_svfiprintf_r+0x196>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0c8      	beq.n	8003588 <_svfiprintf_r+0x124>
 80035f6:	9105      	str	r1, [sp, #20]
 80035f8:	e7c6      	b.n	8003588 <_svfiprintf_r+0x124>
 80035fa:	fb05 2101 	mla	r1, r5, r1, r2
 80035fe:	2301      	movs	r3, #1
 8003600:	4607      	mov	r7, r0
 8003602:	e7f0      	b.n	80035e6 <_svfiprintf_r+0x182>
 8003604:	ab03      	add	r3, sp, #12
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4622      	mov	r2, r4
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_svfiprintf_r+0x1ec>)
 800360c:	a904      	add	r1, sp, #16
 800360e:	4640      	mov	r0, r8
 8003610:	f3af 8000 	nop.w
 8003614:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003618:	4681      	mov	r9, r0
 800361a:	d1d6      	bne.n	80035ca <_svfiprintf_r+0x166>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	065b      	lsls	r3, r3, #25
 8003620:	f53f af35 	bmi.w	800348e <_svfiprintf_r+0x2a>
 8003624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003626:	b01d      	add	sp, #116	; 0x74
 8003628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362c:	ab03      	add	r3, sp, #12
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4622      	mov	r2, r4
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <_svfiprintf_r+0x1ec>)
 8003634:	a904      	add	r1, sp, #16
 8003636:	4640      	mov	r0, r8
 8003638:	f000 f882 	bl	8003740 <_printf_i>
 800363c:	e7ea      	b.n	8003614 <_svfiprintf_r+0x1b0>
 800363e:	bf00      	nop
 8003640:	08003ac8 	.word	0x08003ac8
 8003644:	08003ace 	.word	0x08003ace
 8003648:	08003ad2 	.word	0x08003ad2
 800364c:	00000000 	.word	0x00000000
 8003650:	080033b1 	.word	0x080033b1

08003654 <_printf_common>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	4691      	mov	r9, r2
 800365a:	461f      	mov	r7, r3
 800365c:	688a      	ldr	r2, [r1, #8]
 800365e:	690b      	ldr	r3, [r1, #16]
 8003660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003664:	4293      	cmp	r3, r2
 8003666:	bfb8      	it	lt
 8003668:	4613      	movlt	r3, r2
 800366a:	f8c9 3000 	str.w	r3, [r9]
 800366e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003672:	4606      	mov	r6, r0
 8003674:	460c      	mov	r4, r1
 8003676:	b112      	cbz	r2, 800367e <_printf_common+0x2a>
 8003678:	3301      	adds	r3, #1
 800367a:	f8c9 3000 	str.w	r3, [r9]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	0699      	lsls	r1, r3, #26
 8003682:	bf42      	ittt	mi
 8003684:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003688:	3302      	addmi	r3, #2
 800368a:	f8c9 3000 	strmi.w	r3, [r9]
 800368e:	6825      	ldr	r5, [r4, #0]
 8003690:	f015 0506 	ands.w	r5, r5, #6
 8003694:	d107      	bne.n	80036a6 <_printf_common+0x52>
 8003696:	f104 0a19 	add.w	sl, r4, #25
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	f8d9 2000 	ldr.w	r2, [r9]
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	42ab      	cmp	r3, r5
 80036a4:	dc28      	bgt.n	80036f8 <_printf_common+0xa4>
 80036a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	3300      	adds	r3, #0
 80036ae:	bf18      	it	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	0692      	lsls	r2, r2, #26
 80036b4:	d42d      	bmi.n	8003712 <_printf_common+0xbe>
 80036b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ba:	4639      	mov	r1, r7
 80036bc:	4630      	mov	r0, r6
 80036be:	47c0      	blx	r8
 80036c0:	3001      	adds	r0, #1
 80036c2:	d020      	beq.n	8003706 <_printf_common+0xb2>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	68e5      	ldr	r5, [r4, #12]
 80036c8:	f8d9 2000 	ldr.w	r2, [r9]
 80036cc:	f003 0306 	and.w	r3, r3, #6
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	bf08      	it	eq
 80036d4:	1aad      	subeq	r5, r5, r2
 80036d6:	68a3      	ldr	r3, [r4, #8]
 80036d8:	6922      	ldr	r2, [r4, #16]
 80036da:	bf0c      	ite	eq
 80036dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e0:	2500      	movne	r5, #0
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bfc4      	itt	gt
 80036e6:	1a9b      	subgt	r3, r3, r2
 80036e8:	18ed      	addgt	r5, r5, r3
 80036ea:	f04f 0900 	mov.w	r9, #0
 80036ee:	341a      	adds	r4, #26
 80036f0:	454d      	cmp	r5, r9
 80036f2:	d11a      	bne.n	800372a <_printf_common+0xd6>
 80036f4:	2000      	movs	r0, #0
 80036f6:	e008      	b.n	800370a <_printf_common+0xb6>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4652      	mov	r2, sl
 80036fc:	4639      	mov	r1, r7
 80036fe:	4630      	mov	r0, r6
 8003700:	47c0      	blx	r8
 8003702:	3001      	adds	r0, #1
 8003704:	d103      	bne.n	800370e <_printf_common+0xba>
 8003706:	f04f 30ff 	mov.w	r0, #4294967295
 800370a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370e:	3501      	adds	r5, #1
 8003710:	e7c3      	b.n	800369a <_printf_common+0x46>
 8003712:	18e1      	adds	r1, r4, r3
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	2030      	movs	r0, #48	; 0x30
 8003718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800371c:	4422      	add	r2, r4
 800371e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003722:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003726:	3302      	adds	r3, #2
 8003728:	e7c5      	b.n	80036b6 <_printf_common+0x62>
 800372a:	2301      	movs	r3, #1
 800372c:	4622      	mov	r2, r4
 800372e:	4639      	mov	r1, r7
 8003730:	4630      	mov	r0, r6
 8003732:	47c0      	blx	r8
 8003734:	3001      	adds	r0, #1
 8003736:	d0e6      	beq.n	8003706 <_printf_common+0xb2>
 8003738:	f109 0901 	add.w	r9, r9, #1
 800373c:	e7d8      	b.n	80036f0 <_printf_common+0x9c>
	...

08003740 <_printf_i>:
 8003740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003744:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003748:	460c      	mov	r4, r1
 800374a:	7e09      	ldrb	r1, [r1, #24]
 800374c:	b085      	sub	sp, #20
 800374e:	296e      	cmp	r1, #110	; 0x6e
 8003750:	4617      	mov	r7, r2
 8003752:	4606      	mov	r6, r0
 8003754:	4698      	mov	r8, r3
 8003756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003758:	f000 80b3 	beq.w	80038c2 <_printf_i+0x182>
 800375c:	d822      	bhi.n	80037a4 <_printf_i+0x64>
 800375e:	2963      	cmp	r1, #99	; 0x63
 8003760:	d036      	beq.n	80037d0 <_printf_i+0x90>
 8003762:	d80a      	bhi.n	800377a <_printf_i+0x3a>
 8003764:	2900      	cmp	r1, #0
 8003766:	f000 80b9 	beq.w	80038dc <_printf_i+0x19c>
 800376a:	2958      	cmp	r1, #88	; 0x58
 800376c:	f000 8083 	beq.w	8003876 <_printf_i+0x136>
 8003770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003778:	e032      	b.n	80037e0 <_printf_i+0xa0>
 800377a:	2964      	cmp	r1, #100	; 0x64
 800377c:	d001      	beq.n	8003782 <_printf_i+0x42>
 800377e:	2969      	cmp	r1, #105	; 0x69
 8003780:	d1f6      	bne.n	8003770 <_printf_i+0x30>
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	6813      	ldr	r3, [r2, #0]
 8003786:	0605      	lsls	r5, r0, #24
 8003788:	f103 0104 	add.w	r1, r3, #4
 800378c:	d52a      	bpl.n	80037e4 <_printf_i+0xa4>
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6011      	str	r1, [r2, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	da03      	bge.n	800379e <_printf_i+0x5e>
 8003796:	222d      	movs	r2, #45	; 0x2d
 8003798:	425b      	negs	r3, r3
 800379a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800379e:	486f      	ldr	r0, [pc, #444]	; (800395c <_printf_i+0x21c>)
 80037a0:	220a      	movs	r2, #10
 80037a2:	e039      	b.n	8003818 <_printf_i+0xd8>
 80037a4:	2973      	cmp	r1, #115	; 0x73
 80037a6:	f000 809d 	beq.w	80038e4 <_printf_i+0x1a4>
 80037aa:	d808      	bhi.n	80037be <_printf_i+0x7e>
 80037ac:	296f      	cmp	r1, #111	; 0x6f
 80037ae:	d020      	beq.n	80037f2 <_printf_i+0xb2>
 80037b0:	2970      	cmp	r1, #112	; 0x70
 80037b2:	d1dd      	bne.n	8003770 <_printf_i+0x30>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f043 0320 	orr.w	r3, r3, #32
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	e003      	b.n	80037c6 <_printf_i+0x86>
 80037be:	2975      	cmp	r1, #117	; 0x75
 80037c0:	d017      	beq.n	80037f2 <_printf_i+0xb2>
 80037c2:	2978      	cmp	r1, #120	; 0x78
 80037c4:	d1d4      	bne.n	8003770 <_printf_i+0x30>
 80037c6:	2378      	movs	r3, #120	; 0x78
 80037c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037cc:	4864      	ldr	r0, [pc, #400]	; (8003960 <_printf_i+0x220>)
 80037ce:	e055      	b.n	800387c <_printf_i+0x13c>
 80037d0:	6813      	ldr	r3, [r2, #0]
 80037d2:	1d19      	adds	r1, r3, #4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6011      	str	r1, [r2, #0]
 80037d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e0:	2301      	movs	r3, #1
 80037e2:	e08c      	b.n	80038fe <_printf_i+0x1be>
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6011      	str	r1, [r2, #0]
 80037e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037ec:	bf18      	it	ne
 80037ee:	b21b      	sxthne	r3, r3
 80037f0:	e7cf      	b.n	8003792 <_printf_i+0x52>
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	6825      	ldr	r5, [r4, #0]
 80037f6:	1d18      	adds	r0, r3, #4
 80037f8:	6010      	str	r0, [r2, #0]
 80037fa:	0628      	lsls	r0, r5, #24
 80037fc:	d501      	bpl.n	8003802 <_printf_i+0xc2>
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	e002      	b.n	8003808 <_printf_i+0xc8>
 8003802:	0668      	lsls	r0, r5, #25
 8003804:	d5fb      	bpl.n	80037fe <_printf_i+0xbe>
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	4854      	ldr	r0, [pc, #336]	; (800395c <_printf_i+0x21c>)
 800380a:	296f      	cmp	r1, #111	; 0x6f
 800380c:	bf14      	ite	ne
 800380e:	220a      	movne	r2, #10
 8003810:	2208      	moveq	r2, #8
 8003812:	2100      	movs	r1, #0
 8003814:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003818:	6865      	ldr	r5, [r4, #4]
 800381a:	60a5      	str	r5, [r4, #8]
 800381c:	2d00      	cmp	r5, #0
 800381e:	f2c0 8095 	blt.w	800394c <_printf_i+0x20c>
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	f021 0104 	bic.w	r1, r1, #4
 8003828:	6021      	str	r1, [r4, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13d      	bne.n	80038aa <_printf_i+0x16a>
 800382e:	2d00      	cmp	r5, #0
 8003830:	f040 808e 	bne.w	8003950 <_printf_i+0x210>
 8003834:	4665      	mov	r5, ip
 8003836:	2a08      	cmp	r2, #8
 8003838:	d10b      	bne.n	8003852 <_printf_i+0x112>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	07db      	lsls	r3, r3, #31
 800383e:	d508      	bpl.n	8003852 <_printf_i+0x112>
 8003840:	6923      	ldr	r3, [r4, #16]
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	bfde      	ittt	le
 8003848:	2330      	movle	r3, #48	; 0x30
 800384a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800384e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003852:	ebac 0305 	sub.w	r3, ip, r5
 8003856:	6123      	str	r3, [r4, #16]
 8003858:	f8cd 8000 	str.w	r8, [sp]
 800385c:	463b      	mov	r3, r7
 800385e:	aa03      	add	r2, sp, #12
 8003860:	4621      	mov	r1, r4
 8003862:	4630      	mov	r0, r6
 8003864:	f7ff fef6 	bl	8003654 <_printf_common>
 8003868:	3001      	adds	r0, #1
 800386a:	d14d      	bne.n	8003908 <_printf_i+0x1c8>
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	b005      	add	sp, #20
 8003872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003876:	4839      	ldr	r0, [pc, #228]	; (800395c <_printf_i+0x21c>)
 8003878:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	6821      	ldr	r1, [r4, #0]
 8003880:	1d1d      	adds	r5, r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6015      	str	r5, [r2, #0]
 8003886:	060a      	lsls	r2, r1, #24
 8003888:	d50b      	bpl.n	80038a2 <_printf_i+0x162>
 800388a:	07ca      	lsls	r2, r1, #31
 800388c:	bf44      	itt	mi
 800388e:	f041 0120 	orrmi.w	r1, r1, #32
 8003892:	6021      	strmi	r1, [r4, #0]
 8003894:	b91b      	cbnz	r3, 800389e <_printf_i+0x15e>
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	f022 0220 	bic.w	r2, r2, #32
 800389c:	6022      	str	r2, [r4, #0]
 800389e:	2210      	movs	r2, #16
 80038a0:	e7b7      	b.n	8003812 <_printf_i+0xd2>
 80038a2:	064d      	lsls	r5, r1, #25
 80038a4:	bf48      	it	mi
 80038a6:	b29b      	uxthmi	r3, r3
 80038a8:	e7ef      	b.n	800388a <_printf_i+0x14a>
 80038aa:	4665      	mov	r5, ip
 80038ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80038b0:	fb02 3311 	mls	r3, r2, r1, r3
 80038b4:	5cc3      	ldrb	r3, [r0, r3]
 80038b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ba:	460b      	mov	r3, r1
 80038bc:	2900      	cmp	r1, #0
 80038be:	d1f5      	bne.n	80038ac <_printf_i+0x16c>
 80038c0:	e7b9      	b.n	8003836 <_printf_i+0xf6>
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	6825      	ldr	r5, [r4, #0]
 80038c6:	6961      	ldr	r1, [r4, #20]
 80038c8:	1d18      	adds	r0, r3, #4
 80038ca:	6010      	str	r0, [r2, #0]
 80038cc:	0628      	lsls	r0, r5, #24
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	d501      	bpl.n	80038d6 <_printf_i+0x196>
 80038d2:	6019      	str	r1, [r3, #0]
 80038d4:	e002      	b.n	80038dc <_printf_i+0x19c>
 80038d6:	066a      	lsls	r2, r5, #25
 80038d8:	d5fb      	bpl.n	80038d2 <_printf_i+0x192>
 80038da:	8019      	strh	r1, [r3, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	6123      	str	r3, [r4, #16]
 80038e0:	4665      	mov	r5, ip
 80038e2:	e7b9      	b.n	8003858 <_printf_i+0x118>
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	1d19      	adds	r1, r3, #4
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	681d      	ldr	r5, [r3, #0]
 80038ec:	6862      	ldr	r2, [r4, #4]
 80038ee:	2100      	movs	r1, #0
 80038f0:	4628      	mov	r0, r5
 80038f2:	f7fc fc7d 	bl	80001f0 <memchr>
 80038f6:	b108      	cbz	r0, 80038fc <_printf_i+0x1bc>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	6060      	str	r0, [r4, #4]
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	2300      	movs	r3, #0
 8003902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003906:	e7a7      	b.n	8003858 <_printf_i+0x118>
 8003908:	6923      	ldr	r3, [r4, #16]
 800390a:	462a      	mov	r2, r5
 800390c:	4639      	mov	r1, r7
 800390e:	4630      	mov	r0, r6
 8003910:	47c0      	blx	r8
 8003912:	3001      	adds	r0, #1
 8003914:	d0aa      	beq.n	800386c <_printf_i+0x12c>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	079b      	lsls	r3, r3, #30
 800391a:	d413      	bmi.n	8003944 <_printf_i+0x204>
 800391c:	68e0      	ldr	r0, [r4, #12]
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	4298      	cmp	r0, r3
 8003922:	bfb8      	it	lt
 8003924:	4618      	movlt	r0, r3
 8003926:	e7a3      	b.n	8003870 <_printf_i+0x130>
 8003928:	2301      	movs	r3, #1
 800392a:	464a      	mov	r2, r9
 800392c:	4639      	mov	r1, r7
 800392e:	4630      	mov	r0, r6
 8003930:	47c0      	blx	r8
 8003932:	3001      	adds	r0, #1
 8003934:	d09a      	beq.n	800386c <_printf_i+0x12c>
 8003936:	3501      	adds	r5, #1
 8003938:	68e3      	ldr	r3, [r4, #12]
 800393a:	9a03      	ldr	r2, [sp, #12]
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	42ab      	cmp	r3, r5
 8003940:	dcf2      	bgt.n	8003928 <_printf_i+0x1e8>
 8003942:	e7eb      	b.n	800391c <_printf_i+0x1dc>
 8003944:	2500      	movs	r5, #0
 8003946:	f104 0919 	add.w	r9, r4, #25
 800394a:	e7f5      	b.n	8003938 <_printf_i+0x1f8>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ac      	bne.n	80038aa <_printf_i+0x16a>
 8003950:	7803      	ldrb	r3, [r0, #0]
 8003952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003956:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800395a:	e76c      	b.n	8003836 <_printf_i+0xf6>
 800395c:	08003ad9 	.word	0x08003ad9
 8003960:	08003aea 	.word	0x08003aea

08003964 <memmove>:
 8003964:	4288      	cmp	r0, r1
 8003966:	b510      	push	{r4, lr}
 8003968:	eb01 0302 	add.w	r3, r1, r2
 800396c:	d807      	bhi.n	800397e <memmove+0x1a>
 800396e:	1e42      	subs	r2, r0, #1
 8003970:	4299      	cmp	r1, r3
 8003972:	d00a      	beq.n	800398a <memmove+0x26>
 8003974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003978:	f802 4f01 	strb.w	r4, [r2, #1]!
 800397c:	e7f8      	b.n	8003970 <memmove+0xc>
 800397e:	4283      	cmp	r3, r0
 8003980:	d9f5      	bls.n	800396e <memmove+0xa>
 8003982:	1881      	adds	r1, r0, r2
 8003984:	1ad2      	subs	r2, r2, r3
 8003986:	42d3      	cmn	r3, r2
 8003988:	d100      	bne.n	800398c <memmove+0x28>
 800398a:	bd10      	pop	{r4, pc}
 800398c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003990:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003994:	e7f7      	b.n	8003986 <memmove+0x22>
	...

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
