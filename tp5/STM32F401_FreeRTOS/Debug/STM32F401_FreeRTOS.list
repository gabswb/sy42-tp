
STM32F401_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003928  08003928  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003928  08003928  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a39c  20000070  080039a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000a40c  080039a8  0002a40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b070  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c18  00000000  00000000  0002b110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  0002cd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000112b7  00000000  00000000  0002da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fa6  00000000  00000000  0003ed27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005d075  00000000  00000000  00045ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2d42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c1c  00000000  00000000  000a2dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037d8 	.word	0x080037d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080037d8 	.word	0x080037d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f103 0208 	add.w	r2, r3, #8
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f04f 32ff 	mov.w	r2, #4294967295
 80002a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f103 0208 	add.w	r2, r3, #8
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f103 0208 	add.w	r2, r3, #8
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002ea:	b480      	push	{r7}
 80002ec:	b085      	sub	sp, #20
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d103      	bne.n	800030a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e00c      	b.n	8000324 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3308      	adds	r3, #8
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e002      	b.n	8000318 <vListInsert+0x2e>
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	429a      	cmp	r2, r3
 8000322:	d2f6      	bcs.n	8000312 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	6892      	ldr	r2, [r2, #8]
 8000372:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	6852      	ldr	r2, [r2, #4]
 800037c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	d103      	bne.n	8000390 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	1e5a      	subs	r2, r3, #1
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	681b      	ldr	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10d      	bne.n	80003e4 <xQueueGenericReset+0x34>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003cc:	f383 8811 	msr	BASEPRI, r3
 80003d0:	f3bf 8f6f 	isb	sy
 80003d4:	f3bf 8f4f 	dsb	sy
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	f44f 7188 	mov.w	r1, #272	; 0x110
 80003de:	4841      	ldr	r0, [pc, #260]	; (80004e4 <xQueueGenericReset+0x134>)
 80003e0:	f002 fbc8 	bl	8002b74 <assert_failed>

    if( ( pxQueue != NULL ) &&
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d063      	beq.n	80004b2 <xQueueGenericReset+0x102>
        ( pxQueue->uxLength >= 1U ) &&
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d05f      	beq.n	80004b2 <xQueueGenericReset+0x102>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003fa:	2000      	movs	r0, #0
 80003fc:	fba2 1203 	umull	r1, r2, r2, r3
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	f04f 0400 	mov.w	r4, #0
 8000408:	0013      	movs	r3, r2
 800040a:	2400      	movs	r4, #0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d000      	beq.n	8000412 <xQueueGenericReset+0x62>
 8000410:	2001      	movs	r0, #1
 8000412:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000414:	2b00      	cmp	r3, #0
 8000416:	d14c      	bne.n	80004b2 <xQueueGenericReset+0x102>
    {
        taskENTER_CRITICAL();
 8000418:	f001 ffa8 	bl	800236c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000424:	6939      	ldr	r1, [r7, #16]
 8000426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000428:	fb01 f303 	mul.w	r3, r1, r3
 800042c:	441a      	add	r2, r3
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	2200      	movs	r2, #0
 8000436:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000448:	3b01      	subs	r3, #1
 800044a:	6939      	ldr	r1, [r7, #16]
 800044c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800044e:	fb01 f303 	mul.w	r3, r1, r3
 8000452:	441a      	add	r2, r3
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	22ff      	movs	r2, #255	; 0xff
 800045c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	22ff      	movs	r2, #255	; 0xff
 8000464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d114      	bne.n	8000498 <xQueueGenericReset+0xe8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d01a      	beq.n	80004ac <xQueueGenericReset+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	3310      	adds	r3, #16
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f994 	bl	80017a8 <xTaskRemoveFromEventList>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d012      	beq.n	80004ac <xQueueGenericReset+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <xQueueGenericReset+0x138>)
 8000488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	f3bf 8f4f 	dsb	sy
 8000492:	f3bf 8f6f 	isb	sy
 8000496:	e009      	b.n	80004ac <xQueueGenericReset+0xfc>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	3310      	adds	r3, #16
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fef7 	bl	8000290 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	3324      	adds	r3, #36	; 0x24
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fef2 	bl	8000290 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80004ac:	f001 ff90 	bl	80023d0 <vPortExitCritical>
 80004b0:	e001      	b.n	80004b6 <xQueueGenericReset+0x106>
    }
    else
    {
        xReturn = pdFAIL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d10d      	bne.n	80004d8 <xQueueGenericReset+0x128>
 80004bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c0:	f383 8811 	msr	BASEPRI, r3
 80004c4:	f3bf 8f6f 	isb	sy
 80004c8:	f3bf 8f4f 	dsb	sy
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	f240 1145 	movw	r1, #325	; 0x145
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <xQueueGenericReset+0x134>)
 80004d4:	f002 fb4e 	bl	8002b74 <assert_failed>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80004d8:	697b      	ldr	r3, [r7, #20]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd90      	pop	{r4, r7, pc}
 80004e2:	bf00      	nop
 80004e4:	080037f0 	.word	0x080037f0
 80004e8:	e000ed04 	.word	0xe000ed04

080004ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	4613      	mov	r3, r2
 80004f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d034      	beq.n	800056e <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000504:	2000      	movs	r0, #0
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	fba2 1203 	umull	r1, r2, r2, r3
 800050e:	f04f 0300 	mov.w	r3, #0
 8000512:	f04f 0400 	mov.w	r4, #0
 8000516:	0013      	movs	r3, r2
 8000518:	2400      	movs	r4, #0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d000      	beq.n	8000520 <xQueueGenericCreate+0x34>
 800051e:	2001      	movs	r0, #1
 8000520:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000522:	2b00      	cmp	r3, #0
 8000524:	d123      	bne.n	800056e <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800052e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000532:	d81c      	bhi.n	800056e <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	fb02 f303 	mul.w	r3, r2, r3
 800053c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	3350      	adds	r3, #80	; 0x50
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fff8 	bl	8002538 <pvPortMalloc>
 8000548:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d01f      	beq.n	8000590 <xQueueGenericCreate+0xa4>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3350      	adds	r3, #80	; 0x50
 8000558:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800055a:	79fa      	ldrb	r2, [r7, #7]
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	4613      	mov	r3, r2
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	68b9      	ldr	r1, [r7, #8]
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f000 f81a 	bl	80005a0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800056c:	e010      	b.n	8000590 <xQueueGenericCreate+0xa4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10d      	bne.n	8000590 <xQueueGenericCreate+0xa4>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <xQueueGenericCreate+0xb0>)
 800058c:	f002 faf2 	bl	8002b74 <assert_failed>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000590:	69fb      	ldr	r3, [r7, #28]
    }
 8000592:	4618      	mov	r0, r3
 8000594:	3724      	adds	r7, #36	; 0x24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	bf00      	nop
 800059c:	080037f0 	.word	0x080037f0

080005a0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	69ba      	ldr	r2, [r7, #24]
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e002      	b.n	80005c2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005ce:	2101      	movs	r1, #1
 80005d0:	69b8      	ldr	r0, [r7, #24]
 80005d2:	f7ff feed 	bl	80003b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	78fa      	ldrb	r2, [r7, #3]
 80005da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00e      	beq.n	8000612 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000606:	2300      	movs	r3, #0
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f81d 	bl	800064c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800061a:	b580      	push	{r7, lr}
 800061c:	b086      	sub	sp, #24
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	461a      	mov	r2, r3
 8000630:	6939      	ldr	r1, [r7, #16]
 8000632:	6978      	ldr	r0, [r7, #20]
 8000634:	f7ff ff5a 	bl	80004ec <xQueueGenericCreate>
 8000638:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f7ff ffd3 	bl	80005e6 <prvInitialiseMutex>

        return xNewQueue;
 8000640:	68fb      	ldr	r3, [r7, #12]
    }
 8000642:	4618      	mov	r0, r3
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800065a:	2300      	movs	r3, #0
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000664:	2b00      	cmp	r3, #0
 8000666:	d10d      	bne.n	8000684 <xQueueGenericSend+0x38>
 8000668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066c:	f383 8811 	msr	BASEPRI, r3
 8000670:	f3bf 8f6f 	isb	sy
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
 800067a:	f240 312e 	movw	r1, #814	; 0x32e
 800067e:	4877      	ldr	r0, [pc, #476]	; (800085c <xQueueGenericSend+0x210>)
 8000680:	f002 fa78 	bl	8002b74 <assert_failed>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <xQueueGenericSend+0x46>
 800068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <xQueueGenericSend+0x4a>
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <xQueueGenericSend+0x4c>
 8000696:	2300      	movs	r3, #0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10d      	bne.n	80006b8 <xQueueGenericSend+0x6c>
 800069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a0:	f383 8811 	msr	BASEPRI, r3
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	f3bf 8f4f 	dsb	sy
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
 80006ae:	f240 312f 	movw	r1, #815	; 0x32f
 80006b2:	486a      	ldr	r0, [pc, #424]	; (800085c <xQueueGenericSend+0x210>)
 80006b4:	f002 fa5e 	bl	8002b74 <assert_failed>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d103      	bne.n	80006c6 <xQueueGenericSend+0x7a>
 80006be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d101      	bne.n	80006ca <xQueueGenericSend+0x7e>
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <xQueueGenericSend+0x80>
 80006ca:	2300      	movs	r3, #0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10d      	bne.n	80006ec <xQueueGenericSend+0xa0>
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	623b      	str	r3, [r7, #32]
 80006e2:	f44f 714c 	mov.w	r1, #816	; 0x330
 80006e6:	485d      	ldr	r0, [pc, #372]	; (800085c <xQueueGenericSend+0x210>)
 80006e8:	f002 fa44 	bl	8002b74 <assert_failed>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006ec:	f001 fa7c 	bl	8001be8 <xTaskGetSchedulerState>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <xQueueGenericSend+0xb0>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <xQueueGenericSend+0xb4>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <xQueueGenericSend+0xb6>
 8000700:	2300      	movs	r3, #0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10d      	bne.n	8000722 <xQueueGenericSend+0xd6>
 8000706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	f240 3133 	movw	r1, #819	; 0x333
 800071c:	484f      	ldr	r0, [pc, #316]	; (800085c <xQueueGenericSend+0x210>)
 800071e:	f002 fa29 	bl	8002b74 <assert_failed>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000722:	f001 fe23 	bl	800236c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072e:	429a      	cmp	r2, r3
 8000730:	d302      	bcc.n	8000738 <xQueueGenericSend+0xec>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d129      	bne.n	800078c <xQueueGenericSend+0x140>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800073e:	f000 f9c3 	bl	8000ac8 <prvCopyDataToQueue>
 8000742:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	2b00      	cmp	r3, #0
 800074a:	d010      	beq.n	800076e <xQueueGenericSend+0x122>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074e:	3324      	adds	r3, #36	; 0x24
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f829 	bl	80017a8 <xTaskRemoveFromEventList>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d013      	beq.n	8000784 <xQueueGenericSend+0x138>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800075c:	4b40      	ldr	r3, [pc, #256]	; (8000860 <xQueueGenericSend+0x214>)
 800075e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	f3bf 8f4f 	dsb	sy
 8000768:	f3bf 8f6f 	isb	sy
 800076c:	e00a      	b.n	8000784 <xQueueGenericSend+0x138>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000770:	2b00      	cmp	r3, #0
 8000772:	d007      	beq.n	8000784 <xQueueGenericSend+0x138>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000774:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <xQueueGenericSend+0x214>)
 8000776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	f3bf 8f4f 	dsb	sy
 8000780:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000784:	f001 fe24 	bl	80023d0 <vPortExitCritical>
                return pdPASS;
 8000788:	2301      	movs	r3, #1
 800078a:	e063      	b.n	8000854 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000792:	f001 fe1d 	bl	80023d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000796:	2300      	movs	r3, #0
 8000798:	e05c      	b.n	8000854 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 800079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 f8dd 	bl	8001964 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80007ae:	f001 fe0f 	bl	80023d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007b2:	f000 fcdf 	bl	8001174 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007b6:	f001 fdd9 	bl	800236c <vPortEnterCritical>
 80007ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c6:	d103      	bne.n	80007d0 <xQueueGenericSend+0x184>
 80007c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80007d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d103      	bne.n	80007e6 <xQueueGenericSend+0x19a>
 80007de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80007e6:	f001 fdf3 	bl	80023d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f8cc 	bl	8001990 <xTaskCheckForTimeOut>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d124      	bne.n	8000848 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80007fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000800:	f000 fa34 	bl	8000c6c <prvIsQueueFull>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d018      	beq.n	800083c <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	3310      	adds	r3, #16
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 ff9e 	bl	8001754 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800081a:	f000 f9bf 	bl	8000b9c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800081e:	f000 fcb7 	bl	8001190 <xTaskResumeAll>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	f47f af7c 	bne.w	8000722 <xQueueGenericSend+0xd6>
                {
                    portYIELD_WITHIN_API();
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <xQueueGenericSend+0x214>)
 800082c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	f3bf 8f6f 	isb	sy
 800083a:	e772      	b.n	8000722 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800083c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800083e:	f000 f9ad 	bl	8000b9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000842:	f000 fca5 	bl	8001190 <xTaskResumeAll>
 8000846:	e76c      	b.n	8000722 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800084a:	f000 f9a7 	bl	8000b9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800084e:	f000 fc9f 	bl	8001190 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000852:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000854:	4618      	mov	r0, r3
 8000856:	3738      	adds	r7, #56	; 0x38
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	080037f0 	.word	0x080037f0
 8000860:	e000ed04 	.word	0xe000ed04

08000864 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10d      	bne.n	800089c <xQueueSemaphoreTake+0x38>
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	f240 51e3 	movw	r1, #1507	; 0x5e3
 8000896:	487e      	ldr	r0, [pc, #504]	; (8000a90 <xQueueSemaphoreTake+0x22c>)
 8000898:	f002 f96c 	bl	8002b74 <assert_failed>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00d      	beq.n	80008c0 <xQueueSemaphoreTake+0x5c>
 80008a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	f240 51e7 	movw	r1, #1511	; 0x5e7
 80008ba:	4875      	ldr	r0, [pc, #468]	; (8000a90 <xQueueSemaphoreTake+0x22c>)
 80008bc:	f002 f95a 	bl	8002b74 <assert_failed>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008c0:	f001 f992 	bl	8001be8 <xTaskGetSchedulerState>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <xQueueSemaphoreTake+0x6c>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <xQueueSemaphoreTake+0x70>
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <xQueueSemaphoreTake+0x72>
 80008d4:	2300      	movs	r3, #0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10d      	bne.n	80008f6 <xQueueSemaphoreTake+0x92>
 80008da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008de:	f383 8811 	msr	BASEPRI, r3
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	f3bf 8f4f 	dsb	sy
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	f240 51ec 	movw	r1, #1516	; 0x5ec
 80008f0:	4867      	ldr	r0, [pc, #412]	; (8000a90 <xQueueSemaphoreTake+0x22c>)
 80008f2:	f002 f93f 	bl	8002b74 <assert_failed>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008f6:	f001 fd39 	bl	800236c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80008fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000902:	2b00      	cmp	r3, #0
 8000904:	d024      	beq.n	8000950 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090c:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d104      	bne.n	8000920 <xQueueSemaphoreTake+0xbc>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000916:	f001 fb71 	bl	8001ffc <pvTaskIncrementMutexHeldCount>
 800091a:	4602      	mov	r2, r0
 800091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00f      	beq.n	8000948 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092a:	3310      	adds	r3, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ff3b 	bl	80017a8 <xTaskRemoveFromEventList>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d007      	beq.n	8000948 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000938:	4b56      	ldr	r3, [pc, #344]	; (8000a94 <xQueueSemaphoreTake+0x230>)
 800093a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000948:	f001 fd42 	bl	80023d0 <vPortExitCritical>
                return pdPASS;
 800094c:	2301      	movs	r3, #1
 800094e:	e09a      	b.n	8000a86 <xQueueSemaphoreTake+0x222>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d114      	bne.n	8000980 <xQueueSemaphoreTake+0x11c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00d      	beq.n	8000978 <xQueueSemaphoreTake+0x114>
 800095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000960:	f383 8811 	msr	BASEPRI, r3
 8000964:	f3bf 8f6f 	isb	sy
 8000968:	f3bf 8f4f 	dsb	sy
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	f240 6132 	movw	r1, #1586	; 0x632
 8000972:	4847      	ldr	r0, [pc, #284]	; (8000a90 <xQueueSemaphoreTake+0x22c>)
 8000974:	f002 f8fe 	bl	8002b74 <assert_failed>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000978:	f001 fd2a 	bl	80023d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800097c:	2300      	movs	r3, #0
 800097e:	e082      	b.n	8000a86 <xQueueSemaphoreTake+0x222>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	2b00      	cmp	r3, #0
 8000984:	d106      	bne.n	8000994 <xQueueSemaphoreTake+0x130>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4618      	mov	r0, r3
 800098c:	f000 ffea 	bl	8001964 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000990:	2301      	movs	r3, #1
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000994:	f001 fd1c 	bl	80023d0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000998:	f000 fbec 	bl	8001174 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800099c:	f001 fce6 	bl	800236c <vPortEnterCritical>
 80009a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d103      	bne.n	80009b6 <xQueueSemaphoreTake+0x152>
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c2:	d103      	bne.n	80009cc <xQueueSemaphoreTake+0x168>
 80009c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009cc:	f001 fd00 	bl	80023d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009d0:	463a      	mov	r2, r7
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ffd9 	bl	8001990 <xTaskCheckForTimeOut>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d132      	bne.n	8000a4a <xQueueSemaphoreTake+0x1e6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009e6:	f000 f92b 	bl	8000c40 <prvIsQueueEmpty>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d026      	beq.n	8000a3e <xQueueSemaphoreTake+0x1da>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d109      	bne.n	8000a0c <xQueueSemaphoreTake+0x1a8>
                        {
                            taskENTER_CRITICAL();
 80009f8:	f001 fcb8 	bl	800236c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f90f 	bl	8001c24 <xTaskPriorityInherit>
 8000a06:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8000a08:	f001 fce2 	bl	80023d0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0e:	3324      	adds	r3, #36	; 0x24
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fe9d 	bl	8001754 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a1c:	f000 f8be 	bl	8000b9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a20:	f000 fbb6 	bl	8001190 <xTaskResumeAll>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f47f af65 	bne.w	80008f6 <xQueueSemaphoreTake+0x92>
                {
                    portYIELD_WITHIN_API();
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <xQueueSemaphoreTake+0x230>)
 8000a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	f3bf 8f4f 	dsb	sy
 8000a38:	f3bf 8f6f 	isb	sy
 8000a3c:	e75b      	b.n	80008f6 <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a40:	f000 f8ac 	bl	8000b9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a44:	f000 fba4 	bl	8001190 <xTaskResumeAll>
 8000a48:	e755      	b.n	80008f6 <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a4c:	f000 f8a6 	bl	8000b9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a50:	f000 fb9e 	bl	8001190 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a56:	f000 f8f3 	bl	8000c40 <prvIsQueueEmpty>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f43f af4a 	beq.w	80008f6 <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8000a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00d      	beq.n	8000a84 <xQueueSemaphoreTake+0x220>
                        {
                            taskENTER_CRITICAL();
 8000a68:	f001 fc80 	bl	800236c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a6e:	f000 f813 	bl	8000a98 <prvGetDisinheritPriorityAfterTimeout>
 8000a72:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fa08 	bl	8001e90 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8000a80:	f001 fca6 	bl	80023d0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000a84:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3738      	adds	r7, #56	; 0x38
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	080037f0 	.word	0x080037f0
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d006      	beq.n	8000ab6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f1c3 031f 	rsb	r3, r3, #31
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e001      	b.n	8000aba <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000aba:	68fb      	ldr	r3, [r7, #12]
    }
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000adc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10d      	bne.n	8000b02 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d14d      	bne.n	8000b8a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f92a 	bl	8001d4c <xTaskPriorityDisinherit>
 8000af8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	e043      	b.n	8000b8a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d119      	bne.n	8000b3c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6858      	ldr	r0, [r3, #4]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	461a      	mov	r2, r3
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	f002 fb38 	bl	8003188 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	441a      	add	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d32b      	bcc.n	8000b8a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	e026      	b.n	8000b8a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68d8      	ldr	r0, [r3, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	461a      	mov	r2, r3
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	f002 fb1e 	bl	8003188 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	425b      	negs	r3, r3
 8000b56:	441a      	add	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	425b      	negs	r3, r3
 8000b72:	441a      	add	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d105      	bne.n	8000b8a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000b92:	697b      	ldr	r3, [r7, #20]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ba4:	f001 fbe2 	bl	800236c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000bb0:	e011      	b.n	8000bd6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d012      	beq.n	8000be0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3324      	adds	r3, #36	; 0x24
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fdf2 	bl	80017a8 <xTaskRemoveFromEventList>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000bca:	f000 ff4f 	bl	8001a6c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dce9      	bgt.n	8000bb2 <prvUnlockQueue+0x16>
 8000bde:	e000      	b.n	8000be2 <prvUnlockQueue+0x46>
                        break;
 8000be0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	22ff      	movs	r2, #255	; 0xff
 8000be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000bea:	f001 fbf1 	bl	80023d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000bee:	f001 fbbd 	bl	800236c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bfa:	e011      	b.n	8000c20 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d012      	beq.n	8000c2a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3310      	adds	r3, #16
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fdcd 	bl	80017a8 <xTaskRemoveFromEventList>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000c14:	f000 ff2a 	bl	8001a6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dce9      	bgt.n	8000bfc <prvUnlockQueue+0x60>
 8000c28:	e000      	b.n	8000c2c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000c2a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000c34:	f001 fbcc 	bl	80023d0 <vPortExitCritical>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c48:	f001 fb90 	bl	800236c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e001      	b.n	8000c5e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c5e:	f001 fbb7 	bl	80023d0 <vPortExitCritical>

    return xReturn;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c74:	f001 fb7a 	bl	800236c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d102      	bne.n	8000c8a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e001      	b.n	8000c8e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c8e:	f001 fb9f 	bl	80023d0 <vPortExitCritical>

    return xReturn;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fc42 	bl	8002538 <pvPortMalloc>
 8000cb4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00e      	beq.n	8000cda <xTaskCreate+0x3e>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000cbc:	2070      	movs	r0, #112	; 0x70
 8000cbe:	f001 fc3b 	bl	8002538 <pvPortMalloc>
 8000cc2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <xTaskCreate+0x36>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd0:	e005      	b.n	8000cde <xTaskCreate+0x42>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f001 fd1a 	bl	800270c <vPortFree>
 8000cd8:	e001      	b.n	8000cde <xTaskCreate+0x42>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <xTaskCreate+0x70>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9303      	str	r3, [sp, #12]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 f80e 	bl	8000d1c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d00:	69f8      	ldr	r0, [r7, #28]
 8000d02:	f000 f8b7 	bl	8000e74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	e002      	b.n	8000d12 <xTaskCreate+0x76>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d12:	69bb      	ldr	r3, [r7, #24]
    }
 8000d14:	4618      	mov	r0, r3
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	461a      	mov	r2, r3
 8000d34:	21a5      	movs	r1, #165	; 0xa5
 8000d36:	f002 fa32 	bl	800319e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d44:	3b01      	subs	r3, #1
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	f023 0307 	bic.w	r3, r3, #7
 8000d52:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00d      	beq.n	8000d7a <prvInitialiseNewTask+0x5e>
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000d74:	483e      	ldr	r0, [pc, #248]	; (8000e70 <prvInitialiseNewTask+0x154>)
 8000d76:	f001 fefd 	bl	8002b74 <assert_failed>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01f      	beq.n	8000dc0 <prvInitialiseNewTask+0xa4>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	e012      	b.n	8000dac <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	7819      	ldrb	r1, [r3, #0]
 8000d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	4413      	add	r3, r2
 8000d94:	3334      	adds	r3, #52	; 0x34
 8000d96:	460a      	mov	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3301      	adds	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	d9e9      	bls.n	8000d86 <prvInitialiseNewTask+0x6a>
 8000db2:	e000      	b.n	8000db6 <prvInitialiseNewTask+0x9a>
            {
                break;
 8000db4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000dbe:	e003      	b.n	8000dc8 <prvInitialiseNewTask+0xac>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dca:	2b1e      	cmp	r3, #30
 8000dcc:	d90d      	bls.n	8000dea <prvInitialiseNewTask+0xce>
 8000dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd2:	f383 8811 	msr	BASEPRI, r3
 8000dd6:	f3bf 8f6f 	isb	sy
 8000dda:	f3bf 8f4f 	dsb	sy
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	f240 3197 	movw	r1, #919	; 0x397
 8000de4:	4822      	ldr	r0, [pc, #136]	; (8000e70 <prvInitialiseNewTask+0x154>)
 8000de6:	f001 fec5 	bl	8002b74 <assert_failed>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	2b1e      	cmp	r3, #30
 8000dee:	d901      	bls.n	8000df4 <prvInitialiseNewTask+0xd8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000df0:	231e      	movs	r3, #30
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dfe:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e02:	2200      	movs	r2, #0
 8000e04:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	3304      	adds	r3, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa60 	bl	80002d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	3318      	adds	r3, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fa5b 	bl	80002d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e1e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	f1c3 021f 	rsb	r2, r3, #31
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	2200      	movs	r2, #0
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	2200      	movs	r2, #0
 8000e3a:	66da      	str	r2, [r3, #108]	; 0x6c
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	3358      	adds	r3, #88	; 0x58
 8000e40:	2214      	movs	r2, #20
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f9aa 	bl	800319e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	68f9      	ldr	r1, [r7, #12]
 8000e4e:	69b8      	ldr	r0, [r7, #24]
 8000e50:	f001 f956 	bl	8002100 <pxPortInitialiseStack>
 8000e54:	4602      	mov	r2, r0
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <prvInitialiseNewTask+0x14a>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e64:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	0800380c 	.word	0x0800380c

08000e74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000e7c:	f001 fa76 	bl	800236c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000e80:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <prvAddNewTaskToReadyList+0x118>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a41      	ldr	r2, [pc, #260]	; (8000f8c <prvAddNewTaskToReadyList+0x118>)
 8000e88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <prvAddNewTaskToReadyList+0x11c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000e92:	4a3f      	ldr	r2, [pc, #252]	; (8000f90 <prvAddNewTaskToReadyList+0x11c>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <prvAddNewTaskToReadyList+0x118>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d110      	bne.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ea0:	f000 fe0a 	bl	8001ab8 <prvInitialiseTaskLists>
 8000ea4:	e00d      	b.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <prvAddNewTaskToReadyList+0x120>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <prvAddNewTaskToReadyList+0x11c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d802      	bhi.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ebc:	4a34      	ldr	r2, [pc, #208]	; (8000f90 <prvAddNewTaskToReadyList+0x11c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <prvAddNewTaskToReadyList+0x124>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <prvAddNewTaskToReadyList+0x124>)
 8000eca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ecc:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <prvAddNewTaskToReadyList+0x124>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f001 ffa7 	bl	8002e28 <task_to_ready>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <prvAddNewTaskToReadyList+0x128>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d903      	bls.n	8000eee <prvAddNewTaskToReadyList+0x7a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <prvAddNewTaskToReadyList+0x128>)
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef2:	492b      	ldr	r1, [pc, #172]	; (8000fa0 <prvAddNewTaskToReadyList+0x12c>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	3204      	adds	r2, #4
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1d1a      	adds	r2, r3, #4
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <prvAddNewTaskToReadyList+0x12c>)
 8000f32:	441a      	add	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	4918      	ldr	r1, [pc, #96]	; (8000fa0 <prvAddNewTaskToReadyList+0x12c>)
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1c59      	adds	r1, r3, #1
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <prvAddNewTaskToReadyList+0x12c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4403      	add	r3, r0
 8000f58:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000f5a:	f001 fa39 	bl	80023d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <prvAddNewTaskToReadyList+0x120>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00e      	beq.n	8000f84 <prvAddNewTaskToReadyList+0x110>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <prvAddNewTaskToReadyList+0x11c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <prvAddNewTaskToReadyList+0x110>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <prvAddNewTaskToReadyList+0x130>)
 8000f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	f3bf 8f4f 	dsb	sy
 8000f80:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000036c 	.word	0x2000036c
 8000f90:	2000008c 	.word	0x2000008c
 8000f94:	20000378 	.word	0x20000378
 8000f98:	20000388 	.word	0x20000388
 8000f9c:	20000374 	.word	0x20000374
 8000fa0:	20000090 	.word	0x20000090
 8000fa4:	e000ed04 	.word	0xe000ed04

08000fa8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10d      	bne.n	8000fd8 <xTaskDelayUntil+0x30>
 8000fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	f240 41f1 	movw	r1, #1265	; 0x4f1
 8000fd2:	4836      	ldr	r0, [pc, #216]	; (80010ac <xTaskDelayUntil+0x104>)
 8000fd4:	f001 fdce 	bl	8002b74 <assert_failed>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10d      	bne.n	8000ffa <xTaskDelayUntil+0x52>
 8000fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8000ff4:	482d      	ldr	r0, [pc, #180]	; (80010ac <xTaskDelayUntil+0x104>)
 8000ff6:	f001 fdbd 	bl	8002b74 <assert_failed>
        configASSERT( uxSchedulerSuspended == 0 );
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <xTaskDelayUntil+0x108>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00d      	beq.n	800101e <xTaskDelayUntil+0x76>
 8001002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8001018:	4824      	ldr	r0, [pc, #144]	; (80010ac <xTaskDelayUntil+0x104>)
 800101a:	f001 fdab 	bl	8002b74 <assert_failed>

        vTaskSuspendAll();
 800101e:	f000 f8a9 	bl	8001174 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <xTaskDelayUntil+0x10c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a3a      	ldr	r2, [r7, #32]
 8001038:	429a      	cmp	r2, r3
 800103a:	d20b      	bcs.n	8001054 <xTaskDelayUntil+0xac>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	429a      	cmp	r2, r3
 8001044:	d211      	bcs.n	800106a <xTaskDelayUntil+0xc2>
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	429a      	cmp	r2, r3
 800104c:	d90d      	bls.n	800106a <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 800104e:	2301      	movs	r3, #1
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
 8001052:	e00a      	b.n	800106a <xTaskDelayUntil+0xc2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	429a      	cmp	r2, r3
 800105c:	d303      	bcc.n	8001066 <xTaskDelayUntil+0xbe>
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	429a      	cmp	r2, r3
 8001064:	d901      	bls.n	800106a <xTaskDelayUntil+0xc2>
                {
                    xShouldDelay = pdTRUE;
 8001066:	2301      	movs	r3, #1
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f000 ffd0 	bl	8002024 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001084:	f000 f884 	bl	8001190 <xTaskResumeAll>
 8001088:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d107      	bne.n	80010a0 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <xTaskDelayUntil+0x110>)
 8001092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80010a2:	4618      	mov	r0, r3
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0800380c 	.word	0x0800380c
 80010b0:	20000394 	.word	0x20000394
 80010b4:	20000370 	.word	0x20000370
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <vTaskStartScheduler+0x94>)
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	4921      	ldr	r1, [pc, #132]	; (8001154 <vTaskStartScheduler+0x98>)
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <vTaskStartScheduler+0x9c>)
 80010d2:	f7ff fde3 	bl	8000c9c <xTaskCreate>
 80010d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d11f      	bne.n	800111e <vTaskStartScheduler+0x62>
 80010de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e2:	f383 8811 	msr	BASEPRI, r3
 80010e6:	f3bf 8f6f 	isb	sy
 80010ea:	f3bf 8f4f 	dsb	sy
 80010ee:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <vTaskStartScheduler+0xa0>)
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <vTaskStartScheduler+0xa4>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <vTaskStartScheduler+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8001104:	f242 7010 	movw	r0, #10000	; 0x2710
 8001108:	f001 fe48 	bl	8002d9c <TIM5_Init>

        traceTASK_SWITCHED_IN();
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <vTaskStartScheduler+0xac>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fe94 	bl	8002e40 <switched_in>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001118:	f001 f87c 	bl	8002214 <xPortStartScheduler>
 800111c:	e011      	b.n	8001142 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d10d      	bne.n	8001142 <vTaskStartScheduler+0x86>
 8001126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112a:	f383 8811 	msr	BASEPRI, r3
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	f3bf 8f4f 	dsb	sy
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <vTaskStartScheduler+0xb0>)
 800113e:	f001 fd19 	bl	8002b74 <assert_failed>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <vTaskStartScheduler+0xb4>)
 8001144:	681b      	ldr	r3, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000390 	.word	0x20000390
 8001154:	08003828 	.word	0x08003828
 8001158:	08001a85 	.word	0x08001a85
 800115c:	2000038c 	.word	0x2000038c
 8001160:	20000378 	.word	0x20000378
 8001164:	20000370 	.word	0x20000370
 8001168:	2000008c 	.word	0x2000008c
 800116c:	0800380c 	.word	0x0800380c
 8001170:	20000000 	.word	0x20000000

08001174 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <vTaskSuspendAll+0x18>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a03      	ldr	r2, [pc, #12]	; (800118c <vTaskSuspendAll+0x18>)
 8001180:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	20000394 	.word	0x20000394

08001190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800119e:	4b74      	ldr	r3, [pc, #464]	; (8001370 <xTaskResumeAll+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <xTaskResumeAll+0x32>
 80011a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	f640 01b3 	movw	r1, #2227	; 0x8b3
 80011bc:	486d      	ldr	r0, [pc, #436]	; (8001374 <xTaskResumeAll+0x1e4>)
 80011be:	f001 fcd9 	bl	8002b74 <assert_failed>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80011c2:	f001 f8d3 	bl	800236c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80011c6:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <xTaskResumeAll+0x1e0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a68      	ldr	r2, [pc, #416]	; (8001370 <xTaskResumeAll+0x1e0>)
 80011ce:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <xTaskResumeAll+0x1e0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f040 80c4 	bne.w	8001362 <xTaskResumeAll+0x1d2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011da:	4b67      	ldr	r3, [pc, #412]	; (8001378 <xTaskResumeAll+0x1e8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80bf 	beq.w	8001362 <xTaskResumeAll+0x1d2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011e4:	e08e      	b.n	8001304 <xTaskResumeAll+0x174>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <xTaskResumeAll+0x1ec>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	6a12      	ldr	r2, [r2, #32]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	69d2      	ldr	r2, [r2, #28]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3318      	adds	r3, #24
 8001210:	429a      	cmp	r2, r3
 8001212:	d103      	bne.n	800121c <xTaskResumeAll+0x8c>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	68d2      	ldr	r2, [r2, #12]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	6892      	ldr	r2, [r2, #8]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	429a      	cmp	r2, r3
 8001250:	d103      	bne.n	800125a <xTaskResumeAll+0xca>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800126a:	69f8      	ldr	r0, [r7, #28]
 800126c:	f001 fddc 	bl	8002e28 <task_to_ready>
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <xTaskResumeAll+0x1f0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d903      	bls.n	8001284 <xTaskResumeAll+0xf4>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <xTaskResumeAll+0x1f0>)
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	493e      	ldr	r1, [pc, #248]	; (8001384 <xTaskResumeAll+0x1f4>)
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	3304      	adds	r3, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	3204      	adds	r2, #4
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	1d1a      	adds	r2, r3, #4
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <xTaskResumeAll+0x1f4>)
 80012c8:	441a      	add	r2, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d2:	492c      	ldr	r1, [pc, #176]	; (8001384 <xTaskResumeAll+0x1f4>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c59      	adds	r1, r3, #1
 80012e2:	4828      	ldr	r0, [pc, #160]	; (8001384 <xTaskResumeAll+0x1f4>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4403      	add	r3, r0
 80012ee:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <xTaskResumeAll+0x1f8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d302      	bcc.n	8001304 <xTaskResumeAll+0x174>
                    {
                        xYieldPending = pdTRUE;
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <xTaskResumeAll+0x1fc>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <xTaskResumeAll+0x1ec>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f47f af6c 	bne.w	80011e6 <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <xTaskResumeAll+0x188>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001314:	f000 fc4c 	bl	8001bb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <xTaskResumeAll+0x200>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d010      	beq.n	8001346 <xTaskResumeAll+0x1b6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001324:	f000 f848 	bl	80013b8 <xTaskIncrementTick>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <xTaskResumeAll+0x1a4>
                            {
                                xYieldPending = pdTRUE;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <xTaskResumeAll+0x1fc>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3b01      	subs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f1      	bne.n	8001324 <xTaskResumeAll+0x194>

                        xPendedTicks = 0;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <xTaskResumeAll+0x200>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <xTaskResumeAll+0x1fc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <xTaskResumeAll+0x1d2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <xTaskResumeAll+0x204>)
 8001354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001362:	f001 f835 	bl	80023d0 <vPortExitCritical>

    return xAlreadyYielded;
 8001366:	69bb      	ldr	r3, [r7, #24]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000394 	.word	0x20000394
 8001374:	0800380c 	.word	0x0800380c
 8001378:	2000036c 	.word	0x2000036c
 800137c:	2000032c 	.word	0x2000032c
 8001380:	20000374 	.word	0x20000374
 8001384:	20000090 	.word	0x20000090
 8001388:	2000008c 	.word	0x2000008c
 800138c:	20000380 	.word	0x20000380
 8001390:	2000037c 	.word	0x2000037c
 8001394:	e000ed04 	.word	0xe000ed04

08001398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <xTaskGetTickCount+0x1c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000370 	.word	0x20000370

080013b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <xTaskIncrementTick+0x220>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 80f9 	bne.w	80015be <xTaskIncrementTick+0x206>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013cc:	4b83      	ldr	r3, [pc, #524]	; (80015dc <xTaskIncrementTick+0x224>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80013d4:	4a81      	ldr	r2, [pc, #516]	; (80015dc <xTaskIncrementTick+0x224>)
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d123      	bne.n	8001428 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80013e0:	4b7f      	ldr	r3, [pc, #508]	; (80015e0 <xTaskIncrementTick+0x228>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00d      	beq.n	8001406 <xTaskIncrementTick+0x4e>
 80013ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ee:	f383 8811 	msr	BASEPRI, r3
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	f3bf 8f4f 	dsb	sy
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	f640 21c7 	movw	r1, #2759	; 0xac7
 8001400:	4878      	ldr	r0, [pc, #480]	; (80015e4 <xTaskIncrementTick+0x22c>)
 8001402:	f001 fbb7 	bl	8002b74 <assert_failed>
 8001406:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <xTaskIncrementTick+0x228>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <xTaskIncrementTick+0x230>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a73      	ldr	r2, [pc, #460]	; (80015e0 <xTaskIncrementTick+0x228>)
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4a74      	ldr	r2, [pc, #464]	; (80015e8 <xTaskIncrementTick+0x230>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b74      	ldr	r3, [pc, #464]	; (80015ec <xTaskIncrementTick+0x234>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a72      	ldr	r2, [pc, #456]	; (80015ec <xTaskIncrementTick+0x234>)
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	f000 fbc4 	bl	8001bb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001428:	4b71      	ldr	r3, [pc, #452]	; (80015f0 <xTaskIncrementTick+0x238>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	429a      	cmp	r2, r3
 8001430:	f0c0 80aa 	bcc.w	8001588 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <xTaskIncrementTick+0x228>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d104      	bne.n	8001448 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800143e:	4b6c      	ldr	r3, [pc, #432]	; (80015f0 <xTaskIncrementTick+0x238>)
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	601a      	str	r2, [r3, #0]
                    break;
 8001446:	e09f      	b.n	8001588 <xTaskIncrementTick+0x1d0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001448:	4b65      	ldr	r3, [pc, #404]	; (80015e0 <xTaskIncrementTick+0x228>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	429a      	cmp	r2, r3
 800145e:	d203      	bcs.n	8001468 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001460:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <xTaskIncrementTick+0x238>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001466:	e08f      	b.n	8001588 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	68d2      	ldr	r2, [r2, #12]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	6892      	ldr	r2, [r2, #8]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	3304      	adds	r3, #4
 800148a:	429a      	cmp	r2, r3
 800148c:	d103      	bne.n	8001496 <xTaskIncrementTick+0xde>
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01e      	beq.n	80014ec <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	6a12      	ldr	r2, [r2, #32]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	69d2      	ldr	r2, [r2, #28]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3318      	adds	r3, #24
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d103      	bne.n	80014dc <xTaskIncrementTick+0x124>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014ec:	69b8      	ldr	r0, [r7, #24]
 80014ee:	f001 fc9b 	bl	8002e28 <task_to_ready>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <xTaskIncrementTick+0x23c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d903      	bls.n	8001506 <xTaskIncrementTick+0x14e>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <xTaskIncrementTick+0x23c>)
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150a:	493b      	ldr	r1, [pc, #236]	; (80015f8 <xTaskIncrementTick+0x240>)
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3304      	adds	r3, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	3204      	adds	r2, #4
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1d1a      	adds	r2, r3, #4
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4a2b      	ldr	r2, [pc, #172]	; (80015f8 <xTaskIncrementTick+0x240>)
 800154a:	441a      	add	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001554:	4928      	ldr	r1, [pc, #160]	; (80015f8 <xTaskIncrementTick+0x240>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	4824      	ldr	r0, [pc, #144]	; (80015f8 <xTaskIncrementTick+0x240>)
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4403      	add	r3, r0
 8001570:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <xTaskIncrementTick+0x244>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	429a      	cmp	r2, r3
 800157e:	f4ff af59 	bcc.w	8001434 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8001582:	2301      	movs	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001586:	e755      	b.n	8001434 <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <xTaskIncrementTick+0x244>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158e:	491a      	ldr	r1, [pc, #104]	; (80015f8 <xTaskIncrementTick+0x240>)
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d901      	bls.n	80015a4 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24

        #if ( configUSE_TICK_HOOK == 1 )
            {
                /* Guard against the tick hook being called when the pended tick
                 * count is being unwound (when the scheduler is being unlocked). */
                if( xPendedTicks == ( TickType_t ) 0 )
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <xTaskIncrementTick+0x248>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <xTaskIncrementTick+0x1f8>
                {
                    vApplicationTickHook();
 80015ac:	f001 fadb 	bl	8002b66 <vApplicationTickHook>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <xTaskIncrementTick+0x24c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <xTaskIncrementTick+0x214>
                {
                    xSwitchRequired = pdTRUE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	e006      	b.n	80015cc <xTaskIncrementTick+0x214>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <xTaskIncrementTick+0x248>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <xTaskIncrementTick+0x248>)
 80015c6:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
            {
                vApplicationTickHook();
 80015c8:	f001 facd 	bl	8002b66 <vApplicationTickHook>
            }
        #endif
    }

    return xSwitchRequired;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000394 	.word	0x20000394
 80015dc:	20000370 	.word	0x20000370
 80015e0:	20000324 	.word	0x20000324
 80015e4:	0800380c 	.word	0x0800380c
 80015e8:	20000328 	.word	0x20000328
 80015ec:	20000384 	.word	0x20000384
 80015f0:	2000038c 	.word	0x2000038c
 80015f4:	20000374 	.word	0x20000374
 80015f8:	20000090 	.word	0x20000090
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	2000037c 	.word	0x2000037c
 8001604:	20000380 	.word	0x20000380

08001608 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <vTaskSetApplicationTaskTag+0x34>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e001      	b.n	8001624 <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 8001624:	f000 fea2 	bl	800236c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        taskEXIT_CRITICAL();
 800162e:	f000 fecf 	bl	80023d0 <vPortExitCritical>
    }
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000008c 	.word	0x2000008c

08001640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <vTaskSwitchContext+0xf4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800164e:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <vTaskSwitchContext+0xf8>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001654:	e069      	b.n	800172a <vTaskSwitchContext+0xea>
        xYieldPending = pdFALSE;
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <vTaskSwitchContext+0xf8>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_OUT();
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <vTaskSwitchContext+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fc26 	bl	8002eb4 <switched_out>
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001668:	f001 fbce 	bl	8002e08 <TIM5_get_cnt>
 800166c:	4602      	mov	r2, r0
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <vTaskSwitchContext+0x100>)
 8001670:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <vTaskSwitchContext+0x100>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <vTaskSwitchContext+0x104>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d909      	bls.n	8001692 <vTaskSwitchContext+0x52>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <vTaskSwitchContext+0x100>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <vTaskSwitchContext+0x104>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1ad1      	subs	r1, r2, r3
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <vTaskSwitchContext+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800168e:	440a      	add	r2, r1
 8001690:	66da      	str	r2, [r3, #108]	; 0x6c
                ulTaskSwitchedInTime = ulTotalRunTime;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <vTaskSwitchContext+0x100>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <vTaskSwitchContext+0x104>)
 8001698:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <vTaskSwitchContext+0x108>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e013      	b.n	80016ca <vTaskSwitchContext+0x8a>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <vTaskSwitchContext+0x84>
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	f640 4102 	movw	r1, #3074	; 0xc02
 80016be:	4823      	ldr	r0, [pc, #140]	; (800174c <vTaskSwitchContext+0x10c>)
 80016c0:	f001 fa58 	bl	8002b74 <assert_failed>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4921      	ldr	r1, [pc, #132]	; (8001750 <vTaskSwitchContext+0x110>)
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0e1      	beq.n	80016a2 <vTaskSwitchContext+0x62>
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <vTaskSwitchContext+0x110>)
 80016ea:	4413      	add	r3, r2
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3308      	adds	r3, #8
 8001700:	429a      	cmp	r2, r3
 8001702:	d104      	bne.n	800170e <vTaskSwitchContext+0xce>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <vTaskSwitchContext+0xfc>)
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <vTaskSwitchContext+0x108>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <vTaskSwitchContext+0xfc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fb8b 	bl	8002e40 <switched_in>
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000394 	.word	0x20000394
 8001738:	20000380 	.word	0x20000380
 800173c:	2000008c 	.word	0x2000008c
 8001740:	2000039c 	.word	0x2000039c
 8001744:	20000398 	.word	0x20000398
 8001748:	20000374 	.word	0x20000374
 800174c:	0800380c 	.word	0x0800380c
 8001750:	20000090 	.word	0x20000090

08001754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10d      	bne.n	8001780 <vTaskPlaceOnEventList+0x2c>
 8001764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	f640 411c 	movw	r1, #3100	; 0xc1c
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <vTaskPlaceOnEventList+0x4c>)
 800177c:	f001 f9fa 	bl	8002b74 <assert_failed>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <vTaskPlaceOnEventList+0x50>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3318      	adds	r3, #24
 8001786:	4619      	mov	r1, r3
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7fe fdae 	bl	80002ea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800178e:	2101      	movs	r1, #1
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f000 fc47 	bl	8002024 <prvAddCurrentTaskToDelayedList>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	0800380c 	.word	0x0800380c
 80017a4:	2000008c 	.word	0x2000008c

080017a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10d      	bne.n	80017da <xTaskRemoveFromEventList+0x32>
 80017be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	f640 4182 	movw	r1, #3202	; 0xc82
 80017d4:	485c      	ldr	r0, [pc, #368]	; (8001948 <xTaskRemoveFromEventList+0x1a0>)
 80017d6:	f001 f9cd 	bl	8002b74 <assert_failed>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	6a3a      	ldr	r2, [r7, #32]
 80017e6:	6a12      	ldr	r2, [r2, #32]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	6a3a      	ldr	r2, [r7, #32]
 80017f0:	69d2      	ldr	r2, [r2, #28]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	3318      	adds	r3, #24
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d103      	bne.n	8001808 <xTaskRemoveFromEventList+0x60>
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <xTaskRemoveFromEventList+0x1a4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d162      	bne.n	80018e6 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	68d2      	ldr	r2, [r2, #12]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	6892      	ldr	r2, [r2, #8]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	3304      	adds	r3, #4
 8001842:	429a      	cmp	r2, r3
 8001844:	d103      	bne.n	800184e <xTaskRemoveFromEventList+0xa6>
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800185e:	6a38      	ldr	r0, [r7, #32]
 8001860:	f001 fae2 	bl	8002e28 <task_to_ready>
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <xTaskRemoveFromEventList+0x1a8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d903      	bls.n	8001878 <xTaskRemoveFromEventList+0xd0>
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	4a36      	ldr	r2, [pc, #216]	; (8001950 <xTaskRemoveFromEventList+0x1a8>)
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187c:	4935      	ldr	r1, [pc, #212]	; (8001954 <xTaskRemoveFromEventList+0x1ac>)
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3304      	adds	r3, #4
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	6a3a      	ldr	r2, [r7, #32]
 80018a2:	3204      	adds	r2, #4
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	1d1a      	adds	r2, r3, #4
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4a26      	ldr	r2, [pc, #152]	; (8001954 <xTaskRemoveFromEventList+0x1ac>)
 80018bc:	441a      	add	r2, r3
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c6:	4923      	ldr	r1, [pc, #140]	; (8001954 <xTaskRemoveFromEventList+0x1ac>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	1c59      	adds	r1, r3, #1
 80018d6:	481f      	ldr	r0, [pc, #124]	; (8001954 <xTaskRemoveFromEventList+0x1ac>)
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4403      	add	r3, r0
 80018e2:	6019      	str	r1, [r3, #0]
 80018e4:	e01b      	b.n	800191e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <xTaskRemoveFromEventList+0x1b0>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	61da      	str	r2, [r3, #28]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	621a      	str	r2, [r3, #32]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	3218      	adds	r2, #24
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f103 0218 	add.w	r2, r3, #24
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <xTaskRemoveFromEventList+0x1b0>)
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <xTaskRemoveFromEventList+0x1b0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <xTaskRemoveFromEventList+0x1b0>)
 800191c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <xTaskRemoveFromEventList+0x1b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	429a      	cmp	r2, r3
 800192a:	d905      	bls.n	8001938 <xTaskRemoveFromEventList+0x190>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <xTaskRemoveFromEventList+0x1b8>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e001      	b.n	800193c <xTaskRemoveFromEventList+0x194>
    }
    else
    {
        xReturn = pdFALSE;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800193e:	4618      	mov	r0, r3
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	0800380c 	.word	0x0800380c
 800194c:	20000394 	.word	0x20000394
 8001950:	20000374 	.word	0x20000374
 8001954:	20000090 	.word	0x20000090
 8001958:	2000032c 	.word	0x2000032c
 800195c:	2000008c 	.word	0x2000008c
 8001960:	20000380 	.word	0x20000380

08001964 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <vTaskInternalSetTimeOutState+0x24>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <vTaskInternalSetTimeOutState+0x28>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20000384 	.word	0x20000384
 800198c:	20000370 	.word	0x20000370

08001990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10d      	bne.n	80019bc <xTaskCheckForTimeOut+0x2c>
 80019a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	f3bf 8f6f 	isb	sy
 80019ac:	f3bf 8f4f 	dsb	sy
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	f640 41fd 	movw	r1, #3325	; 0xcfd
 80019b6:	482a      	ldr	r0, [pc, #168]	; (8001a60 <xTaskCheckForTimeOut+0xd0>)
 80019b8:	f001 f8dc 	bl	8002b74 <assert_failed>
    configASSERT( pxTicksToWait );
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10d      	bne.n	80019de <xTaskCheckForTimeOut+0x4e>
 80019c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	f640 41fe 	movw	r1, #3326	; 0xcfe
 80019d8:	4821      	ldr	r0, [pc, #132]	; (8001a60 <xTaskCheckForTimeOut+0xd0>)
 80019da:	f001 f8cb 	bl	8002b74 <assert_failed>

    taskENTER_CRITICAL();
 80019de:	f000 fcc5 	bl	800236c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <xTaskCheckForTimeOut+0xd4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fa:	d102      	bne.n	8001a02 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	e026      	b.n	8001a50 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <xTaskCheckForTimeOut+0xd8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d00a      	beq.n	8001a24 <xTaskCheckForTimeOut+0x94>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d305      	bcc.n	8001a24 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e015      	b.n	8001a50 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d20b      	bcs.n	8001a46 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad2      	subs	r2, r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff92 	bl	8001964 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	e004      	b.n	8001a50 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a50:	f000 fcbe 	bl	80023d0 <vPortExitCritical>

    return xReturn;
 8001a54:	69fb      	ldr	r3, [r7, #28]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	0800380c 	.word	0x0800380c
 8001a64:	20000370 	.word	0x20000370
 8001a68:	20000384 	.word	0x20000384

08001a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <vTaskMissedYield+0x14>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	20000380 	.word	0x20000380

08001a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001a8c:	f000 f854 	bl	8001b38 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <prvIdleTask+0x2c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d907      	bls.n	8001aa8 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <prvIdleTask+0x30>)
 8001a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8001aa8:	f001 f856 	bl	8002b58 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8001aac:	e7ee      	b.n	8001a8c <prvIdleTask+0x8>
 8001aae:	bf00      	nop
 8001ab0:	20000090 	.word	0x20000090
 8001ab4:	e000ed04 	.word	0xe000ed04

08001ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	e00c      	b.n	8001ade <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <prvInitialiseTaskLists+0x60>)
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fbdc 	bl	8000290 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3301      	adds	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b1e      	cmp	r3, #30
 8001ae2:	d9ef      	bls.n	8001ac4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <prvInitialiseTaskLists+0x64>)
 8001ae6:	f7fe fbd3 	bl	8000290 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <prvInitialiseTaskLists+0x68>)
 8001aec:	f7fe fbd0 	bl	8000290 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <prvInitialiseTaskLists+0x6c>)
 8001af2:	f7fe fbcd 	bl	8000290 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001af6:	480c      	ldr	r0, [pc, #48]	; (8001b28 <prvInitialiseTaskLists+0x70>)
 8001af8:	f7fe fbca 	bl	8000290 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <prvInitialiseTaskLists+0x74>)
 8001afe:	f7fe fbc7 	bl	8000290 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <prvInitialiseTaskLists+0x78>)
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <prvInitialiseTaskLists+0x64>)
 8001b06:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <prvInitialiseTaskLists+0x7c>)
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <prvInitialiseTaskLists+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000090 	.word	0x20000090
 8001b1c:	200002fc 	.word	0x200002fc
 8001b20:	20000310 	.word	0x20000310
 8001b24:	2000032c 	.word	0x2000032c
 8001b28:	20000340 	.word	0x20000340
 8001b2c:	20000358 	.word	0x20000358
 8001b30:	20000324 	.word	0x20000324
 8001b34:	20000328 	.word	0x20000328

08001b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b3e:	e019      	b.n	8001b74 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001b40:	f000 fc14 	bl	800236c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <prvCheckTasksWaitingTermination+0x4c>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc03 	bl	800035c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <prvCheckTasksWaitingTermination+0x50>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <prvCheckTasksWaitingTermination+0x50>)
 8001b5e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <prvCheckTasksWaitingTermination+0x54>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <prvCheckTasksWaitingTermination+0x54>)
 8001b68:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001b6a:	f000 fc31 	bl	80023d0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f80e 	bl	8001b90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <prvCheckTasksWaitingTermination+0x54>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e1      	bne.n	8001b40 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000340 	.word	0x20000340
 8001b88:	2000036c 	.word	0x2000036c
 8001b8c:	20000354 	.word	0x20000354

08001b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fdb5 	bl	800270c <vPortFree>
                vPortFree( pxTCB );
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fdb2 	bl	800270c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <prvResetNextTaskUnblockTime+0x30>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d104      	bne.n	8001bc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <prvResetNextTaskUnblockTime+0x34>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001bc6:	e005      	b.n	8001bd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <prvResetNextTaskUnblockTime+0x30>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <prvResetNextTaskUnblockTime+0x34>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000324 	.word	0x20000324
 8001be4:	2000038c 	.word	0x2000038c

08001be8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <xTaskGetSchedulerState+0x34>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	e008      	b.n	8001c0e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <xTaskGetSchedulerState+0x38>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c04:	2302      	movs	r3, #2
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	e001      	b.n	8001c0e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c0e:	687b      	ldr	r3, [r7, #4]
    }
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000378 	.word	0x20000378
 8001c20:	20000394 	.word	0x20000394

08001c24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d07c      	beq.n	8001d34 <xTaskPriorityInherit+0x110>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <xTaskPriorityInherit+0x11c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d26c      	bcs.n	8001d22 <xTaskPriorityInherit+0xfe>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db06      	blt.n	8001c5e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <xTaskPriorityInherit+0x11c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f1c3 021f 	rsb	r2, r3, #31
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6959      	ldr	r1, [r3, #20]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4a35      	ldr	r2, [pc, #212]	; (8001d44 <xTaskPriorityInherit+0x120>)
 8001c70:	4413      	add	r3, r2
 8001c72:	4299      	cmp	r1, r3
 8001c74:	d14d      	bne.n	8001d12 <xTaskPriorityInherit+0xee>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fb6e 	bl	800035c <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c80:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <xTaskPriorityInherit+0x11c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001c8a:	6938      	ldr	r0, [r7, #16]
 8001c8c:	f001 f8cc 	bl	8002e28 <task_to_ready>
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <xTaskPriorityInherit+0x124>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d903      	bls.n	8001ca4 <xTaskPriorityInherit+0x80>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <xTaskPriorityInherit+0x124>)
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	4926      	ldr	r1, [pc, #152]	; (8001d44 <xTaskPriorityInherit+0x120>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	3204      	adds	r2, #4
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1d1a      	adds	r2, r3, #4
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <xTaskPriorityInherit+0x120>)
 8001ce8:	441a      	add	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf2:	4914      	ldr	r1, [pc, #80]	; (8001d44 <xTaskPriorityInherit+0x120>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c59      	adds	r1, r3, #1
 8001d02:	4810      	ldr	r0, [pc, #64]	; (8001d44 <xTaskPriorityInherit+0x120>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4403      	add	r3, r0
 8001d0e:	6019      	str	r1, [r3, #0]
 8001d10:	e004      	b.n	8001d1c <xTaskPriorityInherit+0xf8>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <xTaskPriorityInherit+0x11c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e008      	b.n	8001d34 <xTaskPriorityInherit+0x110>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <xTaskPriorityInherit+0x11c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d201      	bcs.n	8001d34 <xTaskPriorityInherit+0x110>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d34:	697b      	ldr	r3, [r7, #20]
    }
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000008c 	.word	0x2000008c
 8001d44:	20000090 	.word	0x20000090
 8001d48:	20000374 	.word	0x20000374

08001d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8088 	beq.w	8001e74 <xTaskPriorityDisinherit+0x128>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <xTaskPriorityDisinherit+0x134>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d00d      	beq.n	8001d8a <xTaskPriorityDisinherit+0x3e>
 8001d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	f241 014f 	movw	r1, #4175	; 0x104f
 8001d84:	483f      	ldr	r0, [pc, #252]	; (8001e84 <xTaskPriorityDisinherit+0x138>)
 8001d86:	f000 fef5 	bl	8002b74 <assert_failed>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <xTaskPriorityDisinherit+0x62>
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	f241 0150 	movw	r1, #4176	; 0x1050
 8001da8:	4836      	ldr	r0, [pc, #216]	; (8001e84 <xTaskPriorityDisinherit+0x138>)
 8001daa:	f000 fee3 	bl	8002b74 <assert_failed>
            ( pxTCB->uxMutexesHeld )--;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db2:	1e5a      	subs	r2, r3, #1
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d057      	beq.n	8001e74 <xTaskPriorityDisinherit+0x128>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d153      	bne.n	8001e74 <xTaskPriorityDisinherit+0x128>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fac3 	bl	800035c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f1c3 021f 	rsb	r2, r3, #31
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001dea:	69b8      	ldr	r0, [r7, #24]
 8001dec:	f001 f81c 	bl	8002e28 <task_to_ready>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <xTaskPriorityDisinherit+0x13c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d903      	bls.n	8001e04 <xTaskPriorityDisinherit+0xb8>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <xTaskPriorityDisinherit+0x13c>)
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	4920      	ldr	r1, [pc, #128]	; (8001e8c <xTaskPriorityDisinherit+0x140>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3304      	adds	r3, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	3204      	adds	r2, #4
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1d1a      	adds	r2, r3, #4
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <xTaskPriorityDisinherit+0x140>)
 8001e48:	441a      	add	r2, r3
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <xTaskPriorityDisinherit+0x140>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	480a      	ldr	r0, [pc, #40]	; (8001e8c <xTaskPriorityDisinherit+0x140>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4403      	add	r3, r0
 8001e6e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e74:	69fb      	ldr	r3, [r7, #28]
    }
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000008c 	.word	0x2000008c
 8001e84:	0800380c 	.word	0x0800380c
 8001e88:	20000374 	.word	0x20000374
 8001e8c:	20000090 	.word	0x20000090

08001e90 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 809c 	beq.w	8001fe2 <vTaskPriorityDisinheritAfterTimeout+0x152>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <vTaskPriorityDisinheritAfterTimeout+0x3e>
 8001eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	f241 019f 	movw	r1, #4255	; 0x109f
 8001ec8:	4848      	ldr	r0, [pc, #288]	; (8001fec <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8001eca:	f000 fe53 	bl	8002b74 <assert_failed>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d902      	bls.n	8001ede <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	e002      	b.n	8001ee4 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d079      	beq.n	8001fe2 <vTaskPriorityDisinheritAfterTimeout+0x152>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d174      	bne.n	8001fe2 <vTaskPriorityDisinheritAfterTimeout+0x152>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <vTaskPriorityDisinheritAfterTimeout+0x160>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10d      	bne.n	8001f1e <vTaskPriorityDisinheritAfterTimeout+0x8e>
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	f241 01ba 	movw	r1, #4282	; 0x10ba
 8001f18:	4834      	ldr	r0, [pc, #208]	; (8001fec <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8001f1a:	f000 fe2b 	bl	8002b74 <assert_failed>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db04      	blt.n	8001f3c <vTaskPriorityDisinheritAfterTimeout+0xac>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f1c3 021f 	rsb	r2, r3, #31
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	6959      	ldr	r1, [r3, #20]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4299      	cmp	r1, r3
 8001f50:	d147      	bne.n	8001fe2 <vTaskPriorityDisinheritAfterTimeout+0x152>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	3304      	adds	r3, #4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa00 	bl	800035c <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001f5c:	6a38      	ldr	r0, [r7, #32]
 8001f5e:	f000 ff63 	bl	8002e28 <task_to_ready>
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d903      	bls.n	8001f76 <vTaskPriorityDisinheritAfterTimeout+0xe6>
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7a:	491e      	ldr	r1, [pc, #120]	; (8001ff4 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3304      	adds	r3, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	3204      	adds	r2, #4
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	1d1a      	adds	r2, r3, #4
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001fba:	441a      	add	r2, r3
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	490b      	ldr	r1, [pc, #44]	; (8001ff4 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4403      	add	r3, r0
 8001fe0:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	0800380c 	.word	0x0800380c
 8001ff0:	2000008c 	.word	0x2000008c
 8001ff4:	20000090 	.word	0x20000090
 8001ff8:	20000374 	.word	0x20000374

08001ffc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <pvTaskIncrementMutexHeldCount+0x24>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <pvTaskIncrementMutexHeldCount+0x24>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200e:	3201      	adds	r2, #1
 8002010:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <pvTaskIncrementMutexHeldCount+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
    }
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	2000008c 	.word	0x2000008c

08002024 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe f98e 	bl	800035c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d124      	bne.n	8002092 <prvAddCurrentTaskToDelayedList+0x6e>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d021      	beq.n	8002092 <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	6892      	ldr	r2, [r2, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	3204      	adds	r2, #4
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1d1a      	adds	r2, r3, #4
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002082:	615a      	str	r2, [r3, #20]
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002090:	e026      	b.n	80020e0 <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d209      	bcs.n	80020be <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f7fe f917 	bl	80002ea <vListInsert>
}
 80020bc:	e010      	b.n	80020e0 <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3304      	adds	r3, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7fe f90d 	bl	80002ea <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d202      	bcs.n	80020e0 <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000370 	.word	0x20000370
 80020ec:	2000008c 	.word	0x2000008c
 80020f0:	20000358 	.word	0x20000358
 80020f4:	20000328 	.word	0x20000328
 80020f8:	20000324 	.word	0x20000324
 80020fc:	2000038c 	.word	0x2000038c

08002100 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3b04      	subs	r3, #4
 8002110:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002118:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b04      	subs	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f023 0201 	bic.w	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3b04      	subs	r3, #4
 800212e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <pxPortInitialiseStack+0x64>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3b14      	subs	r3, #20
 800213a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b04      	subs	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f06f 0202 	mvn.w	r2, #2
 800214e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3b20      	subs	r3, #32
 8002154:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	08002169 	.word	0x08002169

08002168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <prvTaskExitError+0x50>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d00c      	beq.n	8002196 <prvTaskExitError+0x2e>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	21e7      	movs	r1, #231	; 0xe7
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <prvTaskExitError+0x54>)
 8002192:	f000 fcef 	bl	8002b74 <assert_failed>
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80021a8:	bf00      	nop
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0fc      	beq.n	80021aa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000004 	.word	0x20000004
 80021bc:	08003858 	.word	0x08003858

080021c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <pxCurrentTCBConst2>)
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	6808      	ldr	r0, [r1, #0]
 80021c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ca:	f380 8809 	msr	PSP, r0
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f380 8811 	msr	BASEPRI, r0
 80021da:	4770      	bx	lr
 80021dc:	f3af 8000 	nop.w

080021e0 <pxCurrentTCBConst2>:
 80021e0:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop

080021e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <prvPortStartFirstTask+0x24>)
 80021ea:	6800      	ldr	r0, [r0, #0]
 80021ec:	6800      	ldr	r0, [r0, #0]
 80021ee:	f380 8808 	msr	MSP, r0
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f380 8814 	msr	CONTROL, r0
 80021fa:	b662      	cpsie	i
 80021fc:	b661      	cpsie	f
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	df00      	svc	0
 8002208:	bf00      	nop
 800220a:	0000      	.short	0x0000
 800220c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop

08002214 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <xPortStartScheduler+0x130>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <xPortStartScheduler+0x134>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10d      	bne.n	8002240 <xPortStartScheduler+0x2c>
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800223a:	4844      	ldr	r0, [pc, #272]	; (800234c <xPortStartScheduler+0x138>)
 800223c:	f000 fc9a 	bl	8002b74 <assert_failed>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <xPortStartScheduler+0x130>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a42      	ldr	r2, [pc, #264]	; (8002350 <xPortStartScheduler+0x13c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10d      	bne.n	8002266 <xPortStartScheduler+0x52>
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	f240 112f 	movw	r1, #303	; 0x12f
 8002260:	483a      	ldr	r0, [pc, #232]	; (800234c <xPortStartScheduler+0x138>)
 8002262:	f000 fc87 	bl	8002b74 <assert_failed>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <xPortStartScheduler+0x140>)
 8002268:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b33      	ldr	r3, [pc, #204]	; (8002358 <xPortStartScheduler+0x144>)
 800228c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <xPortStartScheduler+0x148>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002294:	e009      	b.n	80022aa <xPortStartScheduler+0x96>
            {
                ulMaxPRIGROUPValue--;
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <xPortStartScheduler+0x148>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3b01      	subs	r3, #1
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <xPortStartScheduler+0x148>)
 800229e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d0ef      	beq.n	8002296 <xPortStartScheduler+0x82>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <xPortStartScheduler+0x148>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d00d      	beq.n	80022de <xPortStartScheduler+0xca>
 80022c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	f240 1161 	movw	r1, #353	; 0x161
 80022d8:	481c      	ldr	r0, [pc, #112]	; (800234c <xPortStartScheduler+0x138>)
 80022da:	f000 fc4b 	bl	8002b74 <assert_failed>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <xPortStartScheduler+0x148>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <xPortStartScheduler+0x148>)
 80022e6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <xPortStartScheduler+0x148>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022f0:	4a1a      	ldr	r2, [pc, #104]	; (800235c <xPortStartScheduler+0x148>)
 80022f2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <xPortStartScheduler+0x14c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <xPortStartScheduler+0x14c>)
 8002302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002306:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <xPortStartScheduler+0x14c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <xPortStartScheduler+0x14c>)
 800230e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002312:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002314:	f000 f8e0 	bl	80024d8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <xPortStartScheduler+0x150>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800231e:	f000 f8ff 	bl	8002520 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <xPortStartScheduler+0x154>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <xPortStartScheduler+0x154>)
 8002328:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800232c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800232e:	f7ff ff5b 	bl	80021e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002332:	f7ff f985 	bl	8001640 <vTaskSwitchContext>
    prvTaskExitError();
 8002336:	f7ff ff17 	bl	8002168 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	e000ed00 	.word	0xe000ed00
 8002348:	410fc271 	.word	0x410fc271
 800234c:	08003858 	.word	0x08003858
 8002350:	410fc270 	.word	0x410fc270
 8002354:	e000e400 	.word	0xe000e400
 8002358:	200003a0 	.word	0x200003a0
 800235c:	200003a4 	.word	0x200003a4
 8002360:	e000ed20 	.word	0xe000ed20
 8002364:	20000004 	.word	0x20000004
 8002368:	e000ef34 	.word	0xe000ef34

0800236c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002376:	f383 8811 	msr	BASEPRI, r3
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <vPortEnterCritical+0x58>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <vPortEnterCritical+0x58>)
 800238c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <vPortEnterCritical+0x58>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d112      	bne.n	80023bc <vPortEnterCritical+0x50>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <vPortEnterCritical+0x5c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <vPortEnterCritical+0x50>
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <vPortEnterCritical+0x60>)
 80023b8:	f000 fbdc 	bl	8002b74 <assert_failed>
    }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000004 	.word	0x20000004
 80023c8:	e000ed04 	.word	0xe000ed04
 80023cc:	08003858 	.word	0x08003858

080023d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <vPortExitCritical+0x50>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <vPortExitCritical+0x2a>
 80023de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	f240 11ad 	movw	r1, #429	; 0x1ad
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <vPortExitCritical+0x54>)
 80023f6:	f000 fbbd 	bl	8002b74 <assert_failed>
    uxCriticalNesting--;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <vPortExitCritical+0x50>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <vPortExitCritical+0x50>)
 8002402:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <vPortExitCritical+0x50>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d104      	bne.n	8002416 <vPortExitCritical+0x46>
 800240c:	2300      	movs	r3, #0
 800240e:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000004 	.word	0x20000004
 8002424:	08003858 	.word	0x08003858
	...

08002430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002430:	f3ef 8009 	mrs	r0, PSP
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <pxCurrentTCBConst>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	f01e 0f10 	tst.w	lr, #16
 8002440:	bf08      	it	eq
 8002442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244a:	6010      	str	r0, [r2, #0]
 800244c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002454:	f380 8811 	msr	BASEPRI, r0
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f7ff f8ee 	bl	8001640 <vTaskSwitchContext>
 8002464:	f04f 0000 	mov.w	r0, #0
 8002468:	f380 8811 	msr	BASEPRI, r0
 800246c:	bc09      	pop	{r0, r3}
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	6808      	ldr	r0, [r1, #0]
 8002472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002476:	f01e 0f10 	tst.w	lr, #16
 800247a:	bf08      	it	eq
 800247c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002480:	f380 8809 	msr	PSP, r0
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	f3af 8000 	nop.w

08002490 <pxCurrentTCBConst>:
 8002490:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop

08002498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80024b0:	f7fe ff82 	bl	80013b8 <xTaskIncrementTick>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <SysTick_Handler+0x3c>)
 80024bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	e000ed04 	.word	0xe000ed04

080024d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <vPortSetupTimerInterrupt+0x34>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <vPortSetupTimerInterrupt+0x38>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <vPortSetupTimerInterrupt+0x3c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <vPortSetupTimerInterrupt+0x40>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	4a09      	ldr	r2, [pc, #36]	; (800251c <vPortSetupTimerInterrupt+0x44>)
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <vPortSetupTimerInterrupt+0x34>)
 80024fc:	2203      	movs	r2, #3
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010
 8002510:	e000e018 	.word	0xe000e018
 8002514:	20000008 	.word	0x20000008
 8002518:	51eb851f 	.word	0x51eb851f
 800251c:	e000e014 	.word	0xe000e014

08002520 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002520:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002530 <vPortEnableVFP+0x10>
 8002524:	6801      	ldr	r1, [r0, #0]
 8002526:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800252a:	6001      	str	r1, [r0, #0]
 800252c:	4770      	bx	lr
 800252e:	0000      	.short	0x0000
 8002530:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop

08002538 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002544:	f7fe fe16 	bl	8001174 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002548:	4b69      	ldr	r3, [pc, #420]	; (80026f0 <pvPortMalloc+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002550:	f000 f946 	bl	80027e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <pvPortMalloc+0x1bc>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 80ac 	bne.w	80026ba <pvPortMalloc+0x182>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d030      	beq.n	80025ca <pvPortMalloc+0x92>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002568:	2208      	movs	r2, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d22a      	bcs.n	80025ca <pvPortMalloc+0x92>
            {
                xWantedSize += xHeapStructSize;
 8002574:	2208      	movs	r2, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	2b00      	cmp	r3, #0
 8002584:	d024      	beq.n	80025d0 <pvPortMalloc+0x98>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f023 0307 	bic.w	r3, r3, #7
 800258c:	3308      	adds	r3, #8
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d217      	bcs.n	80025c4 <pvPortMalloc+0x8c>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	3308      	adds	r3, #8
 800259c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <pvPortMalloc+0x98>
        __asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	219c      	movs	r1, #156	; 0x9c
 80025bc:	484e      	ldr	r0, [pc, #312]	; (80026f8 <pvPortMalloc+0x1c0>)
 80025be:	f000 fad9 	bl	8002b74 <assert_failed>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025c2:	e005      	b.n	80025d0 <pvPortMalloc+0x98>
                    }
                    else
                    {
                        xWantedSize = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025c8:	e002      	b.n	80025d0 <pvPortMalloc+0x98>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	e000      	b.n	80025d2 <pvPortMalloc+0x9a>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025d0:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d070      	beq.n	80026ba <pvPortMalloc+0x182>
 80025d8:	4b48      	ldr	r3, [pc, #288]	; (80026fc <pvPortMalloc+0x1c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d86b      	bhi.n	80026ba <pvPortMalloc+0x182>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <pvPortMalloc+0x1c8>)
 80025e4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80025e6:	4b46      	ldr	r3, [pc, #280]	; (8002700 <pvPortMalloc+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025ec:	e004      	b.n	80025f8 <pvPortMalloc+0xc0>
                {
                    pxPreviousBlock = pxBlock;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d903      	bls.n	800260a <pvPortMalloc+0xd2>
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f1      	bne.n	80025ee <pvPortMalloc+0xb6>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <pvPortMalloc+0x1b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	429a      	cmp	r2, r3
 8002612:	d052      	beq.n	80026ba <pvPortMalloc+0x182>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2208      	movs	r2, #8
 800261a:	4413      	add	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1ad2      	subs	r2, r2, r3
 800262e:	2308      	movs	r3, #8
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	429a      	cmp	r2, r3
 8002634:	d921      	bls.n	800267a <pvPortMalloc+0x142>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <pvPortMalloc+0x12a>
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	21cf      	movs	r1, #207	; 0xcf
 800265c:	4826      	ldr	r0, [pc, #152]	; (80026f8 <pvPortMalloc+0x1c0>)
 800265e:	f000 fa89 	bl	8002b74 <assert_failed>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad2      	subs	r2, r2, r3
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002674:	69b8      	ldr	r0, [r7, #24]
 8002676:	f000 f915 	bl	80028a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <pvPortMalloc+0x1c4>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <pvPortMalloc+0x1c4>)
 8002686:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <pvPortMalloc+0x1c4>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <pvPortMalloc+0x1cc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d203      	bcs.n	800269c <pvPortMalloc+0x164>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <pvPortMalloc+0x1c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <pvPortMalloc+0x1cc>)
 800269a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <pvPortMalloc+0x1bc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <pvPortMalloc+0x1d0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <pvPortMalloc+0x1d0>)
 80026b8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80026ba:	f7fe fd69 	bl	8001190 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <pvPortMalloc+0x1ac>
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	f44f 7188 	mov.w	r1, #272	; 0x110
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <pvPortMalloc+0x1c0>)
 80026e0:	f000 fa48 	bl	8002b74 <assert_failed>
    return pvReturn;
 80026e4:	69fb      	ldr	r3, [r7, #28]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000a3b0 	.word	0x2000a3b0
 80026f4:	2000a3c4 	.word	0x2000a3c4
 80026f8:	08003888 	.word	0x08003888
 80026fc:	2000a3b4 	.word	0x2000a3b4
 8002700:	2000a3a8 	.word	0x2000a3a8
 8002704:	2000a3b8 	.word	0x2000a3b8
 8002708:	2000a3bc 	.word	0x2000a3bc

0800270c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d053      	beq.n	80027c6 <vPortFree+0xba>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800271e:	2308      	movs	r3, #8
 8002720:	425b      	negs	r3, r3
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4413      	add	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <vPortFree+0xc4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <vPortFree+0x4a>
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002750:	4820      	ldr	r0, [pc, #128]	; (80027d4 <vPortFree+0xc8>)
 8002752:	f000 fa0f 	bl	8002b74 <assert_failed>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <vPortFree+0x6e>
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	f240 1125 	movw	r1, #293	; 0x125
 8002774:	4817      	ldr	r0, [pc, #92]	; (80027d4 <vPortFree+0xc8>)
 8002776:	f000 f9fd 	bl	8002b74 <assert_failed>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <vPortFree+0xc4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01e      	beq.n	80027c6 <vPortFree+0xba>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11a      	bne.n	80027c6 <vPortFree+0xba>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <vPortFree+0xc4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	43db      	mvns	r3, r3
 800279a:	401a      	ands	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80027a0:	f7fe fce8 	bl	8001174 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <vPortFree+0xcc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <vPortFree+0xcc>)
 80027b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027b2:	6938      	ldr	r0, [r7, #16]
 80027b4:	f000 f876 	bl	80028a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <vPortFree+0xd0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <vPortFree+0xd0>)
 80027c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80027c2:	f7fe fce5 	bl	8001190 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000a3c4 	.word	0x2000a3c4
 80027d4:	08003888 	.word	0x08003888
 80027d8:	2000a3b4 	.word	0x2000a3b4
 80027dc:	2000a3c0 	.word	0x2000a3c0

080027e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <prvHeapInit+0xac>)
 80027ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3307      	adds	r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0307 	bic.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <prvHeapInit+0xac>)
 8002810:	4413      	add	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <prvHeapInit+0xb0>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <prvHeapInit+0xb0>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800282c:	2208      	movs	r2, #8
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0307 	bic.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a15      	ldr	r2, [pc, #84]	; (8002894 <prvHeapInit+0xb4>)
 8002840:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <prvHeapInit+0xb4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <prvHeapInit+0xb4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	1ad2      	subs	r2, r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <prvHeapInit+0xb4>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <prvHeapInit+0xb8>)
 800286e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <prvHeapInit+0xbc>)
 8002876:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <prvHeapInit+0xc0>)
 800287a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	200003a8 	.word	0x200003a8
 8002890:	2000a3a8 	.word	0x2000a3a8
 8002894:	2000a3b0 	.word	0x2000a3b0
 8002898:	2000a3b8 	.word	0x2000a3b8
 800289c:	2000a3b4 	.word	0x2000a3b4
 80028a0:	2000a3c4 	.word	0x2000a3c4

080028a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <prvInsertBlockIntoFreeList+0xac>)
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e002      	b.n	80028b8 <prvInsertBlockIntoFreeList+0x14>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d8f7      	bhi.n	80028b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d108      	bne.n	80028e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	441a      	add	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	441a      	add	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d118      	bne.n	800292c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <prvInsertBlockIntoFreeList+0xb0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d00d      	beq.n	8002922 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e008      	b.n	8002934 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <prvInsertBlockIntoFreeList+0xb0>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e003      	b.n	8002934 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d002      	beq.n	8002942 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000a3a8 	.word	0x2000a3a8
 8002954:	2000a3b0 	.word	0x2000a3b0

08002958 <start_application>:
  * @brief  Create Task and launch Scheduler
  * @parm 	none
  * @retval none
  */
void start_application(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af02      	add	r7, sp, #8
//         //vTaskDelete( xHandle );
//     }else{
//     	// not enough memory to create task
//     }

     xReturned = xTaskCreate(
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <start_application+0x78>)
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2305      	movs	r3, #5
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2302      	movs	r3, #2
 8002968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296c:	4919      	ldr	r1, [pc, #100]	; (80029d4 <start_application+0x7c>)
 800296e:	481a      	ldr	r0, [pc, #104]	; (80029d8 <start_application+0x80>)
 8002970:	f7fe f994 	bl	8000c9c <xTaskCreate>
 8002974:	6078      	str	r0, [r7, #4]
      	// not enough memory to create task
      }



      usart2_mutex = xSemaphoreCreateMutex();
 8002976:	2001      	movs	r0, #1
 8002978:	f7fd fe4f 	bl	800061a <xQueueCreateMutex>
 800297c:	4602      	mov	r2, r0
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <start_application+0x84>)
 8002980:	601a      	str	r2, [r3, #0]
      binary_usart2_mutex = xSemaphoreCreateBinary();
 8002982:	2203      	movs	r2, #3
 8002984:	2100      	movs	r1, #0
 8002986:	2001      	movs	r0, #1
 8002988:	f7fd fdb0 	bl	80004ec <xQueueGenericCreate>
 800298c:	4602      	mov	r2, r0
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <start_application+0x88>)
 8002990:	601a      	str	r2, [r3, #0]


     xReturned = xTaskCreate(
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <start_application+0x8c>)
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2305      	movs	r3, #5
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2301      	movs	r3, #1
 800299c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a0:	4911      	ldr	r1, [pc, #68]	; (80029e8 <start_application+0x90>)
 80029a2:	4812      	ldr	r0, [pc, #72]	; (80029ec <start_application+0x94>)
 80029a4:	f7fe f97a 	bl	8000c9c <xTaskCreate>
 80029a8:	6078      	str	r0, [r7, #4]
		  //vTaskDelete( xHandle );
	  }else{
		// not enough memory to create task
	  }

	 xReturned = xTaskCreate(
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <start_application+0x98>)
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2305      	movs	r3, #5
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2302      	movs	r3, #2
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <start_application+0x9c>)
 80029ba:	480f      	ldr	r0, [pc, #60]	; (80029f8 <start_application+0xa0>)
 80029bc:	f7fe f96e 	bl	8000c9c <xTaskCreate>
 80029c0:	6078      	str	r0, [r7, #4]
		// not enough memory to create task
	  }

     // start the scheduler, task will be started and the
     // function will not return
	vTaskStartScheduler();
 80029c2:	f7fe fb7b 	bl	80010bc <vTaskStartScheduler>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000a3c8 	.word	0x2000a3c8
 80029d4:	080038b8 	.word	0x080038b8
 80029d8:	080029fd 	.word	0x080029fd
 80029dc:	2000a3f8 	.word	0x2000a3f8
 80029e0:	2000a3f4 	.word	0x2000a3f4
 80029e4:	2000a3cc 	.word	0x2000a3cc
 80029e8:	080038c0 	.word	0x080038c0
 80029ec:	08002a49 	.word	0x08002a49
 80029f0:	2000a3d0 	.word	0x2000a3d0
 80029f4:	080038d0 	.word	0x080038d0
 80029f8:	08002aa5 	.word	0x08002aa5

080029fc <T3>:
	}

}

void T3( void * pvParameters )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	/*************** For Debuging with FreeRTOS Trace macro *******************/
	#if configUSE_APPLICATION_TASK_TAG==1
		#ifndef USE_FUNCTION_FOR_TRACE_TAG
		/* profiling function : set a tag, tag=task number (pvParameters)*/
		vTaskSetApplicationTaskTag( NULL, pvParameters );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fdfd 	bl	8001608 <vTaskSetApplicationTaskTag>
		#endif //USE_FUNCTION_FOR_TRACE_TAG
	#endif //configUSE_APPLICATION_TASK_TAG==1
	/**************************************************************************/

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = configTICK_RATE_HZ/2;
 8002a0e:	2332      	movs	r3, #50	; 0x32
 8002a10:	60fb      	str	r3, [r7, #12]

	 // Initialise the xLastWakeTime variable with the current time.
	 xLastWakeTime = xTaskGetTickCount();
 8002a12:	f7fe fcc1 	bl	8001398 <xTaskGetTickCount>
 8002a16:	4603      	mov	r3, r0
 8002a18:	60bb      	str	r3, [r7, #8]

	/* tasks must not return, use an infinite loop */
	for(;;){
		/* switch le led OFF */
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fac1 	bl	8000fa8 <xTaskDelayUntil>
		GPIOA->BSRR = GPIO_BSRR_BR5;
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <T3+0x48>)
 8002a28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a2c:	619a      	str	r2, [r3, #24]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8002a2e:	f107 0308 	add.w	r3, r7, #8
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fab7 	bl	8000fa8 <xTaskDelayUntil>
		GPIOA->BSRR = GPIO_BSRR_BS5 ;
 8002a3a:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <T3+0x48>)
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	619a      	str	r2, [r3, #24]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8002a40:	e7eb      	b.n	8002a1a <T3+0x1e>
 8002a42:	bf00      	nop
 8002a44:	40020000 	.word	0x40020000

08002a48 <print_task1>:

	}

}

void print_task1(int p){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0c2      	sub	sp, #264	; 0x108
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	6018      	str	r0, [r3, #0]
	char buffer[256];
	sprintf(buffer, "Hello from task %d\r\n", p);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	f107 0008 	add.w	r0, r7, #8
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4910      	ldr	r1, [pc, #64]	; (8002a9c <print_task1+0x54>)
 8002a5c:	f000 fba8 	bl	80031b0 <siprintf>
	while(1){

		if( binary_usart2_mutex == NULL )
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <print_task1+0x58>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0fb      	beq.n	8002a60 <print_task1+0x18>
		        /* There was insufficient FreeRTOS heap available for the semaphore to
		        be created successfully. */
		    }
		    else
		    {
		    	xSemaphoreTake(binary_usart2_mutex, 10);
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <print_task1+0x58>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	210a      	movs	r1, #10
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fef8 	bl	8000864 <xQueueSemaphoreTake>
		    	USART2_Transmit(buffer, strlen(buffer));
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fbb1 	bl	80001e0 <strlen>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fab4 	bl	8002ff4 <USART2_Transmit>
		    	xSemaphoreGive( binary_usart2_mutex );
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <print_task1+0x58>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	f7fd fdd9 	bl	800064c <xQueueGenericSend>
		if( binary_usart2_mutex == NULL )
 8002a9a:	e7e1      	b.n	8002a60 <print_task1+0x18>
 8002a9c:	080038e0 	.word	0x080038e0
 8002aa0:	2000a3f4 	.word	0x2000a3f4

08002aa4 <print_task2>:
		        }
		}*/
	}
}

void print_task2(int p){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0c2      	sub	sp, #264	; 0x108
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	6018      	str	r0, [r3, #0]
	char buffer[256];
	sprintf(buffer, "Hello from task %d\r\n", p);
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	f107 0008 	add.w	r0, r7, #8
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4910      	ldr	r1, [pc, #64]	; (8002af8 <print_task2+0x54>)
 8002ab8:	f000 fb7a 	bl	80031b0 <siprintf>
	while(1){

		if( binary_usart2_mutex == NULL )
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <print_task2+0x58>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0fb      	beq.n	8002abc <print_task2+0x18>
			/* There was insufficient FreeRTOS heap available for the semaphore to
			be created successfully. */
		}
		else
		{
			xSemaphoreTake(binary_usart2_mutex, 10);
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <print_task2+0x58>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	210a      	movs	r1, #10
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd feca 	bl	8000864 <xQueueSemaphoreTake>
			USART2_Transmit(buffer, strlen(buffer));
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fb83 	bl	80001e0 <strlen>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fa86 	bl	8002ff4 <USART2_Transmit>
			xSemaphoreGive( binary_usart2_mutex );
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <print_task2+0x58>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	f7fd fdab 	bl	800064c <xQueueGenericSend>
		if( binary_usart2_mutex == NULL )
 8002af6:	e7e1      	b.n	8002abc <print_task2+0x18>
 8002af8:	080038e0 	.word	0x080038e0
 8002afc:	2000a3f4 	.word	0x2000a3f4

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	/*priority grouping 4 bits for pre-emption priority 0 bits for subpriority
	 * (No Subpriority) for FreeRTOS*/
	NVIC_SetPriorityGrouping( 3 );
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f7ff ffd7 	bl	8002b00 <__NVIC_SetPriorityGrouping>

	/* create tasks and lanch scheduler */
	start_application();
 8002b52:	f7ff ff01 	bl	8002958 <start_application>

 	/* Loop forever */
	for(;;);
 8002b56:	e7fe      	b.n	8002b56 <main+0xe>

08002b58 <vApplicationIdleHook>:

/**
  * Idle Hook function, called in loop in the Idle Task
  */
 void vApplicationIdleHook( void )
 {
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

	 /* no tasks to run go in light sleep until next interrupt */
 	//__WFI();

 }
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <vApplicationTickHook>:

 /**
   * Tick Hook function, called from ISR SysTick
   */
 void vApplicationTickHook( void )
 {
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

 }
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char* file, uint32_t line)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <assert_failed+0xa>

08002b80 <pin_init>:
 * @brief	constructor to configure pin before main()
 * @param	none
 * @retval	none
 */
static void pin_init(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
	/* 2 port instance are declared and mapped on GPIOA and GPIOC address
	 * GPIOA and GPIOC are constant address defined in stm32f401xe.h
	 */
	GPIO_TypeDef * PA = GPIOA, *PC = GPIOC, *PB = GPIOB;
 8002b86:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <pin_init+0x11c>)
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <pin_init+0x120>)
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <pin_init+0x124>)
 8002b90:	607b      	str	r3, [r7, #4]
	 * of GPIOA and GPOC
	 * RCC is macro definced in stm32f401xe.h and RCC_AHB1ENR_GPIOAEN and
	 * RCC_AHB1ENR_GPIOCEN RCC_AHB1ENR_GPIOCEN are constant also defined in
	 * stm32f401xe.h
	 */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8002b92:	4b45      	ldr	r3, [pc, #276]	; (8002ca8 <pin_init+0x128>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a44      	ldr	r2, [pc, #272]	; (8002ca8 <pin_init+0x128>)
 8002b98:	f043 0305 	orr.w	r3, r3, #5
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
	 */
	/* electric configuration (reset the state if in an other state than the
	 * one after reset
	 */
	/* output push pull */
	PA->OTYPER &= ~GPIO_OTYPER_OT5_Msk;			// clear bit field
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 0220 	bic.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]
	/* slow speed, better for low electrical interference (less noisy) */
	PA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED5_Msk;	// clear bit field
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	609a      	str	r2, [r3, #8]
	/* no pull-up or pull-down resistor */
	PA->PUPDR &= ~GPIO_PUPDR_PUPD5_Msk;			// clear bit field
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	60da      	str	r2, [r3, #12]

#undef USE_PWM_LED
#ifndef USE_PWM_LED
	/* PA5 in output mode */
	PA->MODER &= ~GPIO_MODER_MODER5_Msk; /* GPIO_MODER_MODER5_Msk : constante
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]
											définie dans stm32f401xe.h */
	PA->MODER |= GPIO_MODER_MODER5_0;	/* GPIO_MODER_MODER5_0, constante
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	601a      	str	r2, [r3, #0]

	/***************************************************************************
	 * Pin configuration for the user button connected to PC13
	 * input,no pull
	 */
	PC->MODER &= ~GPIO_MODER_MODE13_Msk;		// clear bit field
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	601a      	str	r2, [r3, #0]
	PC->PUPDR &= ~GPIO_PUPDR_PUPD13_Msk;		// clear bit field
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
	/***************************************************************************
	 * Pin configuration for USART2,
	 * PA2 et PA3 select alternate function N°7 in alternate function register
	 */
	/* TX on PA2 alternate function 7*/
	GPIOA->AFR[0] &= ~(0xF << (2*4) );	/* clear the 4 bits */
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <pin_init+0x11c>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <pin_init+0x11c>)
 8002bf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bfc:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << (2*4) ); 	/* set alternate function Nbr 7*/
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <pin_init+0x11c>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <pin_init+0x11c>)
 8002c04:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c08:	6213      	str	r3, [r2, #32]
	/* RX on PA3 alternate function 7 */
	GPIOA->AFR[0] &= ~(0xF << (3*4) );	/* clear the 4 bits */
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <pin_init+0x11c>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <pin_init+0x11c>)
 8002c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c14:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << (3*4) );		/* set alternate function Nbr 7*/
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <pin_init+0x11c>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <pin_init+0x11c>)
 8002c1c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002c20:	6213      	str	r3, [r2, #32]
	/* Configure alternate function for USART2 TX/RX (PIN2/3) in mode register*/
	GPIOA->MODER &= ~(3 << (2 * 2) );	/*TX*/
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <pin_init+0x11c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <pin_init+0x11c>)
 8002c28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c2c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(3 << (3 * 2) );	/*RX*/
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <pin_init+0x11c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <pin_init+0x11c>)
 8002c34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c38:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << (2 * 2) );	/*TX*/
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <pin_init+0x11c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <pin_init+0x11c>)
 8002c40:	f043 0320 	orr.w	r3, r3, #32
 8002c44:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << (3 * 2) );	/*RX*/
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <pin_init+0x11c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <pin_init+0x11c>)
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	6013      	str	r3, [r2, #0]
	/************************** PINS PB7 for TIM4 CH2 *************************/
	/* Enable GPIOB and clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <pin_init+0x128>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <pin_init+0x128>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
	/* PB7 as alternate function N°2*/
	PB->AFR[0] &= ~ GPIO_AFRL_AFSEL7_Msk	;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	621a      	str	r2, [r3, #32]
	PB->AFR[0] |= (0x2 << GPIO_AFRL_AFSEL7_Pos)	;	/* AF02 */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	621a      	str	r2, [r3, #32]
	PB->MODER &= ~GPIO_MODER_MODER7;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
	PB->MODER |= GPIO_MODER_MODER7_1; /* alternate function */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
	/************************** PINS PB7 for TIM4 CH2 *************************/
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40023800 	.word	0x40023800

08002cac <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <HardFault_Handler+0x4>

08002cc0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <MemManage_Handler+0x4>

08002cc6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002cca:	e7fe      	b.n	8002cca <BusFault_Handler+0x4>

08002ccc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <UsageFault_Handler+0x4>

08002cd2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_malloc_r>:
/* Functions */

#if 1
/* wrap malloc on pvPortMalloc */

void * _malloc_r(struct _reent *reent, size_t nbytes) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
     return pvPortMalloc(nbytes);
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f7ff fc24 	bl	8002538 <pvPortMalloc>
 8002cf0:	4603      	mov	r3, r0
};
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_free_r>:


void _free_r(struct _reent *reent,void* ptr)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
        // We simply wrap the FreeRTOS call into a standard form
        vPortFree(ptr);
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f7ff fd01 	bl	800270c <vPortFree>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_realloc_r>:

void *_realloc_r(struct _reent *reent, void *aptr, size_t nbytes)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
	/* no equivalent function in free RTOS, some newlib functions use it, maybe better to trap
	 * it to debug  */
	return NULL;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <SystemInit+0x20>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <SystemInit+0x20>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <TIM3_IRQHandler>:
  * @brief  TIM3 IRQ Handler
  * @param  none
  * @retval none
  */
void TIM3_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
	TIM_TypeDef  * tim = TIM3;
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <TIM3_IRQHandler+0x44>)
 8002d58:	607b      	str	r3, [r7, #4]
	
	/* test uif */
	if ((tim->SR & TIM_SR_UIF) && tim->DIER & TIM_DIER_UIE){
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00c      	beq.n	8002d80 <TIM3_IRQHandler+0x30>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <TIM3_IRQHandler+0x30>
		/* call the user callback function if set */
		if (TIM3_Callback != 0){
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <TIM3_IRQHandler+0x48>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <TIM3_IRQHandler+0x30>
			TIM3_Callback();
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <TIM3_IRQHandler+0x48>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4798      	blx	r3
		}
	}
	/* ack the IRQ */
	TIM3->SR &= ~ TIM_SR_UIF ;
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <TIM3_IRQHandler+0x44>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <TIM3_IRQHandler+0x44>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6113      	str	r3, [r2, #16]
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40000400 	.word	0x40000400
 8002d98:	2000a3d4 	.word	0x2000a3d4

08002d9c <TIM5_Init>:
 * @brief  Setup the TIM5 to count (for FreeRTOS profiling),
 * @param  freq : frequency of counting
 * @retval None
 */
 void TIM5_Init(uint32_t freq)
 {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	TIM_TypeDef  * tim = TIM5;
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <TIM5_Init+0x60>)
 8002da6:	60fb      	str	r3, [r7, #12]
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		/* activate TIM5 Clock */
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <TIM5_Init+0x64>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <TIM5_Init+0x64>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6413      	str	r3, [r2, #64]	; 0x40

	/* prescaler value set to get a freq Hz clock */
	tim->PSC = (SystemCoreClock / freq) - 1 ;
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <TIM5_Init+0x68>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
	/* auto reload register set to its maximum value (32 bits) */
	tim->ARR = 0xffffffff;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* to enable change the in CCMR for CCxS bit the channel must be off */
	tim->CCER = 0;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
	 	/* update counter and prescaler : it clear prescaler and counter, to start
	 * with a full cycle. It will set the Update flag  (UIF), note that it can
	 * be avoided by setting the UDIS bit in CR1
	 * see TIM5_clear_periodic_event() */
	tim->EGR = TIM_EGR_UG;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	615a      	str	r2, [r3, #20]
	/* As an update has been generated by software,
	 * clear the bit in the status register, all flags can also be cleared
	 * here
	 */
	tim->SR &= ~ TIM_SR_UIF ;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f023 0201 	bic.w	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	611a      	str	r2, [r3, #16]
	/* enable the counter (start counting) */
	tim->CR1 |= TIM_CR1_CEN ;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]
 }
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40000c00 	.word	0x40000c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	20000008 	.word	0x20000008

08002e08 <TIM5_get_cnt>:

 uint32_t TIM5_get_cnt(void)
 {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
	TIM_TypeDef  * tim = TIM5;
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <TIM5_get_cnt+0x1c>)
 8002e10:	607b      	str	r3, [r7, #4]
	return tim->CNT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24

 }
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40000c00 	.word	0x40000c00

08002e28 <task_to_ready>:
	T2_count++;	// led on
	return 0;
}

void task_to_ready(void * pvParameter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	asm("nop");
 8002e30:	bf00      	nop
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <switched_in>:
 * 			the last task switched out in FreeRTOSConfig.h with trace macro
 * @parm   	task tag
 */

void switched_in(int task_tag)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
//	if (last_TaskTag != task_tag){
		// context switch has occured : preemption or time-slice
		// do whatever ..
		// increase profiling counter
		switch (task_tag) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d822      	bhi.n	8002e94 <switched_in+0x54>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <switched_in+0x14>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e71 	.word	0x08002e71
 8002e5c:	08002e7d 	.word	0x08002e7d
 8002e60:	08002e89 	.word	0x08002e89
			case 0 :
				Idle_count++;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <switched_in+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <switched_in+0x64>)
 8002e6c:	6013      	str	r3, [r2, #0]
				break;
 8002e6e:	e012      	b.n	8002e96 <switched_in+0x56>
			case 1 :
				T1_count++;
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <switched_in+0x68>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3301      	adds	r3, #1
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <switched_in+0x68>)
 8002e78:	6013      	str	r3, [r2, #0]
				break;
 8002e7a:	e00c      	b.n	8002e96 <switched_in+0x56>
			case 2 :
				T2_count++;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <switched_in+0x6c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <switched_in+0x6c>)
 8002e84:	6013      	str	r3, [r2, #0]
				break;
 8002e86:	e006      	b.n	8002e96 <switched_in+0x56>
			case 3 :
				T3_count++;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <switched_in+0x70>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <switched_in+0x70>)
 8002e90:	6013      	str	r3, [r2, #0]
				break;
 8002e92:	e000      	b.n	8002e96 <switched_in+0x56>
			default :

				break;
 8002e94:	bf00      	nop
		}
//	}
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000a408 	.word	0x2000a408
 8002ea8:	2000a3fc 	.word	0x2000a3fc
 8002eac:	2000a404 	.word	0x2000a404
 8002eb0:	2000a400 	.word	0x2000a400

08002eb4 <switched_out>:
 * 			task tag is used here, last_TaskTag is set to
 * 			the last task switched out in FreeRTOSConfig.h with trace macro
 * @parm   	task tag
 */
void switched_out(int task_tag)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	switch (task_tag) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d80a      	bhi.n	8002ed8 <switched_out+0x24>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <switched_out+0x14>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002ed9 	.word	0x08002ed9
 8002ed0:	08002ed9 	.word	0x08002ed9
 8002ed4:	08002ed9 	.word	0x08002ed9
		case 2 :
			break;
		case 3 :
			break;
		default :
			break;
 8002ed8:	bf00      	nop
	}

}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <USART_Init_115200>:
  * @brief  constructor to Init USART2 @ 115200 baud before main()
  * @param  None
  * @retval None
  * */
__attribute__((constructor(108))) static void USART_Init_115200(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	USART2_Init(115200);
 8002eec:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002ef0:	f000 f802 	bl	8002ef8 <USART2_Init>
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <USART2_Init>:
  * @brief  Init USART2 @ baud,8,1,n
  * @param  baud rate
  * @retval None
  * */
void USART2_Init(uint32_t baud)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
uint32_t tmp = 0, divmantissa, divfraction, apbclk;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]

	/* initialisation de l'USART2 : baud,8,1,n */

	/* reset/de-reset USART2 */
	RCC->APB1RSTR |= RCC_APB1RSTR_USART2RST;
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <USART2_Init+0xf0>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a37      	ldr	r2, [pc, #220]	; (8002fe8 <USART2_Init+0xf0>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0e:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_USART2RST;
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <USART2_Init+0xf0>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <USART2_Init+0xf0>)
 8002f16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f1a:	6213      	str	r3, [r2, #32]
	/* enable USART2 clk */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <USART2_Init+0xf0>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <USART2_Init+0xf0>)
 8002f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40

	/*-------------- UART parameters configuration --------------- */
	USART2->CR1 &= ~USART_CR1_UE;
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <USART2_Init+0xf4>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <USART2_Init+0xf4>)
 8002f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f32:	60d3      	str	r3, [r2, #12]
	/* USART CR1 Configuration : tx and rx enable; oversampling = 16 */
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <USART2_Init+0xf4>)
 8002f36:	220c      	movs	r2, #12
 8002f38:	60da      	str	r2, [r3, #12]
	/* USART CR2 Configuration : 1 stop bit*/
	USART2->CR2 = 0 ;
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <USART2_Init+0xf4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
	/* USART CR3 Configuration : no flow control*/
	USART2->CR3 = 0;
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <USART2_Init+0xf4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
	/* USART BRR Configuration : depend on the bus frequency*/
	/* get APB1 prescaler to determine the USART clock frequency apbclk*/
	tmp = (RCC->CFGR & RCC_CFGR_PPRE1)>>10;
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <USART2_Init+0xf0>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60bb      	str	r3, [r7, #8]
	if (tmp & 4){
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <USART2_Init+0x7c>
		tmp =  (tmp & 3) + 1;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
		apbclk = SystemCoreClock >> tmp;
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <USART2_Init+0xf8>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e002      	b.n	8002f7a <USART2_Init+0x82>
	}
	else {
		apbclk = SystemCoreClock;
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <USART2_Init+0xf8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
	}

	/* compute baud rate from the apbclock frequency
	 *  baud = apbclk /(8*(2-OVER8)*USARTDIV) */

	tmp = (USART2->CR1 & USART_CR1_OVER8)>>15;
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <USART2_Init+0xf4>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0bdb      	lsrs	r3, r3, #15
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
	if (tmp == 0) {
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10d      	bne.n	8002fa8 <USART2_Init+0xb0>
		/* OVER8 = 0, div by 16 */
		divmantissa = (apbclk/baud) >> 4;
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	617b      	str	r3, [r7, #20]
		divfraction = (apbclk/baud) & 0xF;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e00c      	b.n	8002fc2 <USART2_Init+0xca>
	}
	else {
		/* OVER8 = 0, div by 8 */
		divmantissa = (apbclk/baud) >> 3;
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	617b      	str	r3, [r7, #20]
		divfraction = (apbclk/baud) & 3;
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	613b      	str	r3, [r7, #16]
	}
	/*USART2->BRR = mantissa and fraction part*/
	USART2->BRR = (divmantissa << 4) | divfraction ;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	011a      	lsls	r2, r3, #4
 8002fc6:	4909      	ldr	r1, [pc, #36]	; (8002fec <USART2_Init+0xf4>)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]


	/* enable USART */
	USART2->CR1 |= USART_CR1_UE;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <USART2_Init+0xf4>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a06      	ldr	r2, [pc, #24]	; (8002fec <USART2_Init+0xf4>)
 8002fd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fd8:	60d3      	str	r3, [r2, #12]

	/*-------------- interrupt --------------- */
	//NVIC_SetPriority(USART2_IRQn,0x15); /*  priority */
	//NVIC_EnableIRQ(USART2_IRQn);
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	20000008 	.word	0x20000008

08002ff4 <USART2_Transmit>:
  * @param  data address
  * 		len (in bytes = nbr of data)
  * @retval nbr of data sent
  * */
uint32_t USART2_Transmit(uint8_t * data, uint32_t len)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
	uint32_t Nrdata = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]

	while (Nrdata < len){
 8003002:	e00f      	b.n	8003024 <USART2_Transmit+0x30>
		while (!(USART2->SR & USART_SR_TXE)){
 8003004:	bf00      	nop
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <USART2_Transmit+0x48>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f9      	beq.n	8003006 <USART2_Transmit+0x12>
			/* wait for TXE to be set */
		}
		/* store the datum in TDR */
		USART2->DR = *data++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <USART2_Transmit+0x48>)
 800301c:	605a      	str	r2, [r3, #4]
		/* increment the data counter */
		Nrdata++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3301      	adds	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
	while (Nrdata < len){
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d3eb      	bcc.n	8003004 <USART2_Transmit+0x10>
	}
	/* wait last data to be completely sent (Optionnal) */
	//while (!(USART2->SR & USART_SR_TC));

	return Nrdata;
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40004400 	.word	0x40004400

08003040 <USART2_IRQHandler>:
  * @brief  ISR of USART2
  * @param  none
  * @retval none
  * */
void USART2_IRQHandler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
	uint32_t status, cr1, dummy_read;

	/* get status register */
	status = USART2->SR;
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <USART2_IRQHandler+0xa4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	607b      	str	r3, [r7, #4]
	/* get Interrupt sources */
	cr1 = USART2->CR1 & 0x1F0;
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <USART2_IRQHandler+0xa4>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003054:	603b      	str	r3, [r7, #0]

	/* TXIE interrupt (a char has been transfered in the serializer) */
	if ((status & USART_SR_TXE) && (cr1 & USART_CR1_TXEIE) ){
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d024      	beq.n	80030aa <USART2_IRQHandler+0x6a>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01f      	beq.n	80030aa <USART2_IRQHandler+0x6a>
		if (usart2_dev.TxCount < usart2_dev.TxSize){
 800306a:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <USART2_IRQHandler+0xa8>)
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <USART2_IRQHandler+0xa8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d20d      	bcs.n	8003092 <USART2_IRQHandler+0x52>
			USART2->DR = *usart2_dev.pTxBuffer++;
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <USART2_IRQHandler+0xa8>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	491a      	ldr	r1, [pc, #104]	; (80030e8 <USART2_IRQHandler+0xa8>)
 800307e:	604a      	str	r2, [r1, #4]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <USART2_IRQHandler+0xa4>)
 8003084:	605a      	str	r2, [r3, #4]
			usart2_dev.TxCount++;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <USART2_IRQHandler+0xa8>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <USART2_IRQHandler+0xa8>)
 800308e:	6153      	str	r3, [r2, #20]
 8003090:	e00b      	b.n	80030aa <USART2_IRQHandler+0x6a>
		} else {
			/* No char to transmit anymore stop TXE interrupt */
			USART2->CR1 &= ~USART_CR1_TXEIE;
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <USART2_IRQHandler+0xa4>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <USART2_IRQHandler+0xa4>)
 8003098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309c:	60d3      	str	r3, [r2, #12]
			/* optionally enable TC interrupt if the usart is going to be
			 * shut down */
//			USART2->CR1 |= USART_CR1_TCIE;

			/* now the transmission is not busy anymore */
			usart2_dev.state &= ~TX_BUSY ;
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <USART2_IRQHandler+0xa8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0302 	bic.w	r3, r3, #2
 80030a6:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <USART2_IRQHandler+0xa8>)
 80030a8:	6013      	str	r3, [r2, #0]
		}
	}

	/* TCIE interrupt (a char has been completely transmitted on the line) */
	if ((status & USART_SR_TC) && (cr1 & USART_CR1_TCIE) ){
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <USART2_IRQHandler+0x96>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <USART2_IRQHandler+0x96>
		 * USART can be shut down to save power
		 * to maintain the line IDLE for a transmit character duration
		 * and enable end of frame detection a timer should be used
		 */
		/* stop the TC interrupt */
		USART2->CR1 &= ~USART_CR1_TCIE;
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <USART2_IRQHandler+0xa4>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <USART2_IRQHandler+0xa4>)
 80030c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c8:	60d3      	str	r3, [r2, #12]
		/* now the transmission is not busy anymore */
		usart2_dev.state &= ~TX_BUSY ;
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <USART2_IRQHandler+0xa8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0302 	bic.w	r3, r3, #2
 80030d2:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <USART2_IRQHandler+0xa8>)
 80030d4:	6013      	str	r3, [r2, #0]

	/* RXNE interrupt (a char has been received) */

	/* ... */

}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40004400 	.word	0x40004400
 80030e8:	2000a3d8 	.word	0x2000a3d8

080030ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003124 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030f2:	e003      	b.n	80030fc <LoopCopyDataInit>

080030f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030fa:	3104      	adds	r1, #4

080030fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003100:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003102:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003104:	d3f6      	bcc.n	80030f4 <CopyDataInit>
  ldr  r2, =_sbss
 8003106:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003108:	e002      	b.n	8003110 <LoopFillZerobss>

0800310a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800310a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800310c:	f842 3b04 	str.w	r3, [r2], #4

08003110 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003112:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003114:	d3f9      	bcc.n	800310a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003116:	f7ff fe09 	bl	8002d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800311a:	f000 f811 	bl	8003140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800311e:	f7ff fd13 	bl	8002b48 <main>
  bx  lr    
 8003122:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003124:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003128:	08003938 	.word	0x08003938
  ldr  r0, =_sdata
 800312c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003130:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003134:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003138:	2000a40c 	.word	0x2000a40c

0800313c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800313c:	e7fe      	b.n	800313c <ADC_IRQHandler>
	...

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4e0d      	ldr	r6, [pc, #52]	; (8003178 <__libc_init_array+0x38>)
 8003144:	4c0d      	ldr	r4, [pc, #52]	; (800317c <__libc_init_array+0x3c>)
 8003146:	1ba4      	subs	r4, r4, r6
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	2500      	movs	r5, #0
 800314c:	42a5      	cmp	r5, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	4e0b      	ldr	r6, [pc, #44]	; (8003180 <__libc_init_array+0x40>)
 8003152:	4c0c      	ldr	r4, [pc, #48]	; (8003184 <__libc_init_array+0x44>)
 8003154:	f000 fb40 	bl	80037d8 <_init>
 8003158:	1ba4      	subs	r4, r4, r6
 800315a:	10a4      	asrs	r4, r4, #2
 800315c:	2500      	movs	r5, #0
 800315e:	42a5      	cmp	r5, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003168:	4798      	blx	r3
 800316a:	3501      	adds	r5, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003172:	4798      	blx	r3
 8003174:	3501      	adds	r5, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	08003928 	.word	0x08003928
 800317c:	08003928 	.word	0x08003928
 8003180:	08003928 	.word	0x08003928
 8003184:	08003934 	.word	0x08003934

08003188 <memcpy>:
 8003188:	b510      	push	{r4, lr}
 800318a:	1e43      	subs	r3, r0, #1
 800318c:	440a      	add	r2, r1
 800318e:	4291      	cmp	r1, r2
 8003190:	d100      	bne.n	8003194 <memcpy+0xc>
 8003192:	bd10      	pop	{r4, pc}
 8003194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800319c:	e7f7      	b.n	800318e <memcpy+0x6>

0800319e <memset>:
 800319e:	4402      	add	r2, r0
 80031a0:	4603      	mov	r3, r0
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d100      	bne.n	80031a8 <memset+0xa>
 80031a6:	4770      	bx	lr
 80031a8:	f803 1b01 	strb.w	r1, [r3], #1
 80031ac:	e7f9      	b.n	80031a2 <memset+0x4>
	...

080031b0 <siprintf>:
 80031b0:	b40e      	push	{r1, r2, r3}
 80031b2:	b500      	push	{lr}
 80031b4:	b09c      	sub	sp, #112	; 0x70
 80031b6:	ab1d      	add	r3, sp, #116	; 0x74
 80031b8:	9002      	str	r0, [sp, #8]
 80031ba:	9006      	str	r0, [sp, #24]
 80031bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031c0:	4809      	ldr	r0, [pc, #36]	; (80031e8 <siprintf+0x38>)
 80031c2:	9107      	str	r1, [sp, #28]
 80031c4:	9104      	str	r1, [sp, #16]
 80031c6:	4909      	ldr	r1, [pc, #36]	; (80031ec <siprintf+0x3c>)
 80031c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031cc:	9105      	str	r1, [sp, #20]
 80031ce:	6800      	ldr	r0, [r0, #0]
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	a902      	add	r1, sp, #8
 80031d4:	f000 f866 	bl	80032a4 <_svfiprintf_r>
 80031d8:	9b02      	ldr	r3, [sp, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	b01c      	add	sp, #112	; 0x70
 80031e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e4:	b003      	add	sp, #12
 80031e6:	4770      	bx	lr
 80031e8:	2000000c 	.word	0x2000000c
 80031ec:	ffff0208 	.word	0xffff0208

080031f0 <__ssputs_r>:
 80031f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f4:	688e      	ldr	r6, [r1, #8]
 80031f6:	429e      	cmp	r6, r3
 80031f8:	4682      	mov	sl, r0
 80031fa:	460c      	mov	r4, r1
 80031fc:	4690      	mov	r8, r2
 80031fe:	4699      	mov	r9, r3
 8003200:	d837      	bhi.n	8003272 <__ssputs_r+0x82>
 8003202:	898a      	ldrh	r2, [r1, #12]
 8003204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003208:	d031      	beq.n	800326e <__ssputs_r+0x7e>
 800320a:	6825      	ldr	r5, [r4, #0]
 800320c:	6909      	ldr	r1, [r1, #16]
 800320e:	1a6f      	subs	r7, r5, r1
 8003210:	6965      	ldr	r5, [r4, #20]
 8003212:	2302      	movs	r3, #2
 8003214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003218:	fb95 f5f3 	sdiv	r5, r5, r3
 800321c:	f109 0301 	add.w	r3, r9, #1
 8003220:	443b      	add	r3, r7
 8003222:	429d      	cmp	r5, r3
 8003224:	bf38      	it	cc
 8003226:	461d      	movcc	r5, r3
 8003228:	0553      	lsls	r3, r2, #21
 800322a:	d530      	bpl.n	800328e <__ssputs_r+0x9e>
 800322c:	4629      	mov	r1, r5
 800322e:	f7ff fd57 	bl	8002ce0 <_malloc_r>
 8003232:	4606      	mov	r6, r0
 8003234:	b950      	cbnz	r0, 800324c <__ssputs_r+0x5c>
 8003236:	230c      	movs	r3, #12
 8003238:	f8ca 3000 	str.w	r3, [sl]
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003242:	81a3      	strh	r3, [r4, #12]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324c:	463a      	mov	r2, r7
 800324e:	6921      	ldr	r1, [r4, #16]
 8003250:	f7ff ff9a 	bl	8003188 <memcpy>
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800325a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325e:	81a3      	strh	r3, [r4, #12]
 8003260:	6126      	str	r6, [r4, #16]
 8003262:	6165      	str	r5, [r4, #20]
 8003264:	443e      	add	r6, r7
 8003266:	1bed      	subs	r5, r5, r7
 8003268:	6026      	str	r6, [r4, #0]
 800326a:	60a5      	str	r5, [r4, #8]
 800326c:	464e      	mov	r6, r9
 800326e:	454e      	cmp	r6, r9
 8003270:	d900      	bls.n	8003274 <__ssputs_r+0x84>
 8003272:	464e      	mov	r6, r9
 8003274:	4632      	mov	r2, r6
 8003276:	4641      	mov	r1, r8
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	f000 fa93 	bl	80037a4 <memmove>
 800327e:	68a3      	ldr	r3, [r4, #8]
 8003280:	1b9b      	subs	r3, r3, r6
 8003282:	60a3      	str	r3, [r4, #8]
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	441e      	add	r6, r3
 8003288:	6026      	str	r6, [r4, #0]
 800328a:	2000      	movs	r0, #0
 800328c:	e7dc      	b.n	8003248 <__ssputs_r+0x58>
 800328e:	462a      	mov	r2, r5
 8003290:	f7ff fd3f 	bl	8002d12 <_realloc_r>
 8003294:	4606      	mov	r6, r0
 8003296:	2800      	cmp	r0, #0
 8003298:	d1e2      	bne.n	8003260 <__ssputs_r+0x70>
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	4650      	mov	r0, sl
 800329e:	f7ff fd2c 	bl	8002cfa <_free_r>
 80032a2:	e7c8      	b.n	8003236 <__ssputs_r+0x46>

080032a4 <_svfiprintf_r>:
 80032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a8:	461d      	mov	r5, r3
 80032aa:	898b      	ldrh	r3, [r1, #12]
 80032ac:	061f      	lsls	r7, r3, #24
 80032ae:	b09d      	sub	sp, #116	; 0x74
 80032b0:	4680      	mov	r8, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	4616      	mov	r6, r2
 80032b6:	d50f      	bpl.n	80032d8 <_svfiprintf_r+0x34>
 80032b8:	690b      	ldr	r3, [r1, #16]
 80032ba:	b96b      	cbnz	r3, 80032d8 <_svfiprintf_r+0x34>
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	f7ff fd0f 	bl	8002ce0 <_malloc_r>
 80032c2:	6020      	str	r0, [r4, #0]
 80032c4:	6120      	str	r0, [r4, #16]
 80032c6:	b928      	cbnz	r0, 80032d4 <_svfiprintf_r+0x30>
 80032c8:	230c      	movs	r3, #12
 80032ca:	f8c8 3000 	str.w	r3, [r8]
 80032ce:	f04f 30ff 	mov.w	r0, #4294967295
 80032d2:	e0c8      	b.n	8003466 <_svfiprintf_r+0x1c2>
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	6163      	str	r3, [r4, #20]
 80032d8:	2300      	movs	r3, #0
 80032da:	9309      	str	r3, [sp, #36]	; 0x24
 80032dc:	2320      	movs	r3, #32
 80032de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032e2:	2330      	movs	r3, #48	; 0x30
 80032e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032e8:	9503      	str	r5, [sp, #12]
 80032ea:	f04f 0b01 	mov.w	fp, #1
 80032ee:	4637      	mov	r7, r6
 80032f0:	463d      	mov	r5, r7
 80032f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032f6:	b10b      	cbz	r3, 80032fc <_svfiprintf_r+0x58>
 80032f8:	2b25      	cmp	r3, #37	; 0x25
 80032fa:	d13e      	bne.n	800337a <_svfiprintf_r+0xd6>
 80032fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003300:	d00b      	beq.n	800331a <_svfiprintf_r+0x76>
 8003302:	4653      	mov	r3, sl
 8003304:	4632      	mov	r2, r6
 8003306:	4621      	mov	r1, r4
 8003308:	4640      	mov	r0, r8
 800330a:	f7ff ff71 	bl	80031f0 <__ssputs_r>
 800330e:	3001      	adds	r0, #1
 8003310:	f000 80a4 	beq.w	800345c <_svfiprintf_r+0x1b8>
 8003314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003316:	4453      	add	r3, sl
 8003318:	9309      	str	r3, [sp, #36]	; 0x24
 800331a:	783b      	ldrb	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 809d 	beq.w	800345c <_svfiprintf_r+0x1b8>
 8003322:	2300      	movs	r3, #0
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	9307      	str	r3, [sp, #28]
 8003330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003334:	931a      	str	r3, [sp, #104]	; 0x68
 8003336:	462f      	mov	r7, r5
 8003338:	2205      	movs	r2, #5
 800333a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800333e:	4850      	ldr	r0, [pc, #320]	; (8003480 <_svfiprintf_r+0x1dc>)
 8003340:	f7fc ff56 	bl	80001f0 <memchr>
 8003344:	9b04      	ldr	r3, [sp, #16]
 8003346:	b9d0      	cbnz	r0, 800337e <_svfiprintf_r+0xda>
 8003348:	06d9      	lsls	r1, r3, #27
 800334a:	bf44      	itt	mi
 800334c:	2220      	movmi	r2, #32
 800334e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003352:	071a      	lsls	r2, r3, #28
 8003354:	bf44      	itt	mi
 8003356:	222b      	movmi	r2, #43	; 0x2b
 8003358:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800335c:	782a      	ldrb	r2, [r5, #0]
 800335e:	2a2a      	cmp	r2, #42	; 0x2a
 8003360:	d015      	beq.n	800338e <_svfiprintf_r+0xea>
 8003362:	9a07      	ldr	r2, [sp, #28]
 8003364:	462f      	mov	r7, r5
 8003366:	2000      	movs	r0, #0
 8003368:	250a      	movs	r5, #10
 800336a:	4639      	mov	r1, r7
 800336c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003370:	3b30      	subs	r3, #48	; 0x30
 8003372:	2b09      	cmp	r3, #9
 8003374:	d94d      	bls.n	8003412 <_svfiprintf_r+0x16e>
 8003376:	b1b8      	cbz	r0, 80033a8 <_svfiprintf_r+0x104>
 8003378:	e00f      	b.n	800339a <_svfiprintf_r+0xf6>
 800337a:	462f      	mov	r7, r5
 800337c:	e7b8      	b.n	80032f0 <_svfiprintf_r+0x4c>
 800337e:	4a40      	ldr	r2, [pc, #256]	; (8003480 <_svfiprintf_r+0x1dc>)
 8003380:	1a80      	subs	r0, r0, r2
 8003382:	fa0b f000 	lsl.w	r0, fp, r0
 8003386:	4318      	orrs	r0, r3
 8003388:	9004      	str	r0, [sp, #16]
 800338a:	463d      	mov	r5, r7
 800338c:	e7d3      	b.n	8003336 <_svfiprintf_r+0x92>
 800338e:	9a03      	ldr	r2, [sp, #12]
 8003390:	1d11      	adds	r1, r2, #4
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	9103      	str	r1, [sp, #12]
 8003396:	2a00      	cmp	r2, #0
 8003398:	db01      	blt.n	800339e <_svfiprintf_r+0xfa>
 800339a:	9207      	str	r2, [sp, #28]
 800339c:	e004      	b.n	80033a8 <_svfiprintf_r+0x104>
 800339e:	4252      	negs	r2, r2
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	9207      	str	r2, [sp, #28]
 80033a6:	9304      	str	r3, [sp, #16]
 80033a8:	783b      	ldrb	r3, [r7, #0]
 80033aa:	2b2e      	cmp	r3, #46	; 0x2e
 80033ac:	d10c      	bne.n	80033c8 <_svfiprintf_r+0x124>
 80033ae:	787b      	ldrb	r3, [r7, #1]
 80033b0:	2b2a      	cmp	r3, #42	; 0x2a
 80033b2:	d133      	bne.n	800341c <_svfiprintf_r+0x178>
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	9203      	str	r2, [sp, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bfb8      	it	lt
 80033c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80033c4:	3702      	adds	r7, #2
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	4d2e      	ldr	r5, [pc, #184]	; (8003484 <_svfiprintf_r+0x1e0>)
 80033ca:	7839      	ldrb	r1, [r7, #0]
 80033cc:	2203      	movs	r2, #3
 80033ce:	4628      	mov	r0, r5
 80033d0:	f7fc ff0e 	bl	80001f0 <memchr>
 80033d4:	b138      	cbz	r0, 80033e6 <_svfiprintf_r+0x142>
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	1b40      	subs	r0, r0, r5
 80033da:	fa03 f000 	lsl.w	r0, r3, r0
 80033de:	9b04      	ldr	r3, [sp, #16]
 80033e0:	4303      	orrs	r3, r0
 80033e2:	3701      	adds	r7, #1
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	7839      	ldrb	r1, [r7, #0]
 80033e8:	4827      	ldr	r0, [pc, #156]	; (8003488 <_svfiprintf_r+0x1e4>)
 80033ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033ee:	2206      	movs	r2, #6
 80033f0:	1c7e      	adds	r6, r7, #1
 80033f2:	f7fc fefd 	bl	80001f0 <memchr>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d038      	beq.n	800346c <_svfiprintf_r+0x1c8>
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <_svfiprintf_r+0x1e8>)
 80033fc:	bb13      	cbnz	r3, 8003444 <_svfiprintf_r+0x1a0>
 80033fe:	9b03      	ldr	r3, [sp, #12]
 8003400:	3307      	adds	r3, #7
 8003402:	f023 0307 	bic.w	r3, r3, #7
 8003406:	3308      	adds	r3, #8
 8003408:	9303      	str	r3, [sp, #12]
 800340a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800340c:	444b      	add	r3, r9
 800340e:	9309      	str	r3, [sp, #36]	; 0x24
 8003410:	e76d      	b.n	80032ee <_svfiprintf_r+0x4a>
 8003412:	fb05 3202 	mla	r2, r5, r2, r3
 8003416:	2001      	movs	r0, #1
 8003418:	460f      	mov	r7, r1
 800341a:	e7a6      	b.n	800336a <_svfiprintf_r+0xc6>
 800341c:	2300      	movs	r3, #0
 800341e:	3701      	adds	r7, #1
 8003420:	9305      	str	r3, [sp, #20]
 8003422:	4619      	mov	r1, r3
 8003424:	250a      	movs	r5, #10
 8003426:	4638      	mov	r0, r7
 8003428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800342c:	3a30      	subs	r2, #48	; 0x30
 800342e:	2a09      	cmp	r2, #9
 8003430:	d903      	bls.n	800343a <_svfiprintf_r+0x196>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0c8      	beq.n	80033c8 <_svfiprintf_r+0x124>
 8003436:	9105      	str	r1, [sp, #20]
 8003438:	e7c6      	b.n	80033c8 <_svfiprintf_r+0x124>
 800343a:	fb05 2101 	mla	r1, r5, r1, r2
 800343e:	2301      	movs	r3, #1
 8003440:	4607      	mov	r7, r0
 8003442:	e7f0      	b.n	8003426 <_svfiprintf_r+0x182>
 8003444:	ab03      	add	r3, sp, #12
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4622      	mov	r2, r4
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <_svfiprintf_r+0x1ec>)
 800344c:	a904      	add	r1, sp, #16
 800344e:	4640      	mov	r0, r8
 8003450:	f3af 8000 	nop.w
 8003454:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003458:	4681      	mov	r9, r0
 800345a:	d1d6      	bne.n	800340a <_svfiprintf_r+0x166>
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	065b      	lsls	r3, r3, #25
 8003460:	f53f af35 	bmi.w	80032ce <_svfiprintf_r+0x2a>
 8003464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003466:	b01d      	add	sp, #116	; 0x74
 8003468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346c:	ab03      	add	r3, sp, #12
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	4622      	mov	r2, r4
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <_svfiprintf_r+0x1ec>)
 8003474:	a904      	add	r1, sp, #16
 8003476:	4640      	mov	r0, r8
 8003478:	f000 f882 	bl	8003580 <_printf_i>
 800347c:	e7ea      	b.n	8003454 <_svfiprintf_r+0x1b0>
 800347e:	bf00      	nop
 8003480:	080038f5 	.word	0x080038f5
 8003484:	080038fb 	.word	0x080038fb
 8003488:	080038ff 	.word	0x080038ff
 800348c:	00000000 	.word	0x00000000
 8003490:	080031f1 	.word	0x080031f1

08003494 <_printf_common>:
 8003494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	4691      	mov	r9, r2
 800349a:	461f      	mov	r7, r3
 800349c:	688a      	ldr	r2, [r1, #8]
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bfb8      	it	lt
 80034a8:	4613      	movlt	r3, r2
 80034aa:	f8c9 3000 	str.w	r3, [r9]
 80034ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034b2:	4606      	mov	r6, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	b112      	cbz	r2, 80034be <_printf_common+0x2a>
 80034b8:	3301      	adds	r3, #1
 80034ba:	f8c9 3000 	str.w	r3, [r9]
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	0699      	lsls	r1, r3, #26
 80034c2:	bf42      	ittt	mi
 80034c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034c8:	3302      	addmi	r3, #2
 80034ca:	f8c9 3000 	strmi.w	r3, [r9]
 80034ce:	6825      	ldr	r5, [r4, #0]
 80034d0:	f015 0506 	ands.w	r5, r5, #6
 80034d4:	d107      	bne.n	80034e6 <_printf_common+0x52>
 80034d6:	f104 0a19 	add.w	sl, r4, #25
 80034da:	68e3      	ldr	r3, [r4, #12]
 80034dc:	f8d9 2000 	ldr.w	r2, [r9]
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	42ab      	cmp	r3, r5
 80034e4:	dc28      	bgt.n	8003538 <_printf_common+0xa4>
 80034e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	3300      	adds	r3, #0
 80034ee:	bf18      	it	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	0692      	lsls	r2, r2, #26
 80034f4:	d42d      	bmi.n	8003552 <_printf_common+0xbe>
 80034f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034fa:	4639      	mov	r1, r7
 80034fc:	4630      	mov	r0, r6
 80034fe:	47c0      	blx	r8
 8003500:	3001      	adds	r0, #1
 8003502:	d020      	beq.n	8003546 <_printf_common+0xb2>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	68e5      	ldr	r5, [r4, #12]
 8003508:	f8d9 2000 	ldr.w	r2, [r9]
 800350c:	f003 0306 	and.w	r3, r3, #6
 8003510:	2b04      	cmp	r3, #4
 8003512:	bf08      	it	eq
 8003514:	1aad      	subeq	r5, r5, r2
 8003516:	68a3      	ldr	r3, [r4, #8]
 8003518:	6922      	ldr	r2, [r4, #16]
 800351a:	bf0c      	ite	eq
 800351c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003520:	2500      	movne	r5, #0
 8003522:	4293      	cmp	r3, r2
 8003524:	bfc4      	itt	gt
 8003526:	1a9b      	subgt	r3, r3, r2
 8003528:	18ed      	addgt	r5, r5, r3
 800352a:	f04f 0900 	mov.w	r9, #0
 800352e:	341a      	adds	r4, #26
 8003530:	454d      	cmp	r5, r9
 8003532:	d11a      	bne.n	800356a <_printf_common+0xd6>
 8003534:	2000      	movs	r0, #0
 8003536:	e008      	b.n	800354a <_printf_common+0xb6>
 8003538:	2301      	movs	r3, #1
 800353a:	4652      	mov	r2, sl
 800353c:	4639      	mov	r1, r7
 800353e:	4630      	mov	r0, r6
 8003540:	47c0      	blx	r8
 8003542:	3001      	adds	r0, #1
 8003544:	d103      	bne.n	800354e <_printf_common+0xba>
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354e:	3501      	adds	r5, #1
 8003550:	e7c3      	b.n	80034da <_printf_common+0x46>
 8003552:	18e1      	adds	r1, r4, r3
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	2030      	movs	r0, #48	; 0x30
 8003558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800355c:	4422      	add	r2, r4
 800355e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003566:	3302      	adds	r3, #2
 8003568:	e7c5      	b.n	80034f6 <_printf_common+0x62>
 800356a:	2301      	movs	r3, #1
 800356c:	4622      	mov	r2, r4
 800356e:	4639      	mov	r1, r7
 8003570:	4630      	mov	r0, r6
 8003572:	47c0      	blx	r8
 8003574:	3001      	adds	r0, #1
 8003576:	d0e6      	beq.n	8003546 <_printf_common+0xb2>
 8003578:	f109 0901 	add.w	r9, r9, #1
 800357c:	e7d8      	b.n	8003530 <_printf_common+0x9c>
	...

08003580 <_printf_i>:
 8003580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003584:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003588:	460c      	mov	r4, r1
 800358a:	7e09      	ldrb	r1, [r1, #24]
 800358c:	b085      	sub	sp, #20
 800358e:	296e      	cmp	r1, #110	; 0x6e
 8003590:	4617      	mov	r7, r2
 8003592:	4606      	mov	r6, r0
 8003594:	4698      	mov	r8, r3
 8003596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003598:	f000 80b3 	beq.w	8003702 <_printf_i+0x182>
 800359c:	d822      	bhi.n	80035e4 <_printf_i+0x64>
 800359e:	2963      	cmp	r1, #99	; 0x63
 80035a0:	d036      	beq.n	8003610 <_printf_i+0x90>
 80035a2:	d80a      	bhi.n	80035ba <_printf_i+0x3a>
 80035a4:	2900      	cmp	r1, #0
 80035a6:	f000 80b9 	beq.w	800371c <_printf_i+0x19c>
 80035aa:	2958      	cmp	r1, #88	; 0x58
 80035ac:	f000 8083 	beq.w	80036b6 <_printf_i+0x136>
 80035b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80035b8:	e032      	b.n	8003620 <_printf_i+0xa0>
 80035ba:	2964      	cmp	r1, #100	; 0x64
 80035bc:	d001      	beq.n	80035c2 <_printf_i+0x42>
 80035be:	2969      	cmp	r1, #105	; 0x69
 80035c0:	d1f6      	bne.n	80035b0 <_printf_i+0x30>
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	6813      	ldr	r3, [r2, #0]
 80035c6:	0605      	lsls	r5, r0, #24
 80035c8:	f103 0104 	add.w	r1, r3, #4
 80035cc:	d52a      	bpl.n	8003624 <_printf_i+0xa4>
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da03      	bge.n	80035de <_printf_i+0x5e>
 80035d6:	222d      	movs	r2, #45	; 0x2d
 80035d8:	425b      	negs	r3, r3
 80035da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035de:	486f      	ldr	r0, [pc, #444]	; (800379c <_printf_i+0x21c>)
 80035e0:	220a      	movs	r2, #10
 80035e2:	e039      	b.n	8003658 <_printf_i+0xd8>
 80035e4:	2973      	cmp	r1, #115	; 0x73
 80035e6:	f000 809d 	beq.w	8003724 <_printf_i+0x1a4>
 80035ea:	d808      	bhi.n	80035fe <_printf_i+0x7e>
 80035ec:	296f      	cmp	r1, #111	; 0x6f
 80035ee:	d020      	beq.n	8003632 <_printf_i+0xb2>
 80035f0:	2970      	cmp	r1, #112	; 0x70
 80035f2:	d1dd      	bne.n	80035b0 <_printf_i+0x30>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	e003      	b.n	8003606 <_printf_i+0x86>
 80035fe:	2975      	cmp	r1, #117	; 0x75
 8003600:	d017      	beq.n	8003632 <_printf_i+0xb2>
 8003602:	2978      	cmp	r1, #120	; 0x78
 8003604:	d1d4      	bne.n	80035b0 <_printf_i+0x30>
 8003606:	2378      	movs	r3, #120	; 0x78
 8003608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800360c:	4864      	ldr	r0, [pc, #400]	; (80037a0 <_printf_i+0x220>)
 800360e:	e055      	b.n	80036bc <_printf_i+0x13c>
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	1d19      	adds	r1, r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800361c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003620:	2301      	movs	r3, #1
 8003622:	e08c      	b.n	800373e <_printf_i+0x1be>
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6011      	str	r1, [r2, #0]
 8003628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800362c:	bf18      	it	ne
 800362e:	b21b      	sxthne	r3, r3
 8003630:	e7cf      	b.n	80035d2 <_printf_i+0x52>
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	6825      	ldr	r5, [r4, #0]
 8003636:	1d18      	adds	r0, r3, #4
 8003638:	6010      	str	r0, [r2, #0]
 800363a:	0628      	lsls	r0, r5, #24
 800363c:	d501      	bpl.n	8003642 <_printf_i+0xc2>
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e002      	b.n	8003648 <_printf_i+0xc8>
 8003642:	0668      	lsls	r0, r5, #25
 8003644:	d5fb      	bpl.n	800363e <_printf_i+0xbe>
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	4854      	ldr	r0, [pc, #336]	; (800379c <_printf_i+0x21c>)
 800364a:	296f      	cmp	r1, #111	; 0x6f
 800364c:	bf14      	ite	ne
 800364e:	220a      	movne	r2, #10
 8003650:	2208      	moveq	r2, #8
 8003652:	2100      	movs	r1, #0
 8003654:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003658:	6865      	ldr	r5, [r4, #4]
 800365a:	60a5      	str	r5, [r4, #8]
 800365c:	2d00      	cmp	r5, #0
 800365e:	f2c0 8095 	blt.w	800378c <_printf_i+0x20c>
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	f021 0104 	bic.w	r1, r1, #4
 8003668:	6021      	str	r1, [r4, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13d      	bne.n	80036ea <_printf_i+0x16a>
 800366e:	2d00      	cmp	r5, #0
 8003670:	f040 808e 	bne.w	8003790 <_printf_i+0x210>
 8003674:	4665      	mov	r5, ip
 8003676:	2a08      	cmp	r2, #8
 8003678:	d10b      	bne.n	8003692 <_printf_i+0x112>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	07db      	lsls	r3, r3, #31
 800367e:	d508      	bpl.n	8003692 <_printf_i+0x112>
 8003680:	6923      	ldr	r3, [r4, #16]
 8003682:	6862      	ldr	r2, [r4, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	bfde      	ittt	le
 8003688:	2330      	movle	r3, #48	; 0x30
 800368a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800368e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003692:	ebac 0305 	sub.w	r3, ip, r5
 8003696:	6123      	str	r3, [r4, #16]
 8003698:	f8cd 8000 	str.w	r8, [sp]
 800369c:	463b      	mov	r3, r7
 800369e:	aa03      	add	r2, sp, #12
 80036a0:	4621      	mov	r1, r4
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7ff fef6 	bl	8003494 <_printf_common>
 80036a8:	3001      	adds	r0, #1
 80036aa:	d14d      	bne.n	8003748 <_printf_i+0x1c8>
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	b005      	add	sp, #20
 80036b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036b6:	4839      	ldr	r0, [pc, #228]	; (800379c <_printf_i+0x21c>)
 80036b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	6821      	ldr	r1, [r4, #0]
 80036c0:	1d1d      	adds	r5, r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6015      	str	r5, [r2, #0]
 80036c6:	060a      	lsls	r2, r1, #24
 80036c8:	d50b      	bpl.n	80036e2 <_printf_i+0x162>
 80036ca:	07ca      	lsls	r2, r1, #31
 80036cc:	bf44      	itt	mi
 80036ce:	f041 0120 	orrmi.w	r1, r1, #32
 80036d2:	6021      	strmi	r1, [r4, #0]
 80036d4:	b91b      	cbnz	r3, 80036de <_printf_i+0x15e>
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	f022 0220 	bic.w	r2, r2, #32
 80036dc:	6022      	str	r2, [r4, #0]
 80036de:	2210      	movs	r2, #16
 80036e0:	e7b7      	b.n	8003652 <_printf_i+0xd2>
 80036e2:	064d      	lsls	r5, r1, #25
 80036e4:	bf48      	it	mi
 80036e6:	b29b      	uxthmi	r3, r3
 80036e8:	e7ef      	b.n	80036ca <_printf_i+0x14a>
 80036ea:	4665      	mov	r5, ip
 80036ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80036f0:	fb02 3311 	mls	r3, r2, r1, r3
 80036f4:	5cc3      	ldrb	r3, [r0, r3]
 80036f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036fa:	460b      	mov	r3, r1
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d1f5      	bne.n	80036ec <_printf_i+0x16c>
 8003700:	e7b9      	b.n	8003676 <_printf_i+0xf6>
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	6825      	ldr	r5, [r4, #0]
 8003706:	6961      	ldr	r1, [r4, #20]
 8003708:	1d18      	adds	r0, r3, #4
 800370a:	6010      	str	r0, [r2, #0]
 800370c:	0628      	lsls	r0, r5, #24
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	d501      	bpl.n	8003716 <_printf_i+0x196>
 8003712:	6019      	str	r1, [r3, #0]
 8003714:	e002      	b.n	800371c <_printf_i+0x19c>
 8003716:	066a      	lsls	r2, r5, #25
 8003718:	d5fb      	bpl.n	8003712 <_printf_i+0x192>
 800371a:	8019      	strh	r1, [r3, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	6123      	str	r3, [r4, #16]
 8003720:	4665      	mov	r5, ip
 8003722:	e7b9      	b.n	8003698 <_printf_i+0x118>
 8003724:	6813      	ldr	r3, [r2, #0]
 8003726:	1d19      	adds	r1, r3, #4
 8003728:	6011      	str	r1, [r2, #0]
 800372a:	681d      	ldr	r5, [r3, #0]
 800372c:	6862      	ldr	r2, [r4, #4]
 800372e:	2100      	movs	r1, #0
 8003730:	4628      	mov	r0, r5
 8003732:	f7fc fd5d 	bl	80001f0 <memchr>
 8003736:	b108      	cbz	r0, 800373c <_printf_i+0x1bc>
 8003738:	1b40      	subs	r0, r0, r5
 800373a:	6060      	str	r0, [r4, #4]
 800373c:	6863      	ldr	r3, [r4, #4]
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	2300      	movs	r3, #0
 8003742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003746:	e7a7      	b.n	8003698 <_printf_i+0x118>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	462a      	mov	r2, r5
 800374c:	4639      	mov	r1, r7
 800374e:	4630      	mov	r0, r6
 8003750:	47c0      	blx	r8
 8003752:	3001      	adds	r0, #1
 8003754:	d0aa      	beq.n	80036ac <_printf_i+0x12c>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	079b      	lsls	r3, r3, #30
 800375a:	d413      	bmi.n	8003784 <_printf_i+0x204>
 800375c:	68e0      	ldr	r0, [r4, #12]
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	4298      	cmp	r0, r3
 8003762:	bfb8      	it	lt
 8003764:	4618      	movlt	r0, r3
 8003766:	e7a3      	b.n	80036b0 <_printf_i+0x130>
 8003768:	2301      	movs	r3, #1
 800376a:	464a      	mov	r2, r9
 800376c:	4639      	mov	r1, r7
 800376e:	4630      	mov	r0, r6
 8003770:	47c0      	blx	r8
 8003772:	3001      	adds	r0, #1
 8003774:	d09a      	beq.n	80036ac <_printf_i+0x12c>
 8003776:	3501      	adds	r5, #1
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	9a03      	ldr	r2, [sp, #12]
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	42ab      	cmp	r3, r5
 8003780:	dcf2      	bgt.n	8003768 <_printf_i+0x1e8>
 8003782:	e7eb      	b.n	800375c <_printf_i+0x1dc>
 8003784:	2500      	movs	r5, #0
 8003786:	f104 0919 	add.w	r9, r4, #25
 800378a:	e7f5      	b.n	8003778 <_printf_i+0x1f8>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ac      	bne.n	80036ea <_printf_i+0x16a>
 8003790:	7803      	ldrb	r3, [r0, #0]
 8003792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003796:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379a:	e76c      	b.n	8003676 <_printf_i+0xf6>
 800379c:	08003906 	.word	0x08003906
 80037a0:	08003917 	.word	0x08003917

080037a4 <memmove>:
 80037a4:	4288      	cmp	r0, r1
 80037a6:	b510      	push	{r4, lr}
 80037a8:	eb01 0302 	add.w	r3, r1, r2
 80037ac:	d807      	bhi.n	80037be <memmove+0x1a>
 80037ae:	1e42      	subs	r2, r0, #1
 80037b0:	4299      	cmp	r1, r3
 80037b2:	d00a      	beq.n	80037ca <memmove+0x26>
 80037b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037bc:	e7f8      	b.n	80037b0 <memmove+0xc>
 80037be:	4283      	cmp	r3, r0
 80037c0:	d9f5      	bls.n	80037ae <memmove+0xa>
 80037c2:	1881      	adds	r1, r0, r2
 80037c4:	1ad2      	subs	r2, r2, r3
 80037c6:	42d3      	cmn	r3, r2
 80037c8:	d100      	bne.n	80037cc <memmove+0x28>
 80037ca:	bd10      	pop	{r4, pc}
 80037cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037d4:	e7f7      	b.n	80037c6 <memmove+0x22>
	...

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
