
STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  08000454  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  08000454  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800045c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000460  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000460  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c31  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002b1  00000000  00000000  00020c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00020f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00020ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dc57  00000000  00000000  00021090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000dd9  00000000  00000000  0002ece7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004f630  00000000  00000000  0002fac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007f0f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f0  00000000  00000000  0007f16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800043c 	.word	0x0800043c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800043c 	.word	0x0800043c

080001d4 <main>:
  * @param  none
  * @retval 0 if success
 */

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0


	/* 2 port instance are declared and mapped on GPIOA and GPIOC address
		 * GPIOA and GPIOC are constant address defined in stm32f401xe.h
		 */
		GPIO_TypeDef * PA = GPIOA, *PC = GPIOC, *PB = GPIOB;
 80001da:	4b4d      	ldr	r3, [pc, #308]	; (8000310 <main+0x13c>)
 80001dc:	613b      	str	r3, [r7, #16]
 80001de:	4b4d      	ldr	r3, [pc, #308]	; (8000314 <main+0x140>)
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	4b4d      	ldr	r3, [pc, #308]	; (8000318 <main+0x144>)
 80001e4:	60bb      	str	r3, [r7, #8]
		 * of GPIOA and GPOC
		 * RCC is macro definced in stm32f401xe.h and RCC_AHB1ENR_GPIOAEN and
		 * RCC_AHB1ENR_GPIOCEN RCC_AHB1ENR_GPIOCEN are constant also defined in
		 * stm32f401xe.h
		 */
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOBEN;
 80001e6:	4b4d      	ldr	r3, [pc, #308]	; (800031c <main+0x148>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	4a4c      	ldr	r2, [pc, #304]	; (800031c <main+0x148>)
 80001ec:	f043 0307 	orr.w	r3, r3, #7
 80001f0:	6313      	str	r3, [r2, #48]	; 0x30
		/* GPIOA configuration :  output, slow speed, push-pull, no pull
		 * After reset, only the output mode should be set. the other configuration
		 * are correct.
		 */
		/* PA5 in output mode */
		PA->MODER &= ~GPIO_MODER_MODER5_Msk; /* GPIO_MODER_MODER5_Msk : constante
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	601a      	str	r2, [r3, #0]
												dÃ©finie dans stm32f401xe.h */
		PA->MODER |= GPIO_MODER_MODER5_0;	/* GPIO_MODER_MODER5_0, constante
 80001fe:	693b      	ldr	r3, [r7, #16]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	601a      	str	r2, [r3, #0]
												dÃ©finie dans stm32f401xe.h */
		/* Si on considÃ¨re que PA est dans un Ã©tat indÃ©terminÃ© */
		/* output push pull */
		PA->OTYPER &= ~GPIO_OTYPER_OT5_Msk;			// clear bit field
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	f023 0220 	bic.w	r2, r3, #32
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	605a      	str	r2, [r3, #4]
		/* slow speed, better for low electrical interference (less noisy) */
		PA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED5_Msk;	// clear bit field
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	609a      	str	r2, [r3, #8]
		/* no pull-up or pull-down resistor */
		PA->PUPDR &= ~GPIO_PUPDR_PUPD5_Msk;			// clear bit field
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	68db      	ldr	r3, [r3, #12]
 8000226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	60da      	str	r2, [r3, #12]

		/* configure PC13 : input, no pull */
		PC->MODER &= ~GPIO_MODER_MODE13_Msk;		// clear bit field
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
		PC->PUPDR &= ~GPIO_PUPDR_PUPD13_Msk;		// clear bit field
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	60da      	str	r2, [r3, #12]
		/* other config registers are irrelevant for pins in input mode */

		/* Activer horloger GPIOA */

		/* PA2(TX) en alternate function nÂ°7 */
		PB->AFR[0] &= ~GPIO_AFRL_AFRL7;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	621a      	str	r2, [r3, #32]
		PB->AFR[0] |= GPIO_AFRL_AFRL7_1;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	621a      	str	r2, [r3, #32]
		/* alternate function PA7*/
		PB->MODER &= ~GPIO_MODER_MODER7;
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	601a      	str	r2, [r3, #0]
		PB->MODER |= GPIO_MODER_MODER7_1;
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]



		TIM_TypeDef* tim3 = TIM3;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <main+0x14c>)
 8000278:	607b      	str	r3, [r7, #4]
		int is_activate = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <main+0x148>)
 8000280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000282:	4a26      	ldr	r2, [pc, #152]	; (800031c <main+0x148>)
 8000284:	f043 0302 	orr.w	r3, r3, #2
 8000288:	6413      	str	r3, [r2, #64]	; 0x40

		//CK_CNT * PSC = CK_PSC => PSC= CK_PSC / CK_CNT = 16 000/10
		TIM3->PSC = SystemCoreClock /10000 -1;
 800028a:	4b26      	ldr	r3, [pc, #152]	; (8000324 <main+0x150>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <main+0x154>)
 8000290:	fba2 2303 	umull	r2, r3, r2, r3
 8000294:	0b5b      	lsrs	r3, r3, #13
 8000296:	4a22      	ldr	r2, [pc, #136]	; (8000320 <main+0x14c>)
 8000298:	3b01      	subs	r3, #1
 800029a:	6293      	str	r3, [r2, #40]	; 0x28
		//auto reload = CK_PSC / f_led = 10000/2 - 1
		TIM3->ARR = 10000/10/2 - 1;
 800029c:	4b20      	ldr	r3, [pc, #128]	; (8000320 <main+0x14c>)
 800029e:	f240 12f3 	movw	r2, #499	; 0x1f3
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
		//set EGR register bit to 1 to force the update and start the count at 0
		TIM3->EGR &= ~TIM_EGR_UG;
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <main+0x14c>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a1d      	ldr	r2, [pc, #116]	; (8000320 <main+0x14c>)
 80002aa:	f023 0301 	bic.w	r3, r3, #1
 80002ae:	6153      	str	r3, [r2, #20]

		TIM3->EGR |= TIM_EGR_UG_Msk;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <main+0x14c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <main+0x14c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
		//set bit OGR from CR1 register of TIM3 to 1 for 'one shot' behaviour
		//TIM3->CCR1 |= TIM_CR1_OPM_Msk;
		//errase status register (p347 'reset value = 0x0000')
		TIM3->SR = 0;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <main+0x14c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
		//start timer
		TIM3->CR1 |= TIM_CR1_CEN_Msk;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <main+0x14c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a16      	ldr	r2, [pc, #88]	; (8000320 <main+0x14c>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]


		for(;;){

			/** clignotage de led**/
			if((TIM3->SR & TIM_SR_UIF_Msk)){
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <main+0x14c>)
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <main+0xfa>

				if(is_activate){
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d008      	beq.n	80002f2 <main+0x11e>
					/* éteint la led */
					PA->ODR &= ~GPIO_ODR_OD5;
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	f023 0220 	bic.w	r2, r3, #32
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	615a      	str	r2, [r3, #20]
					is_activate =0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	e007      	b.n	8000302 <main+0x12e>
				}
				else{
					/* allume la led */
					PA->ODR |= GPIO_ODR_OD5;	//(1<<5);
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f043 0220 	orr.w	r2, r3, #32
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	615a      	str	r2, [r3, #20]
					is_activate = 1;
 80002fe:	2301      	movs	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
				}

				tim3->SR &= ~TIM_SR_UIF_Msk;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	f023 0201 	bic.w	r2, r3, #1
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	611a      	str	r2, [r3, #16]
			if((TIM3->SR & TIM_SR_UIF_Msk)){
 800030e:	e7de      	b.n	80002ce <main+0xfa>
 8000310:	40020000 	.word	0x40020000
 8000314:	40020800 	.word	0x40020800
 8000318:	40020400 	.word	0x40020400
 800031c:	40023800 	.word	0x40023800
 8000320:	40000400 	.word	0x40000400
 8000324:	20000000 	.word	0x20000000
 8000328:	d1b71759 	.word	0xd1b71759

0800032c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800033e:	e7fe      	b.n	800033e <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000344:	e7fe      	b.n	8000344 <MemManage_Handler+0x4>

08000346 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800034a:	e7fe      	b.n	800034a <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000350:	e7fe      	b.n	8000350 <UsageFault_Handler+0x4>

08000352 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <SystemInit+0x20>)
 8000382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <SystemInit+0x20>)
 8000388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800038c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003a6:	e003      	b.n	80003b0 <LoopCopyDataInit>

080003a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ae:	3104      	adds	r1, #4

080003b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003b8:	d3f6      	bcc.n	80003a8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003bc:	e002      	b.n	80003c4 <LoopFillZerobss>

080003be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003c0:	f842 3b04 	str.w	r3, [r2], #4

080003c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003c8:	d3f9      	bcc.n	80003be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ca:	f7ff ffd7 	bl	800037c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d2:	f7ff feff 	bl	80001d4 <main>
  bx  lr    
 80003d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80003dc:	0800045c 	.word	0x0800045c
  ldr  r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003e4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80003e8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80003ec:	20000020 	.word	0x20000020

080003f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4e0d      	ldr	r6, [pc, #52]	; (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	; (8000430 <__libc_init_array+0x3c>)
 80003fa:	1ba4      	subs	r4, r4, r6
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2500      	movs	r5, #0
 8000400:	42a5      	cmp	r5, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4e0b      	ldr	r6, [pc, #44]	; (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	; (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1ba4      	subs	r4, r4, r6
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2500      	movs	r5, #0
 8000412:	42a5      	cmp	r5, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800041c:	4798      	blx	r3
 800041e:	3501      	adds	r5, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000426:	4798      	blx	r3
 8000428:	3501      	adds	r5, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
